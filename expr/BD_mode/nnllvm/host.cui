# 1 "nn_cuda.cu"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 686 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 1 3
# 46 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_math_forward_declares.h" 1 3
# 40 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_math_forward_declares.h" 3
static __inline__ __attribute__((always_inline)) __attribute__((device)) double abs(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float abs(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) int abs(int);
static __inline__ __attribute__((always_inline)) __attribute__((device)) long abs(long);
static __inline__ __attribute__((always_inline)) __attribute__((device)) long long abs(long long);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double acos(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float acos(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double acosh(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float acosh(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double asin(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float asin(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double asinh(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float asinh(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double atan2(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float atan2(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double atan(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float atan(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double atanh(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float atanh(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double cbrt(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float cbrt(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double ceil(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float ceil(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double copysign(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float copysign(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double cos(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float cos(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double cosh(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float cosh(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double erfc(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float erfc(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double erf(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float erf(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double exp2(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float exp2(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double exp(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float exp(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double expm1(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float expm1(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double fabs(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float fabs(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double fdim(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float fdim(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double floor(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float floor(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double fma(double, double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float fma(float, float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double fmax(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float fmax(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double fmin(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float fmin(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double fmod(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float fmod(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) int fpclassify(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) int fpclassify(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double frexp(double, int *);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float frexp(float, int *);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double hypot(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float hypot(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) int ilogb(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) int ilogb(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isfinite(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isfinite(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isgreater(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isgreaterequal(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isgreaterequal(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isgreater(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isinf(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isinf(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isless(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool islessequal(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool islessequal(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isless(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool islessgreater(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool islessgreater(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isnan(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isnan(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isnormal(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isnormal(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isunordered(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool isunordered(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) long labs(long);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double ldexp(double, int);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float ldexp(float, int);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double lgamma(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float lgamma(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) long long llabs(long long);
static __inline__ __attribute__((always_inline)) __attribute__((device)) long long llrint(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) long long llrint(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double log10(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float log10(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double log1p(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float log1p(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double log2(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float log2(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double logb(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float logb(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double log(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float log(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) long lrint(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) long lrint(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) long lround(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) long lround(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) long long llround(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double modf(double, double *);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float modf(float, float *);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double nan(const char *);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float nanf(const char *);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double nearbyint(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float nearbyint(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double nextafter(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float nextafter(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double pow(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double pow(double, int);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float pow(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float pow(float, int);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double remainder(double, double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float remainder(float, float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double remquo(double, double, int *);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float remquo(float, float, int *);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double rint(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float rint(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double round(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float round(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double scalbln(double, long);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float scalbln(float, long);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double scalbn(double, int);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float scalbn(float, int);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool signbit(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) bool signbit(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double sin(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float sin(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double sinh(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float sinh(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double sqrt(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float sqrt(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double tan(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tan(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double tanh(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tanh(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double tgamma(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tgamma(float);
static __inline__ __attribute__((always_inline)) __attribute__((device)) double trunc(double);
static __inline__ __attribute__((always_inline)) __attribute__((device)) float trunc(float);
# 196 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_math_forward_declares.h" 3
namespace std {





using ::abs;
using ::acos;
using ::acosh;
using ::asin;
using ::asinh;
using ::atan;
using ::atan2;
using ::atanh;
using ::cbrt;
using ::ceil;
using ::copysign;
using ::cos;
using ::cosh;
using ::erf;
using ::erfc;
using ::exp;
using ::exp2;
using ::expm1;
using ::fabs;
using ::fdim;
using ::floor;
using ::fma;
using ::fmax;
using ::fmin;
using ::fmod;
using ::fpclassify;
using ::frexp;
using ::hypot;
using ::ilogb;
using ::isfinite;
using ::isgreater;
using ::isgreaterequal;
using ::isinf;
using ::isless;
using ::islessequal;
using ::islessgreater;
using ::isnan;
using ::isnormal;
using ::isunordered;
using ::labs;
using ::ldexp;
using ::lgamma;
using ::llabs;
using ::llrint;
using ::log;
using ::log10;
using ::log1p;
using ::log2;
using ::logb;
using ::lrint;
using ::lround;
using ::llround;
using ::modf;
using ::nan;
using ::nanf;
using ::nearbyint;
using ::nextafter;
using ::pow;
using ::remainder;
using ::remquo;
using ::rint;
using ::round;
using ::scalbln;
using ::scalbn;
using ::signbit;
using ::sin;
using ::sinh;
using ::sqrt;
using ::tan;
using ::tanh;
using ::tgamma;
using ::trunc;







}
# 47 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 1 3
# 194 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;




}
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 482 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/os_defines.h" 1 3
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 345 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 346 "/usr/include/features.h" 2 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/os_defines.h" 2 3
# 483 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 2 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/cpu_defines.h" 1 3
# 486 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 2 3
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cpp_type_traits.h" 1 3
# 36 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cpp_type_traits.h" 3
# 68 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 199 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 287 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 444 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cpp_type_traits.h" 3
}
# 43 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/type_traits.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }
# 165 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/type_traits.h" 3
  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 44 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 2 3
# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 32 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 39 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 42 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 45 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 49 "/usr/include/math.h" 2 3 4
# 83 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


 extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

 extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




 extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();






extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







 extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


 extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));
# 204 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinf (double __value) throw () __attribute__ ((__const__));



extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));






extern int isnan (double __value) throw () __attribute__ ((__const__));





extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));






extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 84 "/usr/include/math.h" 2 3 4
# 104 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


 extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

 extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




 extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();






extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







 extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


 extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));
# 204 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));



extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));






extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));






extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 105 "/usr/include/math.h" 2 3 4
# 151 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


 extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

 extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();






extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







 extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


 extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));
# 204 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));



extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));






extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));






extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 152 "/usr/include/math.h" 2 3 4
# 168 "/usr/include/math.h" 3 4
extern int signgam;
# 209 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 347 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 370 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 472 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 1 3 4
# 126 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
 __signbitf (float __x) throw ()
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x8) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
 __signbit (double __x) throw ()
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x80) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
 __signbitl (long double __x) throw ()
{
  __extension__ union { long double __l; int __i[3]; } __u = { __l: __x };
  return (__u.__i[2] & 0x8000) != 0;
}
# 473 "/usr/include/math.h" 2 3 4
# 534 "/usr/include/math.h" 3 4
}
# 45 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 2 3
# 75 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }



  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  inline double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  inline long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }



  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 555 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 831 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(0, 1, 4,
      3, 2, __type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return sizeof(__type) == sizeof(float)
 ? __builtin_signbitf(__type(__f))
 : sizeof(__type) == sizeof(double)
 ? __builtin_signbit(__type(__f))
 : __builtin_signbitl(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }




}
# 51 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
# 72 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/local/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 62 "/usr/local/lib/clang/7.0.0/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 61 "/usr/include/endian.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 97 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 235 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 236 "/usr/include/stdlib.h" 2 3 4



extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern __inline __attribute__ ((__gnu_inline__)) int
 atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
 atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}




__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
 atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 59 "/usr/include/time.h" 3 4
typedef __clock_t clock_t;
# 75 "/usr/include/time.h" 3 4
typedef __time_t time_t;
# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;






# 1 "/usr/local/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;






# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4








typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));


__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
 gnu_dev_major (unsigned long long int __dev) throw ()
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
 gnu_dev_minor (unsigned long long int __dev) throw ()
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned long long int
 gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw ()
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}

}
# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;






# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));
# 466 "/usr/include/stdlib.h" 3 4
extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;
# 480 "/usr/include/stdlib.h" 3 4
extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();




# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/local/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 535 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 629 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 651 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 673 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 683 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 693 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 705 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 716 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 760 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();
# 887 "/usr/include/stdlib.h" 3 4
extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
 atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 955 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4
}
# 73 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 2 3
# 114 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline long
  abs(long __i) { return __builtin_labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 196 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
}
# 209 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 241 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 52 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 62 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/cuda-8.0/include/cuda.h" 1 3
# 58 "/usr/local/cuda-8.0/include/cuda.h" 3
# 1 "/usr/local/lib/clang/7.0.0/include/stdint.h" 1 3
# 63 "/usr/local/lib/clang/7.0.0/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 48 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 119 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 64 "/usr/local/lib/clang/7.0.0/include/stdint.h" 2 3
# 59 "/usr/local/cuda-8.0/include/cuda.h" 2 3
typedef uint32_t cuuint32_t;
typedef uint64_t cuuint64_t;
# 211 "/usr/local/cuda-8.0/include/cuda.h" 3
extern "C" {
# 221 "/usr/local/cuda-8.0/include/cuda.h" 3
typedef unsigned long long CUdeviceptr;






typedef int CUdevice;
typedef struct CUctx_st *CUcontext;
typedef struct CUmod_st *CUmodule;
typedef struct CUfunc_st *CUfunction;
typedef struct CUarray_st *CUarray;
typedef struct CUmipmappedArray_st *CUmipmappedArray;
typedef struct CUtexref_st *CUtexref;
typedef struct CUsurfref_st *CUsurfref;
typedef struct CUevent_st *CUevent;
typedef struct CUstream_st *CUstream;
typedef struct CUgraphicsResource_st *CUgraphicsResource;
typedef unsigned long long CUtexObject;
typedef unsigned long long CUsurfObject;

typedef struct CUuuid_st {
    char bytes[16];
} CUuuid;
# 257 "/usr/local/cuda-8.0/include/cuda.h" 3
typedef struct CUipcEventHandle_st {
    char reserved[64];
} CUipcEventHandle;




typedef struct CUipcMemHandle_st {
    char reserved[64];
} CUipcMemHandle;




typedef enum CUipcMem_flags_enum {
    CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 0x1
} CUipcMem_flags;






typedef enum CUmemAttach_flags_enum {
    CU_MEM_ATTACH_GLOBAL = 0x1,
    CU_MEM_ATTACH_HOST = 0x2,
    CU_MEM_ATTACH_SINGLE = 0x4
} CUmemAttach_flags;




typedef enum CUctx_flags_enum {
    CU_CTX_SCHED_AUTO = 0x00,
    CU_CTX_SCHED_SPIN = 0x01,
    CU_CTX_SCHED_YIELD = 0x02,
    CU_CTX_SCHED_BLOCKING_SYNC = 0x04,
    CU_CTX_BLOCKING_SYNC = 0x04,


    CU_CTX_SCHED_MASK = 0x07,
    CU_CTX_MAP_HOST = 0x08,
    CU_CTX_LMEM_RESIZE_TO_MAX = 0x10,
    CU_CTX_FLAGS_MASK = 0x1f
} CUctx_flags;




typedef enum CUstream_flags_enum {
    CU_STREAM_DEFAULT = 0x0,
    CU_STREAM_NON_BLOCKING = 0x1
} CUstream_flags;
# 334 "/usr/local/cuda-8.0/include/cuda.h" 3
typedef enum CUevent_flags_enum {
    CU_EVENT_DEFAULT = 0x0,
    CU_EVENT_BLOCKING_SYNC = 0x1,
    CU_EVENT_DISABLE_TIMING = 0x2,
    CU_EVENT_INTERPROCESS = 0x4
} CUevent_flags;





typedef enum CUstreamWaitValue_flags_enum {
    CU_STREAM_WAIT_VALUE_GEQ = 0x0,

    CU_STREAM_WAIT_VALUE_EQ = 0x1,
    CU_STREAM_WAIT_VALUE_AND = 0x2,
    CU_STREAM_WAIT_VALUE_FLUSH = 1<<30






} CUstreamWaitValue_flags;




typedef enum CUstreamWriteValue_flags_enum {
    CU_STREAM_WRITE_VALUE_DEFAULT = 0x0,
    CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER = 0x1





} CUstreamWriteValue_flags;




typedef enum CUstreamBatchMemOpType_enum {
    CU_STREAM_MEM_OP_WAIT_VALUE_32 = 1,
    CU_STREAM_MEM_OP_WRITE_VALUE_32 = 2,
    CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES = 3

} CUstreamBatchMemOpType;




typedef union CUstreamBatchMemOpParams_union {
    CUstreamBatchMemOpType operation;
    struct CUstreamMemOpWaitValueParams_st {
        CUstreamBatchMemOpType operation;
        CUdeviceptr address;
        union {
            cuuint32_t value;
            cuuint64_t pad;
        };
        unsigned int flags;
        CUdeviceptr alias;
    } waitValue;
    struct CUstreamMemOpWriteValueParams_st {
        CUstreamBatchMemOpType operation;
        CUdeviceptr address;
        union {
            cuuint32_t value;
            cuuint64_t pad;
        };
        unsigned int flags;
        CUdeviceptr alias;
    } writeValue;
    struct CUstreamMemOpFlushRemoteWritesParams_st {
        CUstreamBatchMemOpType operation;
        unsigned int flags;
    } flushRemoteWrites;
    cuuint64_t pad[6];
} CUstreamBatchMemOpParams;





typedef enum CUoccupancy_flags_enum {
    CU_OCCUPANCY_DEFAULT = 0x0,
    CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE = 0x1
} CUoccupancy_flags;




typedef enum CUarray_format_enum {
    CU_AD_FORMAT_UNSIGNED_INT8 = 0x01,
    CU_AD_FORMAT_UNSIGNED_INT16 = 0x02,
    CU_AD_FORMAT_UNSIGNED_INT32 = 0x03,
    CU_AD_FORMAT_SIGNED_INT8 = 0x08,
    CU_AD_FORMAT_SIGNED_INT16 = 0x09,
    CU_AD_FORMAT_SIGNED_INT32 = 0x0a,
    CU_AD_FORMAT_HALF = 0x10,
    CU_AD_FORMAT_FLOAT = 0x20
} CUarray_format;




typedef enum CUaddress_mode_enum {
    CU_TR_ADDRESS_MODE_WRAP = 0,
    CU_TR_ADDRESS_MODE_CLAMP = 1,
    CU_TR_ADDRESS_MODE_MIRROR = 2,
    CU_TR_ADDRESS_MODE_BORDER = 3
} CUaddress_mode;




typedef enum CUfilter_mode_enum {
    CU_TR_FILTER_MODE_POINT = 0,
    CU_TR_FILTER_MODE_LINEAR = 1
} CUfilter_mode;




typedef enum CUdevice_attribute_enum {
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8,
    CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,
    CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,
    CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10,
    CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11,
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 12,
    CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,
    CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13,
    CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14,
    CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15,
    CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16,
    CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17,
    CU_DEVICE_ATTRIBUTE_INTEGRATED = 18,
    CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19,
    CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 20,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 21,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 22,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 23,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 24,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 25,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 26,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH = 27,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT = 28,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS = 29,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 28,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 29,
    CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 30,
    CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 31,
    CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 32,
    CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33,
    CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34,
    CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 35,
    CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 36,
    CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 37,
    CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 38,
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 39,
    CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 40,
    CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 41,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 42,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 43,
    CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER = 44,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH = 45,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT = 46,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE = 47,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE = 48,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE = 49,
    CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 50,
    CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT = 51,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH = 52,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH = 53,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS = 54,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH = 55,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH = 56,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT = 57,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH = 58,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT = 59,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH = 60,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH = 61,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS = 62,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH = 63,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT = 64,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS = 65,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH = 66,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH = 67,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS = 68,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH = 69,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH = 70,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT = 71,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH = 72,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH = 73,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT = 74,
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 75,
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 76,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH = 77,
    CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED = 78,
    CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED = 79,
    CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED = 80,
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR = 81,
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR = 82,
    CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY = 83,
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD = 84,
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID = 85,
    CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED = 86,
    CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO = 87,
    CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS = 88,
    CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS = 89,
    CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED = 90,
    CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM = 91,
    CU_DEVICE_ATTRIBUTE_MAX
} CUdevice_attribute;




typedef struct CUdevprop_st {
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int sharedMemPerBlock;
    int totalConstantMemory;
    int SIMDWidth;
    int memPitch;
    int regsPerBlock;
    int clockRate;
    int textureAlign;
} CUdevprop;




typedef enum CUpointer_attribute_enum {
    CU_POINTER_ATTRIBUTE_CONTEXT = 1,
    CU_POINTER_ATTRIBUTE_MEMORY_TYPE = 2,
    CU_POINTER_ATTRIBUTE_DEVICE_POINTER = 3,
    CU_POINTER_ATTRIBUTE_HOST_POINTER = 4,
    CU_POINTER_ATTRIBUTE_P2P_TOKENS = 5,
    CU_POINTER_ATTRIBUTE_SYNC_MEMOPS = 6,
    CU_POINTER_ATTRIBUTE_BUFFER_ID = 7,
    CU_POINTER_ATTRIBUTE_IS_MANAGED = 8
} CUpointer_attribute;




typedef enum CUfunction_attribute_enum {





    CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0,






    CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1,





    CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2,




    CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3,




    CU_FUNC_ATTRIBUTE_NUM_REGS = 4,
# 629 "/usr/local/cuda-8.0/include/cuda.h" 3
    CU_FUNC_ATTRIBUTE_PTX_VERSION = 5,
# 638 "/usr/local/cuda-8.0/include/cuda.h" 3
    CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6,





    CU_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7,

    CU_FUNC_ATTRIBUTE_MAX
} CUfunction_attribute;




typedef enum CUfunc_cache_enum {
    CU_FUNC_CACHE_PREFER_NONE = 0x00,
    CU_FUNC_CACHE_PREFER_SHARED = 0x01,
    CU_FUNC_CACHE_PREFER_L1 = 0x02,
    CU_FUNC_CACHE_PREFER_EQUAL = 0x03
} CUfunc_cache;




typedef enum CUsharedconfig_enum {
    CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE = 0x00,
    CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE = 0x01,
    CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 0x02
} CUsharedconfig;




typedef enum CUmemorytype_enum {
    CU_MEMORYTYPE_HOST = 0x01,
    CU_MEMORYTYPE_DEVICE = 0x02,
    CU_MEMORYTYPE_ARRAY = 0x03,
    CU_MEMORYTYPE_UNIFIED = 0x04
} CUmemorytype;




typedef enum CUcomputemode_enum {
    CU_COMPUTEMODE_DEFAULT = 0,
    CU_COMPUTEMODE_PROHIBITED = 2,
    CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3
} CUcomputemode;




typedef enum CUmem_advise_enum {
    CU_MEM_ADVISE_SET_READ_MOSTLY = 1,
    CU_MEM_ADVISE_UNSET_READ_MOSTLY = 2,
    CU_MEM_ADVISE_SET_PREFERRED_LOCATION = 3,
    CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION = 4,
    CU_MEM_ADVISE_SET_ACCESSED_BY = 5,
    CU_MEM_ADVISE_UNSET_ACCESSED_BY = 6
} CUmem_advise;

typedef enum CUmem_range_attribute_enum {
    CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY = 1,
    CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION = 2,
    CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY = 3,
    CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION = 4
} CUmem_range_attribute;




typedef enum CUjit_option_enum
{





    CU_JIT_MAX_REGISTERS = 0,
# 731 "/usr/local/cuda-8.0/include/cuda.h" 3
    CU_JIT_THREADS_PER_BLOCK,







    CU_JIT_WALL_TIME,
# 748 "/usr/local/cuda-8.0/include/cuda.h" 3
    CU_JIT_INFO_LOG_BUFFER,
# 757 "/usr/local/cuda-8.0/include/cuda.h" 3
    CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
# 766 "/usr/local/cuda-8.0/include/cuda.h" 3
    CU_JIT_ERROR_LOG_BUFFER,
# 775 "/usr/local/cuda-8.0/include/cuda.h" 3
    CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,







    CU_JIT_OPTIMIZATION_LEVEL,







    CU_JIT_TARGET_FROM_CUCONTEXT,







    CU_JIT_TARGET,
# 808 "/usr/local/cuda-8.0/include/cuda.h" 3
    CU_JIT_FALLBACK_STRATEGY,







    CU_JIT_GENERATE_DEBUG_INFO,






    CU_JIT_LOG_VERBOSE,






    CU_JIT_GENERATE_LINE_INFO,







    CU_JIT_CACHE_MODE,




    CU_JIT_NEW_SM3X_OPT,
    CU_JIT_FAST_COMPILE,

    CU_JIT_NUM_OPTIONS

} CUjit_option;




typedef enum CUjit_target_enum
{
    CU_TARGET_COMPUTE_10 = 10,
    CU_TARGET_COMPUTE_11 = 11,
    CU_TARGET_COMPUTE_12 = 12,
    CU_TARGET_COMPUTE_13 = 13,
    CU_TARGET_COMPUTE_20 = 20,
    CU_TARGET_COMPUTE_21 = 21,
    CU_TARGET_COMPUTE_30 = 30,
    CU_TARGET_COMPUTE_32 = 32,
    CU_TARGET_COMPUTE_35 = 35,
    CU_TARGET_COMPUTE_37 = 37,
    CU_TARGET_COMPUTE_50 = 50,
    CU_TARGET_COMPUTE_52 = 52,
    CU_TARGET_COMPUTE_53 = 53,
    CU_TARGET_COMPUTE_60 = 60,
    CU_TARGET_COMPUTE_61 = 61,
    CU_TARGET_COMPUTE_62 = 62
} CUjit_target;




typedef enum CUjit_fallback_enum
{
    CU_PREFER_PTX = 0,

    CU_PREFER_BINARY

} CUjit_fallback;




typedef enum CUjit_cacheMode_enum
{
    CU_JIT_CACHE_OPTION_NONE = 0,
    CU_JIT_CACHE_OPTION_CG,
    CU_JIT_CACHE_OPTION_CA
} CUjit_cacheMode;




typedef enum CUjitInputType_enum
{




    CU_JIT_INPUT_CUBIN = 0,





    CU_JIT_INPUT_PTX,





    CU_JIT_INPUT_FATBINARY,





    CU_JIT_INPUT_OBJECT,





    CU_JIT_INPUT_LIBRARY,

    CU_JIT_NUM_INPUT_TYPES
} CUjitInputType;


typedef struct CUlinkState_st *CUlinkState;





typedef enum CUgraphicsRegisterFlags_enum {
    CU_GRAPHICS_REGISTER_FLAGS_NONE = 0x00,
    CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY = 0x01,
    CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD = 0x02,
    CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 0x04,
    CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 0x08
} CUgraphicsRegisterFlags;




typedef enum CUgraphicsMapResourceFlags_enum {
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE = 0x00,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY = 0x01,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 0x02
} CUgraphicsMapResourceFlags;




typedef enum CUarray_cubemap_face_enum {
    CU_CUBEMAP_FACE_POSITIVE_X = 0x00,
    CU_CUBEMAP_FACE_NEGATIVE_X = 0x01,
    CU_CUBEMAP_FACE_POSITIVE_Y = 0x02,
    CU_CUBEMAP_FACE_NEGATIVE_Y = 0x03,
    CU_CUBEMAP_FACE_POSITIVE_Z = 0x04,
    CU_CUBEMAP_FACE_NEGATIVE_Z = 0x05
} CUarray_cubemap_face;




typedef enum CUlimit_enum {
    CU_LIMIT_STACK_SIZE = 0x00,
    CU_LIMIT_PRINTF_FIFO_SIZE = 0x01,
    CU_LIMIT_MALLOC_HEAP_SIZE = 0x02,
    CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH = 0x03,
    CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT = 0x04,
    CU_LIMIT_MAX
} CUlimit;




typedef enum CUresourcetype_enum {
    CU_RESOURCE_TYPE_ARRAY = 0x00,
    CU_RESOURCE_TYPE_MIPMAPPED_ARRAY = 0x01,
    CU_RESOURCE_TYPE_LINEAR = 0x02,
    CU_RESOURCE_TYPE_PITCH2D = 0x03
} CUresourcetype;




typedef enum cudaError_enum {





    CUDA_SUCCESS = 0,





    CUDA_ERROR_INVALID_VALUE = 1,





    CUDA_ERROR_OUT_OF_MEMORY = 2,





    CUDA_ERROR_NOT_INITIALIZED = 3,




    CUDA_ERROR_DEINITIALIZED = 4,






    CUDA_ERROR_PROFILER_DISABLED = 5,







    CUDA_ERROR_PROFILER_NOT_INITIALIZED = 6,






    CUDA_ERROR_PROFILER_ALREADY_STARTED = 7,






    CUDA_ERROR_PROFILER_ALREADY_STOPPED = 8,





    CUDA_ERROR_NO_DEVICE = 100,





    CUDA_ERROR_INVALID_DEVICE = 101,






    CUDA_ERROR_INVALID_IMAGE = 200,
# 1080 "/usr/local/cuda-8.0/include/cuda.h" 3
    CUDA_ERROR_INVALID_CONTEXT = 201,
# 1089 "/usr/local/cuda-8.0/include/cuda.h" 3
    CUDA_ERROR_CONTEXT_ALREADY_CURRENT = 202,




    CUDA_ERROR_MAP_FAILED = 205,




    CUDA_ERROR_UNMAP_FAILED = 206,





    CUDA_ERROR_ARRAY_IS_MAPPED = 207,




    CUDA_ERROR_ALREADY_MAPPED = 208,







    CUDA_ERROR_NO_BINARY_FOR_GPU = 209,




    CUDA_ERROR_ALREADY_ACQUIRED = 210,




    CUDA_ERROR_NOT_MAPPED = 211,





    CUDA_ERROR_NOT_MAPPED_AS_ARRAY = 212,





    CUDA_ERROR_NOT_MAPPED_AS_POINTER = 213,





    CUDA_ERROR_ECC_UNCORRECTABLE = 214,





    CUDA_ERROR_UNSUPPORTED_LIMIT = 215,






    CUDA_ERROR_CONTEXT_ALREADY_IN_USE = 216,





    CUDA_ERROR_PEER_ACCESS_UNSUPPORTED = 217,




    CUDA_ERROR_INVALID_PTX = 218,




    CUDA_ERROR_INVALID_GRAPHICS_CONTEXT = 219,





    CUDA_ERROR_NVLINK_UNCORRECTABLE = 220,




    CUDA_ERROR_INVALID_SOURCE = 300,




    CUDA_ERROR_FILE_NOT_FOUND = 301,




    CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 302,




    CUDA_ERROR_SHARED_OBJECT_INIT_FAILED = 303,




    CUDA_ERROR_OPERATING_SYSTEM = 304,





    CUDA_ERROR_INVALID_HANDLE = 400,





    CUDA_ERROR_NOT_FOUND = 500,







    CUDA_ERROR_NOT_READY = 600,
# 1235 "/usr/local/cuda-8.0/include/cuda.h" 3
    CUDA_ERROR_ILLEGAL_ADDRESS = 700,
# 1246 "/usr/local/cuda-8.0/include/cuda.h" 3
    CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES = 701,
# 1256 "/usr/local/cuda-8.0/include/cuda.h" 3
    CUDA_ERROR_LAUNCH_TIMEOUT = 702,





    CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING = 703,






    CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED = 704,






    CUDA_ERROR_PEER_ACCESS_NOT_ENABLED = 705,





    CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 708,






    CUDA_ERROR_CONTEXT_IS_DESTROYED = 709,







    CUDA_ERROR_ASSERT = 710,






    CUDA_ERROR_TOO_MANY_PEERS = 711,





    CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = 712,





    CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED = 713,
# 1325 "/usr/local/cuda-8.0/include/cuda.h" 3
    CUDA_ERROR_HARDWARE_STACK_ERROR = 714,







    CUDA_ERROR_ILLEGAL_INSTRUCTION = 715,
# 1342 "/usr/local/cuda-8.0/include/cuda.h" 3
    CUDA_ERROR_MISALIGNED_ADDRESS = 716,
# 1353 "/usr/local/cuda-8.0/include/cuda.h" 3
    CUDA_ERROR_INVALID_ADDRESS_SPACE = 717,







    CUDA_ERROR_INVALID_PC = 718,
# 1371 "/usr/local/cuda-8.0/include/cuda.h" 3
    CUDA_ERROR_LAUNCH_FAILED = 719,





    CUDA_ERROR_NOT_PERMITTED = 800,





    CUDA_ERROR_NOT_SUPPORTED = 801,




    CUDA_ERROR_UNKNOWN = 999
} CUresult;




typedef enum CUdevice_P2PAttribute_enum {
    CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK = 0x01,
    CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED = 0x02,
    CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED = 0x03
} CUdevice_P2PAttribute;
# 1412 "/usr/local/cuda-8.0/include/cuda.h" 3
typedef void ( *CUstreamCallback)(CUstream hStream, CUresult status, void *userData);







typedef size_t ( *CUoccupancyB2DSize)(int blockSize);
# 1475 "/usr/local/cuda-8.0/include/cuda.h" 3
typedef struct CUDA_MEMCPY2D_st {
    size_t srcXInBytes;
    size_t srcY;

    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    size_t srcPitch;

    size_t dstXInBytes;
    size_t dstY;

    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    size_t dstPitch;

    size_t WidthInBytes;
    size_t Height;
} CUDA_MEMCPY2D;




typedef struct CUDA_MEMCPY3D_st {
    size_t srcXInBytes;
    size_t srcY;
    size_t srcZ;
    size_t srcLOD;
    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    void *reserved0;
    size_t srcPitch;
    size_t srcHeight;

    size_t dstXInBytes;
    size_t dstY;
    size_t dstZ;
    size_t dstLOD;
    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    void *reserved1;
    size_t dstPitch;
    size_t dstHeight;

    size_t WidthInBytes;
    size_t Height;
    size_t Depth;
} CUDA_MEMCPY3D;




typedef struct CUDA_MEMCPY3D_PEER_st {
    size_t srcXInBytes;
    size_t srcY;
    size_t srcZ;
    size_t srcLOD;
    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    CUcontext srcContext;
    size_t srcPitch;
    size_t srcHeight;

    size_t dstXInBytes;
    size_t dstY;
    size_t dstZ;
    size_t dstLOD;
    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    CUcontext dstContext;
    size_t dstPitch;
    size_t dstHeight;

    size_t WidthInBytes;
    size_t Height;
    size_t Depth;
} CUDA_MEMCPY3D_PEER;




typedef struct CUDA_ARRAY_DESCRIPTOR_st
{
    size_t Width;
    size_t Height;

    CUarray_format Format;
    unsigned int NumChannels;
} CUDA_ARRAY_DESCRIPTOR;




typedef struct CUDA_ARRAY3D_DESCRIPTOR_st
{
    size_t Width;
    size_t Height;
    size_t Depth;

    CUarray_format Format;
    unsigned int NumChannels;
    unsigned int Flags;
} CUDA_ARRAY3D_DESCRIPTOR;
# 1597 "/usr/local/cuda-8.0/include/cuda.h" 3
typedef struct CUDA_RESOURCE_DESC_st
{
    CUresourcetype resType;

    union {
        struct {
            CUarray hArray;
        } array;
        struct {
            CUmipmappedArray hMipmappedArray;
        } mipmap;
        struct {
            CUdeviceptr devPtr;
            CUarray_format format;
            unsigned int numChannels;
            size_t sizeInBytes;
        } linear;
        struct {
            CUdeviceptr devPtr;
            CUarray_format format;
            unsigned int numChannels;
            size_t width;
            size_t height;
            size_t pitchInBytes;
        } pitch2D;
        struct {
            int reserved[32];
        } reserved;
    } res;

    unsigned int flags;
} CUDA_RESOURCE_DESC;




typedef struct CUDA_TEXTURE_DESC_st {
    CUaddress_mode addressMode[3];
    CUfilter_mode filterMode;
    unsigned int flags;
    unsigned int maxAnisotropy;
    CUfilter_mode mipmapFilterMode;
    float mipmapLevelBias;
    float minMipmapLevelClamp;
    float maxMipmapLevelClamp;
    float borderColor[4];
    int reserved[12];
} CUDA_TEXTURE_DESC;




typedef enum CUresourceViewFormat_enum
{
    CU_RES_VIEW_FORMAT_NONE = 0x00,
    CU_RES_VIEW_FORMAT_UINT_1X8 = 0x01,
    CU_RES_VIEW_FORMAT_UINT_2X8 = 0x02,
    CU_RES_VIEW_FORMAT_UINT_4X8 = 0x03,
    CU_RES_VIEW_FORMAT_SINT_1X8 = 0x04,
    CU_RES_VIEW_FORMAT_SINT_2X8 = 0x05,
    CU_RES_VIEW_FORMAT_SINT_4X8 = 0x06,
    CU_RES_VIEW_FORMAT_UINT_1X16 = 0x07,
    CU_RES_VIEW_FORMAT_UINT_2X16 = 0x08,
    CU_RES_VIEW_FORMAT_UINT_4X16 = 0x09,
    CU_RES_VIEW_FORMAT_SINT_1X16 = 0x0a,
    CU_RES_VIEW_FORMAT_SINT_2X16 = 0x0b,
    CU_RES_VIEW_FORMAT_SINT_4X16 = 0x0c,
    CU_RES_VIEW_FORMAT_UINT_1X32 = 0x0d,
    CU_RES_VIEW_FORMAT_UINT_2X32 = 0x0e,
    CU_RES_VIEW_FORMAT_UINT_4X32 = 0x0f,
    CU_RES_VIEW_FORMAT_SINT_1X32 = 0x10,
    CU_RES_VIEW_FORMAT_SINT_2X32 = 0x11,
    CU_RES_VIEW_FORMAT_SINT_4X32 = 0x12,
    CU_RES_VIEW_FORMAT_FLOAT_1X16 = 0x13,
    CU_RES_VIEW_FORMAT_FLOAT_2X16 = 0x14,
    CU_RES_VIEW_FORMAT_FLOAT_4X16 = 0x15,
    CU_RES_VIEW_FORMAT_FLOAT_1X32 = 0x16,
    CU_RES_VIEW_FORMAT_FLOAT_2X32 = 0x17,
    CU_RES_VIEW_FORMAT_FLOAT_4X32 = 0x18,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC1 = 0x19,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC2 = 0x1a,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC3 = 0x1b,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC4 = 0x1c,
    CU_RES_VIEW_FORMAT_SIGNED_BC4 = 0x1d,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC5 = 0x1e,
    CU_RES_VIEW_FORMAT_SIGNED_BC5 = 0x1f,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC6H = 0x20,
    CU_RES_VIEW_FORMAT_SIGNED_BC6H = 0x21,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC7 = 0x22
} CUresourceViewFormat;




typedef struct CUDA_RESOURCE_VIEW_DESC_st
{
    CUresourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    unsigned int firstMipmapLevel;
    unsigned int lastMipmapLevel;
    unsigned int firstLayer;
    unsigned int lastLayer;
    unsigned int reserved[16];
} CUDA_RESOURCE_VIEW_DESC;




typedef struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st {
    unsigned long long p2pToken;
    unsigned int vaSpaceToken;
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS;
# 1857 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuGetErrorString(CUresult error, const char **pStr);
# 1876 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuGetErrorName(CUresult error, const char **pStr);
# 1908 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuInit(unsigned int Flags);
# 1938 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDriverGetVersion(int *driverVersion);
# 1978 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDeviceGet(CUdevice *device, int ordinal);
# 2003 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDeviceGetCount(int *count);
# 2031 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDeviceGetName(char *name, int len, CUdevice dev);
# 2058 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDeviceTotalMem_v2(size_t *bytes, CUdevice dev);
# 2253 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDeviceGetAttribute(int *pi, CUdevice_attribute attrib, CUdevice dev);
# 2330 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDeviceGetProperties(CUdevprop *prop, CUdevice dev);
# 2363 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDeviceComputeCapability(int *major, int *minor, CUdevice dev);
# 2431 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDevicePrimaryCtxRetain(CUcontext *pctx, CUdevice dev);
# 2465 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDevicePrimaryCtxRelease(CUdevice dev);
# 2528 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDevicePrimaryCtxSetFlags(CUdevice dev, unsigned int flags);
# 2552 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDevicePrimaryCtxGetState(CUdevice dev, unsigned int *flags, int *active);
# 2590 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDevicePrimaryCtxReset(CUdevice dev);
# 2696 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxCreate_v2(CUcontext *pctx, unsigned int flags, CUdevice dev);
# 2736 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxDestroy_v2(CUcontext ctx);
# 2772 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxPushCurrent_v2(CUcontext ctx);
# 2806 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxPopCurrent_v2(CUcontext *pctx);
# 2832 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxSetCurrent(CUcontext ctx);
# 2851 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxGetCurrent(CUcontext *pctx);
# 2881 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxGetDevice(CUdevice *device);
# 2909 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxGetFlags(unsigned int *flags);
# 2939 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxSynchronize(void);
# 3034 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxSetLimit(CUlimit limit, size_t value);
# 3073 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxGetLimit(size_t *pvalue, CUlimit limit);
# 3116 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxGetCacheConfig(CUfunc_cache *pconfig);
# 3166 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxSetCacheConfig(CUfunc_cache config);
# 3208 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxGetSharedMemConfig(CUsharedconfig *pConfig);
# 3260 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxSetSharedMemConfig(CUsharedconfig config);
# 3298 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxGetApiVersion(CUcontext ctx, unsigned int *version);
# 3337 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxGetStreamPriorityRange(int *leastPriority, int *greatestPriority);
# 3392 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxAttach(CUcontext *pctx, unsigned int flags);
# 3428 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxDetach(CUcontext ctx);
# 3482 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuModuleLoad(CUmodule *module, const char *fname);
# 3518 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuModuleLoadData(CUmodule *module, const void *image);
# 3560 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuModuleLoadDataEx(CUmodule *module, const void *image, unsigned int numOptions, CUjit_option *options, void **optionValues);
# 3601 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuModuleLoadFatBinary(CUmodule *module, const void *fatCubin);
# 3626 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuModuleUnload(CUmodule hmod);
# 3656 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuModuleGetFunction(CUfunction *hfunc, CUmodule hmod, const char *name);
# 3690 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuModuleGetGlobal_v2(CUdeviceptr *dptr, size_t *bytes, CUmodule hmod, const char *name);
# 3724 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuModuleGetTexRef(CUtexref *pTexRef, CUmodule hmod, const char *name);
# 3755 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuModuleGetSurfRef(CUsurfref *pSurfRef, CUmodule hmod, const char *name);
# 3796 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult
cuLinkCreate_v2(unsigned int numOptions, CUjit_option *options, void **optionValues, CUlinkState *stateOut);
# 3833 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult
cuLinkAddData_v2(CUlinkState state, CUjitInputType type, void *data, size_t size, const char *name,
    unsigned int numOptions, CUjit_option *options, void **optionValues);
# 3872 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult
cuLinkAddFile_v2(CUlinkState state, CUjitInputType type, const char *path,
    unsigned int numOptions, CUjit_option *options, void **optionValues);
# 3899 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult
cuLinkComplete(CUlinkState state, void **cubinOut, size_t *sizeOut);
# 3913 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult
cuLinkDestroy(CUlinkState state);
# 3962 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemGetInfo_v2(size_t *free, size_t *total);
# 3995 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemAlloc_v2(CUdeviceptr *dptr, size_t bytesize);
# 4056 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemAllocPitch_v2(CUdeviceptr *dptr, size_t *pPitch, size_t WidthInBytes, size_t Height, unsigned int ElementSizeBytes);
# 4085 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemFree_v2(CUdeviceptr dptr);
# 4118 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemGetAddressRange_v2(CUdeviceptr *pbase, size_t *psize, CUdeviceptr dptr);
# 4164 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemAllocHost_v2(void **pp, size_t bytesize);
# 4194 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemFreeHost(void *p);
# 4276 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemHostAlloc(void **pp, size_t bytesize, unsigned int Flags);
# 4329 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr *pdptr, void *p, unsigned int Flags);
# 4354 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemHostGetFlags(unsigned int *pFlags, void *p);
# 4464 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemAllocManaged(CUdeviceptr *dptr, size_t bytesize, unsigned int flags);
# 4493 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDeviceGetByPCIBusId(CUdevice *dev, const char *pciBusId);
# 4521 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDeviceGetPCIBusId(char *pciBusId, int len, CUdevice dev);
# 4563 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuIpcGetEventHandle(CUipcEventHandle *pHandle, CUevent event);
# 4600 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuIpcOpenEventHandle(CUevent *phEvent, CUipcEventHandle handle);
# 4637 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuIpcGetMemHandle(CUipcMemHandle *pHandle, CUdeviceptr dptr);
# 4688 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuIpcOpenMemHandle(CUdeviceptr *pdptr, CUipcMemHandle handle, unsigned int Flags);
# 4719 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuIpcCloseMemHandle(CUdeviceptr dptr);
# 4802 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemHostRegister_v2(void *p, size_t bytesize, unsigned int Flags);
# 4826 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemHostUnregister(void *p);
# 4862 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount);
# 4891 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount);
# 4927 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount);
# 4960 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyDtoH_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount);
# 4993 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyDtoD_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount);
# 5028 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyDtoA_v2(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount);
# 5065 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyAtoD_v2(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5100 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyHtoA_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount);
# 5135 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyAtoH_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5174 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyAtoA_v2(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5335 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D *pCopy);
# 5494 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D *pCopy);
# 5662 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D *pCopy);
# 5687 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER *pCopy);
# 5727 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream);
# 5758 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream);
# 5797 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount, CUstream hStream);
# 5834 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyDtoHAsync_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
# 5871 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyDtoDAsync_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
# 5910 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyHtoAAsync_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount, CUstream hStream);
# 5949 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpyAtoHAsync_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream);
# 6114 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D *pCopy, CUstream hStream);
# 6286 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D *pCopy, CUstream hStream);
# 6313 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER *pCopy, CUstream hStream);
# 6349 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD8_v2(CUdeviceptr dstDevice, unsigned char uc, size_t N);
# 6383 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD16_v2(CUdeviceptr dstDevice, unsigned short us, size_t N);
# 6417 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD32_v2(CUdeviceptr dstDevice, unsigned int ui, size_t N);
# 6456 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD2D8_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height);
# 6496 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD2D16_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height);
# 6536 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD2D32_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height);
# 6572 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream);
# 6608 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream);
# 6643 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD32Async(CUdeviceptr dstDevice, unsigned int ui, size_t N, CUstream hStream);
# 6684 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD2D8Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream);
# 6726 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD2D16Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream);
# 6768 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemsetD2D32Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height, CUstream hStream);
# 6871 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuArrayCreate_v2(CUarray *pHandle, const CUDA_ARRAY_DESCRIPTOR *pAllocateArray);
# 6904 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
# 6935 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuArrayDestroy(CUarray hArray);
# 7115 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuArray3DCreate_v2(CUarray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pAllocateArray);
# 7151 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
# 7278 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMipmappedArrayCreate(CUmipmappedArray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pMipmappedArrayDesc, unsigned int numMipmapLevels);
# 7304 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMipmappedArrayGetLevel(CUarray *pLevelArray, CUmipmappedArray hMipmappedArray, unsigned int level);
# 7324 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray);
# 7570 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuPointerGetAttribute(void *data, CUpointer_attribute attribute, CUdeviceptr ptr);
# 7639 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemPrefetchAsync(CUdeviceptr devPtr, size_t count, CUdevice dstDevice, CUstream hStream);
# 7725 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemAdvise(CUdeviceptr devPtr, size_t count, CUmem_advise advice, CUdevice device);
# 7782 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemRangeGetAttribute(void *data, size_t dataSize, CUmem_range_attribute attribute, CUdeviceptr devPtr, size_t count);
# 7821 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuMemRangeGetAttributes(void **data, size_t *dataSizes, CUmem_range_attribute *attributes, size_t numAttributes, CUdeviceptr devPtr, size_t count);
# 7865 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuPointerSetAttribute(const void *value, CUpointer_attribute attribute, CUdeviceptr ptr);
# 7907 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuPointerGetAttributes(unsigned int numAttributes, CUpointer_attribute *attributes, void **data, CUdeviceptr ptr);
# 7955 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamCreate(CUstream *phStream, unsigned int Flags);
# 8003 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamCreateWithPriority(CUstream *phStream, unsigned int flags, int priority);
# 8033 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamGetPriority(CUstream hStream, int *priority);
# 8060 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamGetFlags(CUstream hStream, unsigned int *flags);
# 8101 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamWaitEvent(CUstream hStream, CUevent hEvent, unsigned int Flags);
# 8172 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamAddCallback(CUstream hStream, CUstreamCallback callback, void *userData, unsigned int flags);
# 8251 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamAttachMemAsync(CUstream hStream, CUdeviceptr dptr, size_t length, unsigned int flags);
# 8282 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamQuery(CUstream hStream);
# 8309 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamSynchronize(CUstream hStream);
# 8338 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamDestroy_v2(CUstream hStream);
# 8393 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuEventCreate(CUevent *phEvent, unsigned int Flags);
# 8429 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuEventRecord(CUevent hEvent, CUstream hStream);
# 8463 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuEventQuery(CUevent hEvent);
# 8497 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuEventSynchronize(CUevent hEvent);
# 8526 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuEventDestroy_v2(CUevent hEvent);
# 8570 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuEventElapsedTime(float *pMilliseconds, CUevent hStart, CUevent hEnd);
# 8605 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamWaitValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags);
# 8638 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamWriteValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags);
# 8670 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuStreamBatchMemOp(CUstream stream, unsigned int count, CUstreamBatchMemOpParams *paramArray, unsigned int flags);
# 8738 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuFuncGetAttribute(int *pi, CUfunction_attribute attrib, CUfunction hfunc);
# 8781 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config);
# 8833 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config);
# 8947 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuLaunchKernel(CUfunction f,
                                unsigned int gridDimX,
                                unsigned int gridDimY,
                                unsigned int gridDimZ,
                                unsigned int blockDimX,
                                unsigned int blockDimY,
                                unsigned int blockDimZ,
                                unsigned int sharedMemBytes,
                                CUstream hStream,
                                void **kernelParams,
                                void **extra);
# 9008 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z);
# 9042 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuFuncSetSharedSize(CUfunction hfunc, unsigned int bytes);
# 9074 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuParamSetSize(CUfunction hfunc, unsigned int numbytes);
# 9107 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuParamSeti(CUfunction hfunc, int offset, unsigned int value);
# 9140 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuParamSetf(CUfunction hfunc, int offset, float value);
# 9175 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuParamSetv(CUfunction hfunc, int offset, void *ptr, unsigned int numbytes);
# 9212 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuLaunch(CUfunction f);
# 9251 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuLaunchGrid(CUfunction f, int grid_width, int grid_height);
# 9298 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream);
# 9323 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef);
# 9361 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize);
# 9401 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize, unsigned int flags);
# 9451 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuOccupancyMaxPotentialBlockSize(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit);
# 9495 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuOccupancyMaxPotentialBlockSizeWithFlags(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit, unsigned int flags);
# 9538 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned int Flags);
# 9565 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned int Flags);
# 9609 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetAddress_v2(size_t *ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes);
# 9661 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetAddress2D_v3(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR *desc, CUdeviceptr dptr, size_t Pitch);
# 9690 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents);
# 9730 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am);
# 9763 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm);
# 9796 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm);
# 9822 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias);
# 9850 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp);
# 9876 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned int maxAniso);
# 9906 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetBorderColor(CUtexref hTexRef, float *pBorderColor);
# 9941 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefSetFlags(CUtexref hTexRef, unsigned int Flags);
# 9967 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetAddress_v2(CUdeviceptr *pdptr, CUtexref hTexRef);
# 9993 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetArray(CUarray *phArray, CUtexref hTexRef);
# 10018 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetMipmappedArray(CUmipmappedArray *phMipmappedArray, CUtexref hTexRef);
# 10044 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetAddressMode(CUaddress_mode *pam, CUtexref hTexRef, int dim);
# 10068 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);
# 10094 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetFormat(CUarray_format *pFormat, int *pNumChannels, CUtexref hTexRef);
# 10118 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetMipmapFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);
# 10142 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetMipmapLevelBias(float *pbias, CUtexref hTexRef);
# 10167 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetMipmapLevelClamp(float *pminMipmapLevelClamp, float *pmaxMipmapLevelClamp, CUtexref hTexRef);
# 10191 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetMaxAnisotropy(int *pmaxAniso, CUtexref hTexRef);
# 10218 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetBorderColor(float *pBorderColor, CUtexref hTexRef);
# 10241 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefGetFlags(unsigned int *pFlags, CUtexref hTexRef);
# 10280 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefCreate(CUtexref *pTexRef);
# 10300 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexRefDestroy(CUtexref hTexRef);
# 10339 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned int Flags);
# 10360 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuSurfRefGetArray(CUarray *phArray, CUsurfref hSurfRef);
# 10582 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexObjectCreate(CUtexObject *pTexObject, const CUDA_RESOURCE_DESC *pResDesc, const CUDA_TEXTURE_DESC *pTexDesc, const CUDA_RESOURCE_VIEW_DESC *pResViewDesc);
# 10600 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexObjectDestroy(CUtexObject texObject);
# 10619 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUtexObject texObject);
# 10638 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC *pTexDesc, CUtexObject texObject);
# 10658 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC *pResViewDesc, CUtexObject texObject);
# 10699 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuSurfObjectCreate(CUsurfObject *pSurfObject, const CUDA_RESOURCE_DESC *pResDesc);
# 10717 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuSurfObjectDestroy(CUsurfObject surfObject);
# 10736 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUsurfObject surfObject);
# 10778 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDeviceCanAccessPeer(int *canAccessPeer, CUdevice dev, CUdevice peerDev);
# 10815 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuDeviceGetP2PAttribute(int* value, CUdevice_P2PAttribute attrib, CUdevice srcDevice, CUdevice dstDevice);
# 10864 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxEnablePeerAccess(CUcontext peerContext, unsigned int Flags);
# 10889 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuCtxDisablePeerAccess(CUcontext peerContext);
# 10933 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuGraphicsUnregisterResource(CUgraphicsResource resource);
# 10971 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuGraphicsSubResourceGetMappedArray(CUarray *pArray, CUgraphicsResource resource, unsigned int arrayIndex, unsigned int mipLevel);
# 11002 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray *pMipmappedArray, CUgraphicsResource resource);
# 11038 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr *pDevPtr, size_t *pSize, CUgraphicsResource resource);
# 11079 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuGraphicsResourceSetMapFlags_v2(CUgraphicsResource resource, unsigned int flags);
# 11118 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuGraphicsMapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);
# 11154 "/usr/local/cuda-8.0/include/cuda.h" 3
CUresult cuGraphicsUnmapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);



CUresult cuGetExportTable(const void **ppExportTable, const CUuuid *pExportTableId);
# 11477 "/usr/local/cuda-8.0/include/cuda.h" 3
}
# 63 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 75 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_builtin_vars.h" 1 3
# 28 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_builtin_vars.h" 3
struct uint3;
struct dim3;
# 66 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_builtin_vars.h" 3
struct __cuda_builtin_threadIdx_t {
  __declspec(property(get = __fetch_builtin_x)) unsigned int x; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_x(void) { return __nvvm_read_ptx_sreg_tid_x(); };
  __declspec(property(get = __fetch_builtin_y)) unsigned int y; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_y(void) { return __nvvm_read_ptx_sreg_tid_y(); };
  __declspec(property(get = __fetch_builtin_z)) unsigned int z; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_z(void) { return __nvvm_read_ptx_sreg_tid_z(); };


  __attribute__((device)) operator uint3() const;
private:
  __attribute__((device)) __cuda_builtin_threadIdx_t() ; __attribute__((device)) __cuda_builtin_threadIdx_t(const __cuda_builtin_threadIdx_t &) ; __attribute__((device)) void operator=(const __cuda_builtin_threadIdx_t &) const ; __attribute__((device)) __cuda_builtin_threadIdx_t *operator&() const ;
};

struct __cuda_builtin_blockIdx_t {
  __declspec(property(get = __fetch_builtin_x)) unsigned int x; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_x(void) { return __nvvm_read_ptx_sreg_ctaid_x(); };
  __declspec(property(get = __fetch_builtin_y)) unsigned int y; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_y(void) { return __nvvm_read_ptx_sreg_ctaid_y(); };
  __declspec(property(get = __fetch_builtin_z)) unsigned int z; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_z(void) { return __nvvm_read_ptx_sreg_ctaid_z(); };


  __attribute__((device)) operator uint3() const;
private:
  __attribute__((device)) __cuda_builtin_blockIdx_t() ; __attribute__((device)) __cuda_builtin_blockIdx_t(const __cuda_builtin_blockIdx_t &) ; __attribute__((device)) void operator=(const __cuda_builtin_blockIdx_t &) const ; __attribute__((device)) __cuda_builtin_blockIdx_t *operator&() const ;
};

struct __cuda_builtin_blockDim_t {
  __declspec(property(get = __fetch_builtin_x)) unsigned int x; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_x(void) { return __nvvm_read_ptx_sreg_ntid_x(); };
  __declspec(property(get = __fetch_builtin_y)) unsigned int y; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_y(void) { return __nvvm_read_ptx_sreg_ntid_y(); };
  __declspec(property(get = __fetch_builtin_z)) unsigned int z; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_z(void) { return __nvvm_read_ptx_sreg_ntid_z(); };


  __attribute__((device)) operator dim3() const;
private:
  __attribute__((device)) __cuda_builtin_blockDim_t() ; __attribute__((device)) __cuda_builtin_blockDim_t(const __cuda_builtin_blockDim_t &) ; __attribute__((device)) void operator=(const __cuda_builtin_blockDim_t &) const ; __attribute__((device)) __cuda_builtin_blockDim_t *operator&() const ;
};

struct __cuda_builtin_gridDim_t {
  __declspec(property(get = __fetch_builtin_x)) unsigned int x; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_x(void) { return __nvvm_read_ptx_sreg_nctaid_x(); };
  __declspec(property(get = __fetch_builtin_y)) unsigned int y; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_y(void) { return __nvvm_read_ptx_sreg_nctaid_y(); };
  __declspec(property(get = __fetch_builtin_z)) unsigned int z; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_z(void) { return __nvvm_read_ptx_sreg_nctaid_z(); };


  __attribute__((device)) operator dim3() const;
private:
  __attribute__((device)) __cuda_builtin_gridDim_t() ; __attribute__((device)) __cuda_builtin_gridDim_t(const __cuda_builtin_gridDim_t &) ; __attribute__((device)) void operator=(const __cuda_builtin_gridDim_t &) const ; __attribute__((device)) __cuda_builtin_gridDim_t *operator&() const ;
};



extern const __attribute__((device)) __attribute__((weak)) __cuda_builtin_threadIdx_t threadIdx;
extern const __attribute__((device)) __attribute__((weak)) __cuda_builtin_blockIdx_t blockIdx;
extern const __attribute__((device)) __attribute__((weak)) __cuda_builtin_blockDim_t blockDim;
extern const __attribute__((device)) __attribute__((weak)) __cuda_builtin_gridDim_t gridDim;




__attribute__((device)) const int warpSize = 32;
# 76 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 99 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/cuda-8.0/include/driver_types.h" 1 3
# 53 "/usr/local/cuda-8.0/include/driver_types.h" 3
# 1 "/usr/local/cuda-8.0/include/host_defines.h" 1 3
# 54 "/usr/local/cuda-8.0/include/driver_types.h" 2 3
# 71 "/usr/local/cuda-8.0/include/driver_types.h" 3
# 1 "/usr/local/lib/clang/7.0.0/include/limits.h" 1 3
# 37 "/usr/local/lib/clang/7.0.0/include/limits.h" 3
# 1 "/usr/include/limits.h" 1 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 152 "/usr/include/limits.h" 2 3 4
# 38 "/usr/local/lib/clang/7.0.0/include/limits.h" 2 3
# 72 "/usr/local/cuda-8.0/include/driver_types.h" 2 3
# 1 "/usr/local/lib/clang/7.0.0/include/stddef.h" 1 3
# 51 "/usr/local/lib/clang/7.0.0/include/stddef.h" 3
typedef long int ptrdiff_t;
# 73 "/usr/local/cuda-8.0/include/driver_types.h" 2 3
# 156 "/usr/local/cuda-8.0/include/driver_types.h" 3
enum cudaError
{





    cudaSuccess = 0,





    cudaErrorMissingConfiguration = 1,





    cudaErrorMemoryAllocation = 2,





    cudaErrorInitializationError = 3,
# 191 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorLaunchFailure = 4,
# 200 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorPriorLaunchFailure = 5,
# 211 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorLaunchTimeout = 6,
# 220 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorLaunchOutOfResources = 7,





    cudaErrorInvalidDeviceFunction = 8,
# 235 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorInvalidConfiguration = 9,





    cudaErrorInvalidDevice = 10,





    cudaErrorInvalidValue = 11,





    cudaErrorInvalidPitchValue = 12,





    cudaErrorInvalidSymbol = 13,




    cudaErrorMapBufferObjectFailed = 14,




    cudaErrorUnmapBufferObjectFailed = 15,





    cudaErrorInvalidHostPointer = 16,





    cudaErrorInvalidDevicePointer = 17,





    cudaErrorInvalidTexture = 18,





    cudaErrorInvalidTextureBinding = 19,






    cudaErrorInvalidChannelDescriptor = 20,





    cudaErrorInvalidMemcpyDirection = 21,
# 316 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorAddressOfConstant = 22,
# 325 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorTextureFetchFailed = 23,
# 334 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorTextureNotBound = 24,
# 343 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorSynchronizationError = 25,





    cudaErrorInvalidFilterSetting = 26,





    cudaErrorInvalidNormSetting = 27,







    cudaErrorMixedDeviceExecution = 28,






    cudaErrorCudartUnloading = 29,




    cudaErrorUnknown = 30,







    cudaErrorNotYetImplemented = 31,
# 392 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorMemoryValueTooLarge = 32,






    cudaErrorInvalidResourceHandle = 33,







    cudaErrorNotReady = 34,






    cudaErrorInsufficientDriver = 35,
# 427 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorSetOnActiveProcess = 36,





    cudaErrorInvalidSurface = 37,





    cudaErrorNoDevice = 38,





    cudaErrorECCUncorrectable = 39,




    cudaErrorSharedObjectSymbolNotFound = 40,




    cudaErrorSharedObjectInitFailed = 41,





    cudaErrorUnsupportedLimit = 42,





    cudaErrorDuplicateVariableName = 43,





    cudaErrorDuplicateTextureName = 44,





    cudaErrorDuplicateSurfaceName = 45,
# 489 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorDevicesUnavailable = 46,




    cudaErrorInvalidKernelImage = 47,







    cudaErrorNoKernelImageForDevice = 48,
# 515 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorIncompatibleDriverContext = 49,






    cudaErrorPeerAccessAlreadyEnabled = 50,






    cudaErrorPeerAccessNotEnabled = 51,





    cudaErrorDeviceAlreadyInUse = 54,






    cudaErrorProfilerDisabled = 55,







    cudaErrorProfilerNotInitialized = 56,






    cudaErrorProfilerAlreadyStarted = 57,






     cudaErrorProfilerAlreadyStopped = 58,







    cudaErrorAssert = 59,






    cudaErrorTooManyPeers = 60,





    cudaErrorHostMemoryAlreadyRegistered = 61,





    cudaErrorHostMemoryNotRegistered = 62,




    cudaErrorOperatingSystem = 63,





    cudaErrorPeerAccessUnsupported = 64,






    cudaErrorLaunchMaxDepthExceeded = 65,







    cudaErrorLaunchFileScopedTex = 66,







    cudaErrorLaunchFileScopedSurf = 67,
# 640 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorSyncDepthExceeded = 68,
# 652 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorLaunchPendingCountExceeded = 69,




    cudaErrorNotPermitted = 70,





    cudaErrorNotSupported = 71,
# 672 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorHardwareStackError = 72,







    cudaErrorIllegalInstruction = 73,
# 689 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorMisalignedAddress = 74,
# 700 "/usr/local/cuda-8.0/include/driver_types.h" 3
    cudaErrorInvalidAddressSpace = 75,







    cudaErrorInvalidPc = 76,







    cudaErrorIllegalAddress = 77,





    cudaErrorInvalidPtx = 78,




    cudaErrorInvalidGraphicsContext = 79,





    cudaErrorNvlinkUncorrectable = 80,




    cudaErrorStartupFailure = 0x7f,







    cudaErrorApiFailureBase = 10000
};




enum cudaChannelFormatKind
{
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3
};




struct cudaChannelFormatDesc
{
    int x;
    int y;
    int z;
    int w;
    enum cudaChannelFormatKind f;
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum cudaMemoryType
{
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2
};




enum cudaMemcpyKind
{
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4
};






struct cudaPitchedPtr
{
    void *ptr;
    size_t pitch;
    size_t xsize;
    size_t ysize;
};






struct cudaExtent
{
    size_t width;
    size_t height;
    size_t depth;
};






struct cudaPos
{
    size_t x;
    size_t y;
    size_t z;
};




struct cudaMemcpy3DParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;

    struct cudaExtent extent;
    enum cudaMemcpyKind kind;
};




struct cudaMemcpy3DPeerParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;
    int srcDevice;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;
    int dstDevice;

    struct cudaExtent extent;
};




struct cudaGraphicsResource;




enum cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8
};




enum cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2
};




enum cudaGraphicsCubeFace
{
    cudaGraphicsCubeFacePositiveX = 0x00,
    cudaGraphicsCubeFaceNegativeX = 0x01,
    cudaGraphicsCubeFacePositiveY = 0x02,
    cudaGraphicsCubeFaceNegativeY = 0x03,
    cudaGraphicsCubeFacePositiveZ = 0x04,
    cudaGraphicsCubeFaceNegativeZ = 0x05
};




enum cudaResourceType
{
    cudaResourceTypeArray = 0x00,
    cudaResourceTypeMipmappedArray = 0x01,
    cudaResourceTypeLinear = 0x02,
    cudaResourceTypePitch2D = 0x03
};




enum cudaResourceViewFormat
{
    cudaResViewFormatNone = 0x00,
    cudaResViewFormatUnsignedChar1 = 0x01,
    cudaResViewFormatUnsignedChar2 = 0x02,
    cudaResViewFormatUnsignedChar4 = 0x03,
    cudaResViewFormatSignedChar1 = 0x04,
    cudaResViewFormatSignedChar2 = 0x05,
    cudaResViewFormatSignedChar4 = 0x06,
    cudaResViewFormatUnsignedShort1 = 0x07,
    cudaResViewFormatUnsignedShort2 = 0x08,
    cudaResViewFormatUnsignedShort4 = 0x09,
    cudaResViewFormatSignedShort1 = 0x0a,
    cudaResViewFormatSignedShort2 = 0x0b,
    cudaResViewFormatSignedShort4 = 0x0c,
    cudaResViewFormatUnsignedInt1 = 0x0d,
    cudaResViewFormatUnsignedInt2 = 0x0e,
    cudaResViewFormatUnsignedInt4 = 0x0f,
    cudaResViewFormatSignedInt1 = 0x10,
    cudaResViewFormatSignedInt2 = 0x11,
    cudaResViewFormatSignedInt4 = 0x12,
    cudaResViewFormatHalf1 = 0x13,
    cudaResViewFormatHalf2 = 0x14,
    cudaResViewFormatHalf4 = 0x15,
    cudaResViewFormatFloat1 = 0x16,
    cudaResViewFormatFloat2 = 0x17,
    cudaResViewFormatFloat4 = 0x18,
    cudaResViewFormatUnsignedBlockCompressed1 = 0x19,
    cudaResViewFormatUnsignedBlockCompressed2 = 0x1a,
    cudaResViewFormatUnsignedBlockCompressed3 = 0x1b,
    cudaResViewFormatUnsignedBlockCompressed4 = 0x1c,
    cudaResViewFormatSignedBlockCompressed4 = 0x1d,
    cudaResViewFormatUnsignedBlockCompressed5 = 0x1e,
    cudaResViewFormatSignedBlockCompressed5 = 0x1f,
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20,
    cudaResViewFormatSignedBlockCompressed6H = 0x21,
    cudaResViewFormatUnsignedBlockCompressed7 = 0x22
};




struct cudaResourceDesc {
 enum cudaResourceType resType;

 union {
  struct {
   cudaArray_t array;
  } array;
        struct {
            cudaMipmappedArray_t mipmap;
        } mipmap;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t sizeInBytes;
  } linear;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t width;
   size_t height;
   size_t pitchInBytes;
  } pitch2D;
 } res;
};




struct cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    unsigned int firstMipmapLevel;
    unsigned int lastMipmapLevel;
    unsigned int firstLayer;
    unsigned int lastLayer;
};




struct cudaPointerAttributes
{




    enum cudaMemoryType memoryType;
# 1045 "/usr/local/cuda-8.0/include/driver_types.h" 3
    int device;





    void *devicePointer;





    void *hostPointer;




    int isManaged;
};




struct cudaFuncAttributes
{





   size_t sharedSizeBytes;





   size_t constSizeBytes;




   size_t localSizeBytes;






   int maxThreadsPerBlock;




   int numRegs;






   int ptxVersion;






   int binaryVersion;





   int cacheModeCA;
};




enum cudaFuncCache
{
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3
};





enum cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum cudaComputeMode
{
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3
};




enum cudaLimit
{
    cudaLimitStackSize = 0x00,
    cudaLimitPrintfFifoSize = 0x01,
    cudaLimitMallocHeapSize = 0x02,
    cudaLimitDevRuntimeSyncDepth = 0x03,
    cudaLimitDevRuntimePendingLaunchCount = 0x04
};




enum cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly = 1,
    cudaMemAdviseUnsetReadMostly = 2,
    cudaMemAdviseSetPreferredLocation = 3,
    cudaMemAdviseUnsetPreferredLocation = 4,
    cudaMemAdviseSetAccessedBy = 5,
    cudaMemAdviseUnsetAccessedBy = 6
};




enum cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly = 1,
    cudaMemRangeAttributePreferredLocation = 2,
    cudaMemRangeAttributeAccessedBy = 3,
    cudaMemRangeAttributeLastPrefetchLocation = 4
};




enum cudaOutputMode
{
    cudaKeyValuePair = 0x00,
    cudaCSV = 0x01
};




enum cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85,
    cudaDevAttrHostNativeAtomicSupported = 86,
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
    cudaDevAttrPageableMemoryAccess = 88,
    cudaDevAttrConcurrentManagedAccess = 89,
    cudaDevAttrComputePreemptionSupported = 90,
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91
};





enum cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank = 1,
    cudaDevP2PAttrAccessSupported = 2,
    cudaDevP2PAttrNativeAtomicSupported = 3
};



struct cudaDeviceProp
{
    char name[256];
    size_t totalGlobalMem;
    size_t sharedMemPerBlock;
    int regsPerBlock;
    int warpSize;
    size_t memPitch;
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int clockRate;
    size_t totalConstMem;
    int major;
    int minor;
    size_t textureAlignment;
    size_t texturePitchAlignment;
    int deviceOverlap;
    int multiProcessorCount;
    int kernelExecTimeoutEnabled;
    int integrated;
    int canMapHostMemory;
    int computeMode;
    int maxTexture1D;
    int maxTexture1DMipmap;
    int maxTexture1DLinear;
    int maxTexture2D[2];
    int maxTexture2DMipmap[2];
    int maxTexture2DLinear[3];
    int maxTexture2DGather[2];
    int maxTexture3D[3];
    int maxTexture3DAlt[3];
    int maxTextureCubemap;
    int maxTexture1DLayered[2];
    int maxTexture2DLayered[3];
    int maxTextureCubemapLayered[2];
    int maxSurface1D;
    int maxSurface2D[2];
    int maxSurface3D[3];
    int maxSurface1DLayered[2];
    int maxSurface2DLayered[3];
    int maxSurfaceCubemap;
    int maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;
    int concurrentKernels;
    int ECCEnabled;
    int pciBusID;
    int pciDeviceID;
    int pciDomainID;
    int tccDriver;
    int asyncEngineCount;
    int unifiedAddressing;
    int memoryClockRate;
    int memoryBusWidth;
    int l2CacheSize;
    int maxThreadsPerMultiProcessor;
    int streamPrioritiesSupported;
    int globalL1CacheSupported;
    int localL1CacheSupported;
    size_t sharedMemPerMultiprocessor;
    int regsPerMultiprocessor;
    int managedMemory;
    int isMultiGpuBoard;
    int multiGpuBoardGroupID;
    int hostNativeAtomicSupported;
    int singleToDoublePrecisionPerfRatio;
    int pageableMemoryAccess;
    int concurrentManagedAccess;
};
# 1456 "/usr/local/cuda-8.0/include/driver_types.h" 3
typedef struct cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef struct cudaIpcMemHandle_st
{
    char reserved[64];
}cudaIpcMemHandle_t;
# 1478 "/usr/local/cuda-8.0/include/driver_types.h" 3
typedef enum cudaError cudaError_t;




typedef struct CUstream_st *cudaStream_t;




typedef struct CUevent_st *cudaEvent_t;




typedef struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef struct CUuuid_st cudaUUID_t;




typedef enum cudaOutputMode cudaOutputMode_t;
# 100 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 1 "/usr/local/cuda-8.0/include/host_config.h" 1 3
# 101 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3





# 1 "/usr/local/cuda-8.0/include/cuda_runtime.h" 1 3
# 56 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
#pragma GCC diagnostic push


#pragma GCC diagnostic ignored "-Wunused-function"
# 86 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 56 "/usr/local/cuda-8.0/include/builtin_types.h" 3
# 1 "/usr/local/cuda-8.0/include/device_types.h" 1 3
# 61 "/usr/local/cuda-8.0/include/device_types.h" 3
enum cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};
# 57 "/usr/local/cuda-8.0/include/builtin_types.h" 2 3





# 1 "/usr/local/cuda-8.0/include/surface_types.h" 1 3
# 84 "/usr/local/cuda-8.0/include/surface_types.h" 3
enum cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2
};




enum cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1
};




struct surfaceReference
{



    struct cudaChannelFormatDesc channelDesc;
};




typedef unsigned long long cudaSurfaceObject_t;
# 63 "/usr/local/cuda-8.0/include/builtin_types.h" 2 3
# 1 "/usr/local/cuda-8.0/include/texture_types.h" 1 3
# 84 "/usr/local/cuda-8.0/include/texture_types.h" 3
enum cudaTextureAddressMode
{
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3
};




enum cudaTextureFilterMode
{
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1
};




enum cudaTextureReadMode
{
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1
};




struct textureReference
{



    int normalized;



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureAddressMode addressMode[3];



    struct cudaChannelFormatDesc channelDesc;



    int sRGB;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
    int __cudaReserved[15];
};




struct cudaTextureDesc
{



    enum cudaTextureAddressMode addressMode[3];



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureReadMode readMode;



    int sRGB;



    float borderColor[4];



    int normalizedCoords;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
};




typedef unsigned long long cudaTextureObject_t;
# 64 "/usr/local/cuda-8.0/include/builtin_types.h" 2 3
# 1 "/usr/local/cuda-8.0/include/vector_types.h" 1 3
# 61 "/usr/local/cuda-8.0/include/vector_types.h" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 64 "/usr/local/cuda-8.0/include/builtin_types.h" 3
# 1 "/usr/local/cuda-8.0/include/vector_types.h" 1 3
# 65 "/usr/local/cuda-8.0/include/builtin_types.h" 2 3
# 62 "/usr/local/cuda-8.0/include/vector_types.h" 2 3
# 98 "/usr/local/cuda-8.0/include/vector_types.h" 3
struct char1
{
    signed char x;
};

struct uchar1
{
    unsigned char x;
};


struct __attribute__((aligned(2))) char2
{
    signed char x, y;
};

struct __attribute__((aligned(2))) uchar2
{
    unsigned char x, y;
};

struct char3
{
    signed char x, y, z;
};

struct uchar3
{
    unsigned char x, y, z;
};

struct __attribute__((aligned(4))) char4
{
    signed char x, y, z, w;
};

struct __attribute__((aligned(4))) uchar4
{
    unsigned char x, y, z, w;
};

struct short1
{
    short x;
};

struct ushort1
{
    unsigned short x;
};

struct __attribute__((aligned(4))) short2
{
    short x, y;
};

struct __attribute__((aligned(4))) ushort2
{
    unsigned short x, y;
};

struct short3
{
    short x, y, z;
};

struct ushort3
{
    unsigned short x, y, z;
};

struct __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };
struct __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct int1
{
    int x;
};

struct uint1
{
    unsigned int x;
};

struct __attribute__((aligned(8))) int2 { int x; int y; };
struct __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };

struct int3
{
    int x, y, z;
};

struct uint3
{
    unsigned int x, y, z;
};

struct __attribute__((aligned(16))) int4
{
    int x, y, z, w;
};

struct __attribute__((aligned(16))) uint4
{
    unsigned int x, y, z, w;
};

struct long1
{
    long int x;
};

struct ulong1
{
    unsigned long x;
};






struct __attribute__((aligned(2*sizeof(long int)))) long2
{
    long int x, y;
};

struct __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
    unsigned long int x, y;
};



struct long3
{
    long int x, y, z;
};

struct ulong3
{
    unsigned long int x, y, z;
};

struct __attribute__((aligned(16))) long4
{
    long int x, y, z, w;
};

struct __attribute__((aligned(16))) ulong4
{
    unsigned long int x, y, z, w;
};

struct float1
{
    float x;
};
# 274 "/usr/local/cuda-8.0/include/vector_types.h" 3
struct __attribute__((aligned(8))) float2 { float x; float y; };




struct float3
{
    float x, y, z;
};

struct __attribute__((aligned(16))) float4
{
    float x, y, z, w;
};

struct longlong1
{
    long long int x;
};

struct ulonglong1
{
    unsigned long long int x;
};

struct __attribute__((aligned(16))) longlong2
{
    long long int x, y;
};

struct __attribute__((aligned(16))) ulonglong2
{
    unsigned long long int x, y;
};

struct longlong3
{
    long long int x, y, z;
};

struct ulonglong3
{
    unsigned long long int x, y, z;
};

struct __attribute__((aligned(16))) longlong4
{
    long long int x, y, z ,w;
};

struct __attribute__((aligned(16))) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct double1
{
    double x;
};

struct __attribute__((aligned(16))) double2
{
    double x, y;
};

struct double3
{
    double x, y, z;
};

struct __attribute__((aligned(16))) double4
{
    double x, y, z, w;
};
# 362 "/usr/local/cuda-8.0/include/vector_types.h" 3
typedef struct char1 char1;
typedef struct uchar1 uchar1;
typedef struct char2 char2;
typedef struct uchar2 uchar2;
typedef struct char3 char3;
typedef struct uchar3 uchar3;
typedef struct char4 char4;
typedef struct uchar4 uchar4;
typedef struct short1 short1;
typedef struct ushort1 ushort1;
typedef struct short2 short2;
typedef struct ushort2 ushort2;
typedef struct short3 short3;
typedef struct ushort3 ushort3;
typedef struct short4 short4;
typedef struct ushort4 ushort4;
typedef struct int1 int1;
typedef struct uint1 uint1;
typedef struct int2 int2;
typedef struct uint2 uint2;
typedef struct int3 int3;
typedef struct uint3 uint3;
typedef struct int4 int4;
typedef struct uint4 uint4;
typedef struct long1 long1;
typedef struct ulong1 ulong1;
typedef struct long2 long2;
typedef struct ulong2 ulong2;
typedef struct long3 long3;
typedef struct ulong3 ulong3;
typedef struct long4 long4;
typedef struct ulong4 ulong4;
typedef struct float1 float1;
typedef struct float2 float2;
typedef struct float3 float3;
typedef struct float4 float4;
typedef struct longlong1 longlong1;
typedef struct ulonglong1 ulonglong1;
typedef struct longlong2 longlong2;
typedef struct ulonglong2 ulonglong2;
typedef struct longlong3 longlong3;
typedef struct ulonglong3 ulonglong3;
typedef struct longlong4 longlong4;
typedef struct ulonglong4 ulonglong4;
typedef struct double1 double1;
typedef struct double2 double2;
typedef struct double3 double3;
typedef struct double4 double4;







struct dim3
{
    unsigned int x, y, z;

    __attribute__((host)) __attribute__((device)) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __attribute__((host)) __attribute__((device)) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __attribute__((host)) __attribute__((device)) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};

typedef struct dim3 dim3;
# 65 "/usr/local/cuda-8.0/include/builtin_types.h" 2 3
# 87 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2 3
# 1 "/usr/local/cuda-8.0/include/library_types.h" 1 3
# 54 "/usr/local/cuda-8.0/include/library_types.h" 3
typedef enum cudaDataType_t
{
 CUDA_R_16F= 2,
 CUDA_C_16F= 6,
 CUDA_R_32F= 0,
 CUDA_C_32F= 4,
 CUDA_R_64F= 1,
 CUDA_C_64F= 5,
 CUDA_R_8I = 3,
 CUDA_C_8I = 7,
 CUDA_R_8U = 8,
 CUDA_C_8U = 9,
 CUDA_R_32I= 10,
 CUDA_C_32I= 11,
 CUDA_R_32U= 12,
 CUDA_C_32U= 13
} cudaDataType;


typedef enum libraryPropertyType_t
{
 MAJOR_VERSION,
 MINOR_VERSION,
 PATCH_LEVEL
} libraryPropertyType;
# 88 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2 3


# 1 "/usr/local/cuda-8.0/include/channel_descriptor.h" 1 3
# 62 "/usr/local/cuda-8.0/include/channel_descriptor.h" 3
# 1 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 1 3
# 134 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 135 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 2 3


# 1 "/usr/local/cuda-8.0/include/cuda_device_runtime_api.h" 1 3
# 104 "/usr/local/cuda-8.0/include/cuda_device_runtime_api.h" 3
extern "C"
{
extern __attribute__((device)) cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
extern __attribute__((device)) cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
extern __attribute__((device)) cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
extern __attribute__((device)) cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
extern __attribute__((device)) cudaError_t cudaDeviceSynchronize(void);
extern __attribute__((device)) cudaError_t cudaGetLastError(void);
extern __attribute__((device)) cudaError_t cudaPeekAtLastError(void);
extern __attribute__((device)) const char* cudaGetErrorString(cudaError_t error);
extern __attribute__((device)) const char* cudaGetErrorName(cudaError_t error);
extern __attribute__((device)) cudaError_t cudaGetDeviceCount(int *count);
extern __attribute__((device)) cudaError_t cudaGetDevice(int *device);
extern __attribute__((device)) cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
extern __attribute__((device)) cudaError_t cudaStreamDestroy(cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __attribute__((device)) cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __attribute__((device)) cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
extern __attribute__((device)) cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaEventDestroy(cudaEvent_t event);
extern __attribute__((device)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
extern __attribute__((device)) cudaError_t cudaFree(void *devPtr);
extern __attribute__((device)) cudaError_t cudaMalloc(void **devPtr, size_t size);
extern __attribute__((device)) cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaMemcpyAsync_ptsz(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaMemcpy2DAsync_ptsz(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaMemcpy3DAsync_ptsz(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaMemsetAsync_ptsz(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaMemset2DAsync_ptsz(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaMemset3DAsync_ptsz(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);
# 161 "/usr/local/cuda-8.0/include/cuda_device_runtime_api.h" 3
extern __attribute__((device)) void * cudaGetParameterBuffer(size_t alignment, size_t size);
# 189 "/usr/local/cuda-8.0/include/cuda_device_runtime_api.h" 3
extern __attribute__((device)) void * cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize);
extern __attribute__((device)) cudaError_t cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
extern __attribute__((device)) cudaError_t cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream);
# 209 "/usr/local/cuda-8.0/include/cuda_device_runtime_api.h" 3
    extern __attribute__((device)) cudaError_t cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
    extern __attribute__((device)) cudaError_t cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream);


extern __attribute__((device)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize);
extern __attribute__((device)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize, unsigned int flags);

}

template <typename T> static __inline__ __attribute__((device)) cudaError_t cudaMalloc(T **devPtr, size_t size);
template <typename T> static __inline__ __attribute__((device)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, T *entry);
template <typename T> static __inline__ __attribute__((device)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize);
template <typename T> static __inline__ __attribute__((device)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned int flags);
# 138 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 2 3
# 219 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern "C" {
# 252 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceReset(void);
# 269 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceSynchronize(void);
# 344 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value);
# 373 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
# 404 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 439 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);
# 481 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);
# 510 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
# 552 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);
# 575 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);
# 602 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);
# 644 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);
# 679 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);
# 717 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);
# 767 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);
# 797 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaIpcCloseMemHandle(void *devPtr);
# 837 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaThreadExit(void);
# 861 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaThreadSynchronize(void);
# 908 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value);
# 939 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);
# 974 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 1020 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);
# 1074 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetLastError(void);
# 1115 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaPeekAtLastError(void);
# 1130 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) const char* cudaGetErrorName(cudaError_t error);
# 1145 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) const char* cudaGetErrorString(cudaError_t error);
# 1175 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetDeviceCount(int *count);
# 1421 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);
# 1593 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
# 1628 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);
# 1647 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);
# 1681 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaSetDevice(int device);
# 1698 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetDevice(int *device);
# 1727 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaSetValidDevices(int *device_arr, int len);
# 1789 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaSetDeviceFlags( unsigned int flags );
# 1830 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetDeviceFlags( unsigned int *flags );
# 1867 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaStreamCreate(cudaStream_t *pStream);
# 1896 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
# 1939 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);
# 1963 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int *priority);
# 1984 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);
# 2005 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaStreamDestroy(cudaStream_t stream);
# 2037 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
# 2051 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
typedef void ( *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);
# 2108 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);
# 2128 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaStreamSynchronize(cudaStream_t stream);
# 2149 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaStreamQuery(cudaStream_t stream);
# 2220 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length = 0, unsigned int flags = 0x04);
# 2256 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaEventCreate(cudaEvent_t *event);
# 2290 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
# 2321 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);
# 2353 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaEventQuery(cudaEvent_t event);
# 2385 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaEventSynchronize(cudaEvent_t event);
# 2410 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaEventDestroy(cudaEvent_t event);
# 2451 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);
# 2510 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);
# 2560 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);
# 2614 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);
# 2648 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
# 2671 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaSetDoubleForDevice(double *d);
# 2694 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaSetDoubleForHost(double *d);
# 2750 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);
# 2794 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);
# 2845 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);
# 2874 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaSetupArgument(const void *arg, size_t size, size_t offset);
# 2912 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaLaunch(const void *func);
# 3030 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flags = 0x01);
# 3056 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMalloc(void **devPtr, size_t size);
# 3085 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMallocHost(void **ptr, size_t size);
# 3124 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);
# 3166 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);
# 3193 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaFree(void *devPtr);
# 3213 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaFreeHost(void *ptr);
# 3235 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaFreeArray(cudaArray_t array);
# 3257 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);
# 3316 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags);
# 3393 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags);
# 3412 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaHostUnregister(void *ptr);
# 3454 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);
# 3473 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost);
# 3508 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);
# 3643 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
# 3764 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);
# 3790 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);
# 3890 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p);
# 3918 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);
# 4029 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);
# 4052 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);
# 4071 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemGetInfo(size_t *free, size_t *total);
# 4092 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);
# 4130 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);
# 4162 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);
# 4200 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);
# 4237 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);
# 4275 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4320 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4366 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4412 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4455 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4493 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);
# 4531 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);
# 4582 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4614 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);
# 4660 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4705 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4765 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4820 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4874 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4920 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4966 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4992 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemset(void *devPtr, int value, size_t count);
# 5022 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);
# 5065 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);
# 5097 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);
# 5134 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);
# 5184 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);
# 5207 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetSymbolAddress(void **devPtr, const void *symbol);
# 5229 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetSymbolSize(size_t *size, const void *symbol);
# 5296 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);
# 5382 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device);
# 5438 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count);
# 5474 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count);
# 5627 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);
# 5665 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);
# 5704 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);
# 5723 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDeviceDisablePeerAccess(int peerDevice);
# 5783 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);
# 5815 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);
# 5851 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 5883 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 5912 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);
# 5946 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
# 5971 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);
# 6011 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);
# 6046 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);
# 6093 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = (2147483647 *2U +1U));
# 6144 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);
# 6172 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 6200 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);
# 6221 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaUnbindTexture(const struct textureReference *texref);
# 6246 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
# 6271 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetTextureReference(const struct textureReference **texref, const void *symbol);
# 6311 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 6330 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);
# 6556 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);
# 6571 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject);
# 6587 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);
# 6603 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);
# 6620 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);
# 6659 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);
# 6674 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);
# 6689 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);
# 6716 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaDriverGetVersion(int *driverVersion);
# 6733 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
extern __attribute__((host)) cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);




extern __attribute__((host)) cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);
# 6964 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3
}
# 63 "/usr/local/cuda-8.0/include/channel_descriptor.h" 2 3
# 107 "/usr/local/cuda-8.0/include/channel_descriptor.h" 3
template<class T> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;




  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);

}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}
# 379 "/usr/local/cuda-8.0/include/channel_descriptor.h" 3
template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}
# 91 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2 3

# 1 "/usr/local/cuda-8.0/include/driver_functions.h" 1 3
# 53 "/usr/local/cuda-8.0/include/driver_functions.h" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 54 "/usr/local/cuda-8.0/include/driver_functions.h" 2 3
# 79 "/usr/local/cuda-8.0/include/driver_functions.h" 3
static __inline__ __attribute__((host)) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
{
  struct cudaPitchedPtr s;

  s.ptr = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
# 106 "/usr/local/cuda-8.0/include/driver_functions.h" 3
static __inline__ __attribute__((host)) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z)
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
# 132 "/usr/local/cuda-8.0/include/driver_functions.h" 3
static __inline__ __attribute__((host)) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
{
  struct cudaExtent e;

  e.width = w;
  e.height = h;
  e.depth = d;

  return e;
}
# 93 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2 3



# 1 "/usr/local/cuda-8.0/include/vector_functions.h" 1 3
# 59 "/usr/local/cuda-8.0/include/vector_functions.h" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 60 "/usr/local/cuda-8.0/include/vector_functions.h" 2 3
# 176 "/usr/local/cuda-8.0/include/vector_functions.h" 3
# 1 "/usr/local/cuda-8.0/include/vector_functions.hpp" 1 3
# 59 "/usr/local/cuda-8.0/include/vector_functions.hpp" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 60 "/usr/local/cuda-8.0/include/vector_functions.hpp" 2 3
# 75 "/usr/local/cuda-8.0/include/vector_functions.hpp" 3
static __inline__ __attribute__((host)) __attribute__((device)) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short3 make_short3(short x,short y, short z)
{
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}
# 177 "/usr/local/cuda-8.0/include/vector_functions.h" 2 3
# 97 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2 3
# 116 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
# 1 "/usr/local/cuda-8.0/include/common_functions.h" 1 3
# 117 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2 3
# 1 "/usr/local/cuda-8.0/include/cuda_surface_types.h" 1 3
# 61 "/usr/local/cuda-8.0/include/cuda_surface_types.h" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 62 "/usr/local/cuda-8.0/include/cuda_surface_types.h" 2 3
# 77 "/usr/local/cuda-8.0/include/cuda_surface_types.h" 3
template<class T, int dim = 1>
struct surface : public surfaceReference
{

  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __attribute__((host)) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }

};

template<int dim>
struct surface<void, dim> : public surfaceReference
{

  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }

};
# 118 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2 3
# 1 "/usr/local/cuda-8.0/include/cuda_texture_types.h" 1 3
# 61 "/usr/local/cuda-8.0/include/cuda_texture_types.h" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 62 "/usr/local/cuda-8.0/include/cuda_texture_types.h" 2 3
# 77 "/usr/local/cuda-8.0/include/cuda_texture_types.h" 3
template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct texture : public textureReference
{

  __attribute__((host)) texture(int norm = 0,
                   enum cudaTextureFilterMode fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = cudaCreateChannelDesc<T>();
    sRGB = 0;
  }

  __attribute__((host)) texture(int norm,
                   enum cudaTextureFilterMode fMode,
                   enum cudaTextureAddressMode aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = desc;
    sRGB = 0;
  }

};
# 119 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2 3
# 1 "/usr/local/cuda-8.0/include/device_functions.h" 1 3
# 120 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2 3
# 1 "/usr/local/cuda-8.0/include/device_launch_parameters.h" 1 3
# 121 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2 3
# 183 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaLaunchKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}
# 221 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaSetupArgument(
  T arg,
  size_t offset
)
{
  return ::cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}
# 260 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
static __inline__ __attribute__((host)) cudaError_t cudaEventCreate(
  cudaEvent_t *event,
  unsigned int flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}
# 323 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
static __inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  void **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaHostAlloc(
  T **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaHostGetDevicePointer(
  T **pDevice,
  void *pHost,
  unsigned int flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}
# 449 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocManaged(
  T **devPtr,
  size_t size,
  unsigned int flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}
# 528 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t stream,
  T *devPtr,
  size_t length = 0,
  unsigned int flags = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMalloc(
  T **devPtr,
  size_t size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  T **ptr,
  size_t size,
  unsigned int flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocPitch(
  T **devPtr,
  size_t *pitch,
  size_t width,
  size_t height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}
# 604 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbol(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}
# 656 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}
# 702 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}
# 754 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}
# 787 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}
# 816 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}
# 859 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
        size_t size = (2147483647 *2U +1U)
)
{
  return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
}
# 904 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
        size_t size = (2147483647 *2U +1U)
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}
# 960 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}
# 1018 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}
# 1060 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToArray(&tex, array, &desc);
}
# 1098 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}
# 1139 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
}
# 1177 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray
)
{
  struct cudaChannelFormatDesc desc;
  cudaArray_t levelArray;
  cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);

  if (err != cudaSuccess) {
      return err;
  }
  err = ::cudaGetChannelDesc(&desc, levelArray);

  return err == cudaSuccess ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
}
# 1216 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaUnbindTexture(&tex);
}
# 1250 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaGetTextureAlignmentOffset(offset, &tex);
}
# 1302 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(
  T *func,
  enum cudaFuncCache cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(
  T *func,
  enum cudaSharedMemConfig config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}
# 1347 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(
    int *numBlocks,
    T func,
    int blockSize,
    size_t dynamicSMemSize)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, 0x00);
}
# 1398 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
    int *numBlocks,
    T func,
    int blockSize,
    size_t dynamicSMemSize,
    unsigned int flags)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, flags);
}




class __cudaOccupancyB2DHelper {
  size_t n;
public:
  inline __attribute__((host)) __attribute__((device)) __cudaOccupancyB2DHelper(size_t n_) : n(n_) {}
  inline __attribute__((host)) __attribute__((device)) size_t operator()(int)
  {
      return n;
  }
};
# 1467 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<typename UnaryFunction, class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(
    int *minGridSize,
    int *blockSize,
    T func,
    UnaryFunction blockSizeToDynamicSMemSize,
    int blockSizeLimit = 0,
    unsigned int flags = 0)
{
    cudaError_t status;


    int device;
    struct cudaFuncAttributes attr;


    int maxThreadsPerMultiProcessor;
    int warpSize;
    int devMaxThreadsPerBlock;
    int multiProcessorCount;
    int funcMaxThreadsPerBlock;
    int occupancyLimit;
    int granularity;


    int maxBlockSize = 0;
    int numBlocks = 0;
    int maxOccupancy = 0;


    int blockSizeToTryAligned;
    int blockSizeToTry;
    int blockSizeLimitAligned;
    int occupancyInBlocks;
    int occupancyInThreads;
    size_t dynamicSMemSize;





    if (!minGridSize || !blockSize || !func) {
        return cudaErrorInvalidValue;
    }





    status = ::cudaGetDevice(&device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &maxThreadsPerMultiProcessor,
        cudaDevAttrMaxThreadsPerMultiProcessor,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &warpSize,
        cudaDevAttrWarpSize,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &devMaxThreadsPerBlock,
        cudaDevAttrMaxThreadsPerBlock,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &multiProcessorCount,
        cudaDevAttrMultiProcessorCount,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaFuncGetAttributes(&attr, func);
    if (status != cudaSuccess) {
        return status;
    }

    funcMaxThreadsPerBlock = attr.maxThreadsPerBlock;





    occupancyLimit = maxThreadsPerMultiProcessor;
    granularity = warpSize;

    if (blockSizeLimit == 0) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (devMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (funcMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = funcMaxThreadsPerBlock;
    }

    blockSizeLimitAligned = ((blockSizeLimit + (granularity - 1)) / granularity) * granularity;

    for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) {



        if (blockSizeLimit < blockSizeToTryAligned) {
            blockSizeToTry = blockSizeLimit;
        } else {
            blockSizeToTry = blockSizeToTryAligned;
        }

        dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry);

        status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
            &occupancyInBlocks,
            func,
            blockSizeToTry,
            dynamicSMemSize,
            flags);

        if (status != cudaSuccess) {
            return status;
        }

        occupancyInThreads = blockSizeToTry * occupancyInBlocks;

        if (occupancyInThreads > maxOccupancy) {
            maxBlockSize = blockSizeToTry;
            numBlocks = occupancyInBlocks;
            maxOccupancy = occupancyInThreads;
        }



        if (occupancyLimit == maxOccupancy) {
            break;
        }
    }







    *minGridSize = numBlocks * multiProcessorCount;
    *blockSize = maxBlockSize;

    return status;
}
# 1662 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<typename UnaryFunction, class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem(
    int *minGridSize,
    int *blockSize,
    T func,
    UnaryFunction blockSizeToDynamicSMemSize,
    int blockSizeLimit = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0x00);
}
# 1707 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSize(
    int *minGridSize,
    int *blockSize,
    T func,
    size_t dynamicSMemSize = 0,
    int blockSizeLimit = 0)
{
  return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, 0x00);
}
# 1766 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags(
    int *minGridSize,
    int *blockSize,
    T func,
    size_t dynamicSMemSize = 0,
    int blockSizeLimit = 0,
    unsigned int flags = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, flags);
}
# 1814 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaLaunch(
  T *func
)
{
  return ::cudaLaunch((const void*)func);
}
# 1851 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}
# 1880 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim>
static __inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindSurfaceToArray(&surf, array, &desc);
}
# 1909 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
template<class T, int dim>
static __inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}
# 1930 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3
#pragma GCC diagnostic pop
# 107 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 117 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/cuda-8.0/include/crt/device_runtime.h" 1 3
# 47 "/usr/local/cuda-8.0/include/crt/device_runtime.h" 3
typedef const void *__texture_type__;
typedef const void *__surface_type__;
# 284 "/usr/local/cuda-8.0/include/crt/device_runtime.h" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 285 "/usr/local/cuda-8.0/include/crt/device_runtime.h" 2 3
# 1 "/usr/local/cuda-8.0/include/device_launch_parameters.h" 1 3
# 286 "/usr/local/cuda-8.0/include/crt/device_runtime.h" 2 3
# 1 "/usr/local/cuda-8.0/include/crt/storage_class.h" 1 3
# 287 "/usr/local/cuda-8.0/include/crt/device_runtime.h" 2 3
# 118 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3

# 1 "/usr/local/cuda-8.0/include/crt/host_runtime.h" 1 3
# 74 "/usr/local/cuda-8.0/include/crt/host_runtime.h" 3
template <typename T>
static inline T *__cudaAddressOf(T &val)
{
    return (T *)((void *)(&(const_cast<char &>(reinterpret_cast<const volatile char &>(val)))));
}
# 121 "/usr/local/cuda-8.0/include/crt/host_runtime.h" 3
static void ____nv_dummy_param_ref(void *param) { volatile static void **__ref __attribute__((unused)); __ref = (volatile void **)param; }




extern "C" {
void __cudaRegisterLinkedBinary__NV_MODULE_ID ( void (*)(void **), void *, void *, void (*)(void *));
}




extern "C" {







  static const unsigned char __module_id_str[] __attribute__((section ("__nv_module_id"))) = "__NV_MODULE_ID";
# 152 "/usr/local/cuda-8.0/include/crt/host_runtime.h" 3
}

extern "C" {
extern void** __cudaRegisterFatBinary(
  void *fatCubin
);

extern void __cudaUnregisterFatBinary(
  void **fatCubinHandle
);

extern void __cudaRegisterVar(
        void **fatCubinHandle,
        char *hostVar,
        char *deviceAddress,
  const char *deviceName,
        int ext,
        int size,
        int constant,
        int global
);

extern void __cudaRegisterManagedVar(
        void **fatCubinHandle,
        void **hostVarPtrAddress,
        char *deviceAddress,
  const char *deviceName,
        int ext,
        int size,
        int constant,
        int global
);

extern char __cudaInitModule(
        void **fatCubinHandle
);

extern void __cudaRegisterTexture(
        void **fatCubinHandle,
  const struct textureReference *hostVar,
  const void **deviceAddress,
  const char *deviceName,
        int dim,
        int norm,
        int ext
);

extern void __cudaRegisterSurface(
        void **fatCubinHandle,
  const struct surfaceReference *hostVar,
  const void **deviceAddress,
  const char *deviceName,
        int dim,
        int ext
);

extern void __cudaRegisterFunction(
        void **fatCubinHandle,
  const char *hostFun,
        char *deviceFun,
  const char *deviceName,
        int thread_limit,
        uint3 *tid,
        uint3 *bid,
        dim3 *bDim,
        dim3 *gDim,
        int *wSize
);





extern int atexit(void(*)(void)) throw();





}

static void **__cudaFatCubinHandle;

static void __cudaUnregisterBinaryUtil(void)
{
  ____nv_dummy_param_ref((void *)&__cudaFatCubinHandle);
  __cudaUnregisterFatBinary(__cudaFatCubinHandle);
}

static char __nv_init_managed_rt_with_module(void **handle)
{
  return __cudaInitModule(handle);
}


# 1 "/usr/local/cuda-8.0/include/common_functions.h" 1 3
# 247 "/usr/local/cuda-8.0/include/crt/host_runtime.h" 2 3







#pragma pack()
# 120 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 145 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_libdevice_declares.h" 1 3
# 27 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_libdevice_declares.h" 3
extern "C" {

__attribute__((device)) int __nv_abs(int __a);
__attribute__((device)) double __nv_acos(double __a);
__attribute__((device)) float __nv_acosf(float __a);
__attribute__((device)) double __nv_acosh(double __a);
__attribute__((device)) float __nv_acoshf(float __a);
__attribute__((device)) double __nv_asin(double __a);
__attribute__((device)) float __nv_asinf(float __a);
__attribute__((device)) double __nv_asinh(double __a);
__attribute__((device)) float __nv_asinhf(float __a);
__attribute__((device)) double __nv_atan2(double __a, double __b);
__attribute__((device)) float __nv_atan2f(float __a, float __b);
__attribute__((device)) double __nv_atan(double __a);
__attribute__((device)) float __nv_atanf(float __a);
__attribute__((device)) double __nv_atanh(double __a);
__attribute__((device)) float __nv_atanhf(float __a);
__attribute__((device)) int __nv_brev(int __a);
__attribute__((device)) long long __nv_brevll(long long __a);
__attribute__((device)) int __nv_byte_perm(int __a, int __b, int __c);
__attribute__((device)) double __nv_cbrt(double __a);
__attribute__((device)) float __nv_cbrtf(float __a);
__attribute__((device)) double __nv_ceil(double __a);
__attribute__((device)) float __nv_ceilf(float __a);
__attribute__((device)) int __nv_clz(int __a);
__attribute__((device)) int __nv_clzll(long long __a);
__attribute__((device)) double __nv_copysign(double __a, double __b);
__attribute__((device)) float __nv_copysignf(float __a, float __b);
__attribute__((device)) double __nv_cos(double __a);
__attribute__((device)) float __nv_cosf(float __a);
__attribute__((device)) double __nv_cosh(double __a);
__attribute__((device)) float __nv_coshf(float __a);
__attribute__((device)) double __nv_cospi(double __a);
__attribute__((device)) float __nv_cospif(float __a);
__attribute__((device)) double __nv_cyl_bessel_i0(double __a);
__attribute__((device)) float __nv_cyl_bessel_i0f(float __a);
__attribute__((device)) double __nv_cyl_bessel_i1(double __a);
__attribute__((device)) float __nv_cyl_bessel_i1f(float __a);
__attribute__((device)) double __nv_dadd_rd(double __a, double __b);
__attribute__((device)) double __nv_dadd_rn(double __a, double __b);
__attribute__((device)) double __nv_dadd_ru(double __a, double __b);
__attribute__((device)) double __nv_dadd_rz(double __a, double __b);
__attribute__((device)) double __nv_ddiv_rd(double __a, double __b);
__attribute__((device)) double __nv_ddiv_rn(double __a, double __b);
__attribute__((device)) double __nv_ddiv_ru(double __a, double __b);
__attribute__((device)) double __nv_ddiv_rz(double __a, double __b);
__attribute__((device)) double __nv_dmul_rd(double __a, double __b);
__attribute__((device)) double __nv_dmul_rn(double __a, double __b);
__attribute__((device)) double __nv_dmul_ru(double __a, double __b);
__attribute__((device)) double __nv_dmul_rz(double __a, double __b);
__attribute__((device)) float __nv_double2float_rd(double __a);
__attribute__((device)) float __nv_double2float_rn(double __a);
__attribute__((device)) float __nv_double2float_ru(double __a);
__attribute__((device)) float __nv_double2float_rz(double __a);
__attribute__((device)) int __nv_double2hiint(double __a);
__attribute__((device)) int __nv_double2int_rd(double __a);
__attribute__((device)) int __nv_double2int_rn(double __a);
__attribute__((device)) int __nv_double2int_ru(double __a);
__attribute__((device)) int __nv_double2int_rz(double __a);
__attribute__((device)) long long __nv_double2ll_rd(double __a);
__attribute__((device)) long long __nv_double2ll_rn(double __a);
__attribute__((device)) long long __nv_double2ll_ru(double __a);
__attribute__((device)) long long __nv_double2ll_rz(double __a);
__attribute__((device)) int __nv_double2loint(double __a);
__attribute__((device)) unsigned int __nv_double2uint_rd(double __a);
__attribute__((device)) unsigned int __nv_double2uint_rn(double __a);
__attribute__((device)) unsigned int __nv_double2uint_ru(double __a);
__attribute__((device)) unsigned int __nv_double2uint_rz(double __a);
__attribute__((device)) unsigned long long __nv_double2ull_rd(double __a);
__attribute__((device)) unsigned long long __nv_double2ull_rn(double __a);
__attribute__((device)) unsigned long long __nv_double2ull_ru(double __a);
__attribute__((device)) unsigned long long __nv_double2ull_rz(double __a);
__attribute__((device)) unsigned long long __nv_double_as_longlong(double __a);
__attribute__((device)) double __nv_drcp_rd(double __a);
__attribute__((device)) double __nv_drcp_rn(double __a);
__attribute__((device)) double __nv_drcp_ru(double __a);
__attribute__((device)) double __nv_drcp_rz(double __a);
__attribute__((device)) double __nv_dsqrt_rd(double __a);
__attribute__((device)) double __nv_dsqrt_rn(double __a);
__attribute__((device)) double __nv_dsqrt_ru(double __a);
__attribute__((device)) double __nv_dsqrt_rz(double __a);
__attribute__((device)) double __nv_dsub_rd(double __a, double __b);
__attribute__((device)) double __nv_dsub_rn(double __a, double __b);
__attribute__((device)) double __nv_dsub_ru(double __a, double __b);
__attribute__((device)) double __nv_dsub_rz(double __a, double __b);
__attribute__((device)) double __nv_erfc(double __a);
__attribute__((device)) float __nv_erfcf(float __a);
__attribute__((device)) double __nv_erfcinv(double __a);
__attribute__((device)) float __nv_erfcinvf(float __a);
__attribute__((device)) double __nv_erfcx(double __a);
__attribute__((device)) float __nv_erfcxf(float __a);
__attribute__((device)) double __nv_erf(double __a);
__attribute__((device)) float __nv_erff(float __a);
__attribute__((device)) double __nv_erfinv(double __a);
__attribute__((device)) float __nv_erfinvf(float __a);
__attribute__((device)) double __nv_exp10(double __a);
__attribute__((device)) float __nv_exp10f(float __a);
__attribute__((device)) double __nv_exp2(double __a);
__attribute__((device)) float __nv_exp2f(float __a);
__attribute__((device)) double __nv_exp(double __a);
__attribute__((device)) float __nv_expf(float __a);
__attribute__((device)) double __nv_expm1(double __a);
__attribute__((device)) float __nv_expm1f(float __a);
__attribute__((device)) double __nv_fabs(double __a);
__attribute__((device)) float __nv_fabsf(float __a);
__attribute__((device)) float __nv_fadd_rd(float __a, float __b);
__attribute__((device)) float __nv_fadd_rn(float __a, float __b);
__attribute__((device)) float __nv_fadd_ru(float __a, float __b);
__attribute__((device)) float __nv_fadd_rz(float __a, float __b);
__attribute__((device)) float __nv_fast_cosf(float __a);
__attribute__((device)) float __nv_fast_exp10f(float __a);
__attribute__((device)) float __nv_fast_expf(float __a);
__attribute__((device)) float __nv_fast_fdividef(float __a, float __b);
__attribute__((device)) float __nv_fast_log10f(float __a);
__attribute__((device)) float __nv_fast_log2f(float __a);
__attribute__((device)) float __nv_fast_logf(float __a);
__attribute__((device)) float __nv_fast_powf(float __a, float __b);
__attribute__((device)) void __nv_fast_sincosf(float __a, float *__sptr, float *__cptr);
__attribute__((device)) float __nv_fast_sinf(float __a);
__attribute__((device)) float __nv_fast_tanf(float __a);
__attribute__((device)) double __nv_fdim(double __a, double __b);
__attribute__((device)) float __nv_fdimf(float __a, float __b);
__attribute__((device)) float __nv_fdiv_rd(float __a, float __b);
__attribute__((device)) float __nv_fdiv_rn(float __a, float __b);
__attribute__((device)) float __nv_fdiv_ru(float __a, float __b);
__attribute__((device)) float __nv_fdiv_rz(float __a, float __b);
__attribute__((device)) int __nv_ffs(int __a);
__attribute__((device)) int __nv_ffsll(long long __a);
__attribute__((device)) int __nv_finitef(float __a);
__attribute__((device)) unsigned short __nv_float2half_rn(float __a);
__attribute__((device)) int __nv_float2int_rd(float __a);
__attribute__((device)) int __nv_float2int_rn(float __a);
__attribute__((device)) int __nv_float2int_ru(float __a);
__attribute__((device)) int __nv_float2int_rz(float __a);
__attribute__((device)) long long __nv_float2ll_rd(float __a);
__attribute__((device)) long long __nv_float2ll_rn(float __a);
__attribute__((device)) long long __nv_float2ll_ru(float __a);
__attribute__((device)) long long __nv_float2ll_rz(float __a);
__attribute__((device)) unsigned int __nv_float2uint_rd(float __a);
__attribute__((device)) unsigned int __nv_float2uint_rn(float __a);
__attribute__((device)) unsigned int __nv_float2uint_ru(float __a);
__attribute__((device)) unsigned int __nv_float2uint_rz(float __a);
__attribute__((device)) unsigned long long __nv_float2ull_rd(float __a);
__attribute__((device)) unsigned long long __nv_float2ull_rn(float __a);
__attribute__((device)) unsigned long long __nv_float2ull_ru(float __a);
__attribute__((device)) unsigned long long __nv_float2ull_rz(float __a);
__attribute__((device)) int __nv_float_as_int(float __a);
__attribute__((device)) unsigned int __nv_float_as_uint(float __a);
__attribute__((device)) double __nv_floor(double __a);
__attribute__((device)) float __nv_floorf(float __a);
__attribute__((device)) double __nv_fma(double __a, double __b, double __c);
__attribute__((device)) float __nv_fmaf(float __a, float __b, float __c);
__attribute__((device)) float __nv_fmaf_ieee_rd(float __a, float __b, float __c);
__attribute__((device)) float __nv_fmaf_ieee_rn(float __a, float __b, float __c);
__attribute__((device)) float __nv_fmaf_ieee_ru(float __a, float __b, float __c);
__attribute__((device)) float __nv_fmaf_ieee_rz(float __a, float __b, float __c);
__attribute__((device)) float __nv_fmaf_rd(float __a, float __b, float __c);
__attribute__((device)) float __nv_fmaf_rn(float __a, float __b, float __c);
__attribute__((device)) float __nv_fmaf_ru(float __a, float __b, float __c);
__attribute__((device)) float __nv_fmaf_rz(float __a, float __b, float __c);
__attribute__((device)) double __nv_fma_rd(double __a, double __b, double __c);
__attribute__((device)) double __nv_fma_rn(double __a, double __b, double __c);
__attribute__((device)) double __nv_fma_ru(double __a, double __b, double __c);
__attribute__((device)) double __nv_fma_rz(double __a, double __b, double __c);
__attribute__((device)) double __nv_fmax(double __a, double __b);
__attribute__((device)) float __nv_fmaxf(float __a, float __b);
__attribute__((device)) double __nv_fmin(double __a, double __b);
__attribute__((device)) float __nv_fminf(float __a, float __b);
__attribute__((device)) double __nv_fmod(double __a, double __b);
__attribute__((device)) float __nv_fmodf(float __a, float __b);
__attribute__((device)) float __nv_fmul_rd(float __a, float __b);
__attribute__((device)) float __nv_fmul_rn(float __a, float __b);
__attribute__((device)) float __nv_fmul_ru(float __a, float __b);
__attribute__((device)) float __nv_fmul_rz(float __a, float __b);
__attribute__((device)) float __nv_frcp_rd(float __a);
__attribute__((device)) float __nv_frcp_rn(float __a);
__attribute__((device)) float __nv_frcp_ru(float __a);
__attribute__((device)) float __nv_frcp_rz(float __a);
__attribute__((device)) double __nv_frexp(double __a, int *__b);
__attribute__((device)) float __nv_frexpf(float __a, int *__b);
__attribute__((device)) float __nv_frsqrt_rn(float __a);
__attribute__((device)) float __nv_fsqrt_rd(float __a);
__attribute__((device)) float __nv_fsqrt_rn(float __a);
__attribute__((device)) float __nv_fsqrt_ru(float __a);
__attribute__((device)) float __nv_fsqrt_rz(float __a);
__attribute__((device)) float __nv_fsub_rd(float __a, float __b);
__attribute__((device)) float __nv_fsub_rn(float __a, float __b);
__attribute__((device)) float __nv_fsub_ru(float __a, float __b);
__attribute__((device)) float __nv_fsub_rz(float __a, float __b);
__attribute__((device)) int __nv_hadd(int __a, int __b);
__attribute__((device)) float __nv_half2float(unsigned short __h);
__attribute__((device)) double __nv_hiloint2double(int __a, int __b);
__attribute__((device)) double __nv_hypot(double __a, double __b);
__attribute__((device)) float __nv_hypotf(float __a, float __b);
__attribute__((device)) int __nv_ilogb(double __a);
__attribute__((device)) int __nv_ilogbf(float __a);
__attribute__((device)) double __nv_int2double_rn(int __a);
__attribute__((device)) float __nv_int2float_rd(int __a);
__attribute__((device)) float __nv_int2float_rn(int __a);
__attribute__((device)) float __nv_int2float_ru(int __a);
__attribute__((device)) float __nv_int2float_rz(int __a);
__attribute__((device)) float __nv_int_as_float(int __a);
__attribute__((device)) int __nv_isfinited(double __a);
__attribute__((device)) int __nv_isinfd(double __a);
__attribute__((device)) int __nv_isinff(float __a);
__attribute__((device)) int __nv_isnand(double __a);
__attribute__((device)) int __nv_isnanf(float __a);
__attribute__((device)) double __nv_j0(double __a);
__attribute__((device)) float __nv_j0f(float __a);
__attribute__((device)) double __nv_j1(double __a);
__attribute__((device)) float __nv_j1f(float __a);
__attribute__((device)) float __nv_jnf(int __a, float __b);
__attribute__((device)) double __nv_jn(int __a, double __b);
__attribute__((device)) double __nv_ldexp(double __a, int __b);
__attribute__((device)) float __nv_ldexpf(float __a, int __b);
__attribute__((device)) double __nv_lgamma(double __a);
__attribute__((device)) float __nv_lgammaf(float __a);
__attribute__((device)) double __nv_ll2double_rd(long long __a);
__attribute__((device)) double __nv_ll2double_rn(long long __a);
__attribute__((device)) double __nv_ll2double_ru(long long __a);
__attribute__((device)) double __nv_ll2double_rz(long long __a);
__attribute__((device)) float __nv_ll2float_rd(long long __a);
__attribute__((device)) float __nv_ll2float_rn(long long __a);
__attribute__((device)) float __nv_ll2float_ru(long long __a);
__attribute__((device)) float __nv_ll2float_rz(long long __a);
__attribute__((device)) long long __nv_llabs(long long __a);
__attribute__((device)) long long __nv_llmax(long long __a, long long __b);
__attribute__((device)) long long __nv_llmin(long long __a, long long __b);
__attribute__((device)) long long __nv_llrint(double __a);
__attribute__((device)) long long __nv_llrintf(float __a);
__attribute__((device)) long long __nv_llround(double __a);
__attribute__((device)) long long __nv_llroundf(float __a);
__attribute__((device)) double __nv_log10(double __a);
__attribute__((device)) float __nv_log10f(float __a);
__attribute__((device)) double __nv_log1p(double __a);
__attribute__((device)) float __nv_log1pf(float __a);
__attribute__((device)) double __nv_log2(double __a);
__attribute__((device)) float __nv_log2f(float __a);
__attribute__((device)) double __nv_logb(double __a);
__attribute__((device)) float __nv_logbf(float __a);
__attribute__((device)) double __nv_log(double __a);
__attribute__((device)) float __nv_logf(float __a);
__attribute__((device)) double __nv_longlong_as_double(long long __a);
__attribute__((device)) int __nv_max(int __a, int __b);
__attribute__((device)) int __nv_min(int __a, int __b);
__attribute__((device)) double __nv_modf(double __a, double *__b);
__attribute__((device)) float __nv_modff(float __a, float *__b);
__attribute__((device)) int __nv_mul24(int __a, int __b);
__attribute__((device)) long long __nv_mul64hi(long long __a, long long __b);
__attribute__((device)) int __nv_mulhi(int __a, int __b);
__attribute__((device)) double __nv_nan(const signed char *__a);
__attribute__((device)) float __nv_nanf(const signed char *__a);
__attribute__((device)) double __nv_nearbyint(double __a);
__attribute__((device)) float __nv_nearbyintf(float __a);
__attribute__((device)) double __nv_nextafter(double __a, double __b);
__attribute__((device)) float __nv_nextafterf(float __a, float __b);
__attribute__((device)) double __nv_norm3d(double __a, double __b, double __c);
__attribute__((device)) float __nv_norm3df(float __a, float __b, float __c);
__attribute__((device)) double __nv_norm4d(double __a, double __b, double __c, double __d);
__attribute__((device)) float __nv_norm4df(float __a, float __b, float __c, float __d);
__attribute__((device)) double __nv_normcdf(double __a);
__attribute__((device)) float __nv_normcdff(float __a);
__attribute__((device)) double __nv_normcdfinv(double __a);
__attribute__((device)) float __nv_normcdfinvf(float __a);
__attribute__((device)) float __nv_normf(int __a, const float *__b);
__attribute__((device)) double __nv_norm(int __a, const double *__b);
__attribute__((device)) int __nv_popc(int __a);
__attribute__((device)) int __nv_popcll(long long __a);
__attribute__((device)) double __nv_pow(double __a, double __b);
__attribute__((device)) float __nv_powf(float __a, float __b);
__attribute__((device)) double __nv_powi(double __a, int __b);
__attribute__((device)) float __nv_powif(float __a, int __b);
__attribute__((device)) double __nv_rcbrt(double __a);
__attribute__((device)) float __nv_rcbrtf(float __a);
__attribute__((device)) double __nv_rcp64h(double __a);
__attribute__((device)) double __nv_remainder(double __a, double __b);
__attribute__((device)) float __nv_remainderf(float __a, float __b);
__attribute__((device)) double __nv_remquo(double __a, double __b, int *__c);
__attribute__((device)) float __nv_remquof(float __a, float __b, int *__c);
__attribute__((device)) int __nv_rhadd(int __a, int __b);
__attribute__((device)) double __nv_rhypot(double __a, double __b);
__attribute__((device)) float __nv_rhypotf(float __a, float __b);
__attribute__((device)) double __nv_rint(double __a);
__attribute__((device)) float __nv_rintf(float __a);
__attribute__((device)) double __nv_rnorm3d(double __a, double __b, double __c);
__attribute__((device)) float __nv_rnorm3df(float __a, float __b, float __c);
__attribute__((device)) double __nv_rnorm4d(double __a, double __b, double __c, double __d);
__attribute__((device)) float __nv_rnorm4df(float __a, float __b, float __c, float __d);
__attribute__((device)) float __nv_rnormf(int __a, const float *__b);
__attribute__((device)) double __nv_rnorm(int __a, const double *__b);
__attribute__((device)) double __nv_round(double __a);
__attribute__((device)) float __nv_roundf(float __a);
__attribute__((device)) double __nv_rsqrt(double __a);
__attribute__((device)) float __nv_rsqrtf(float __a);
__attribute__((device)) int __nv_sad(int __a, int __b, int __c);
__attribute__((device)) float __nv_saturatef(float __a);
__attribute__((device)) double __nv_scalbn(double __a, int __b);
__attribute__((device)) float __nv_scalbnf(float __a, int __b);
__attribute__((device)) int __nv_signbitd(double __a);
__attribute__((device)) int __nv_signbitf(float __a);
__attribute__((device)) void __nv_sincos(double __a, double *__b, double *__c);
__attribute__((device)) void __nv_sincosf(float __a, float *__b, float *__c);
__attribute__((device)) void __nv_sincospi(double __a, double *__b, double *__c);
__attribute__((device)) void __nv_sincospif(float __a, float *__b, float *__c);
__attribute__((device)) double __nv_sin(double __a);
__attribute__((device)) float __nv_sinf(float __a);
__attribute__((device)) double __nv_sinh(double __a);
__attribute__((device)) float __nv_sinhf(float __a);
__attribute__((device)) double __nv_sinpi(double __a);
__attribute__((device)) float __nv_sinpif(float __a);
__attribute__((device)) double __nv_sqrt(double __a);
__attribute__((device)) float __nv_sqrtf(float __a);
__attribute__((device)) double __nv_tan(double __a);
__attribute__((device)) float __nv_tanf(float __a);
__attribute__((device)) double __nv_tanh(double __a);
__attribute__((device)) float __nv_tanhf(float __a);
__attribute__((device)) double __nv_tgamma(double __a);
__attribute__((device)) float __nv_tgammaf(float __a);
__attribute__((device)) double __nv_trunc(double __a);
__attribute__((device)) float __nv_truncf(float __a);
__attribute__((device)) int __nv_uhadd(unsigned int __a, unsigned int __b);
__attribute__((device)) double __nv_uint2double_rn(unsigned int __i);
__attribute__((device)) float __nv_uint2float_rd(unsigned int __a);
__attribute__((device)) float __nv_uint2float_rn(unsigned int __a);
__attribute__((device)) float __nv_uint2float_ru(unsigned int __a);
__attribute__((device)) float __nv_uint2float_rz(unsigned int __a);
__attribute__((device)) float __nv_uint_as_float(unsigned int __a);
__attribute__((device)) double __nv_ull2double_rd(unsigned long long __a);
__attribute__((device)) double __nv_ull2double_rn(unsigned long long __a);
__attribute__((device)) double __nv_ull2double_ru(unsigned long long __a);
__attribute__((device)) double __nv_ull2double_rz(unsigned long long __a);
__attribute__((device)) float __nv_ull2float_rd(unsigned long long __a);
__attribute__((device)) float __nv_ull2float_rn(unsigned long long __a);
__attribute__((device)) float __nv_ull2float_ru(unsigned long long __a);
__attribute__((device)) float __nv_ull2float_rz(unsigned long long __a);
__attribute__((device)) unsigned long long __nv_ullmax(unsigned long long __a,
                                          unsigned long long __b);
__attribute__((device)) unsigned long long __nv_ullmin(unsigned long long __a,
                                          unsigned long long __b);
__attribute__((device)) unsigned int __nv_umax(unsigned int __a, unsigned int __b);
__attribute__((device)) unsigned int __nv_umin(unsigned int __a, unsigned int __b);
__attribute__((device)) unsigned int __nv_umul24(unsigned int __a, unsigned int __b);
__attribute__((device)) unsigned long long __nv_umul64hi(unsigned long long __a,
                                            unsigned long long __b);
__attribute__((device)) unsigned int __nv_umulhi(unsigned int __a, unsigned int __b);
__attribute__((device)) unsigned int __nv_urhadd(unsigned int __a, unsigned int __b);
__attribute__((device)) unsigned int __nv_usad(unsigned int __a, unsigned int __b,
                                  unsigned int __c);
__attribute__((device)) int __nv_vabs2(int __a);
__attribute__((device)) int __nv_vabs4(int __a);
__attribute__((device)) int __nv_vabsdiffs2(int __a, int __b);
__attribute__((device)) int __nv_vabsdiffs4(int __a, int __b);
__attribute__((device)) int __nv_vabsdiffu2(int __a, int __b);
__attribute__((device)) int __nv_vabsdiffu4(int __a, int __b);
__attribute__((device)) int __nv_vabsss2(int __a);
__attribute__((device)) int __nv_vabsss4(int __a);
__attribute__((device)) int __nv_vadd2(int __a, int __b);
__attribute__((device)) int __nv_vadd4(int __a, int __b);
__attribute__((device)) int __nv_vaddss2(int __a, int __b);
__attribute__((device)) int __nv_vaddss4(int __a, int __b);
__attribute__((device)) int __nv_vaddus2(int __a, int __b);
__attribute__((device)) int __nv_vaddus4(int __a, int __b);
__attribute__((device)) int __nv_vavgs2(int __a, int __b);
__attribute__((device)) int __nv_vavgs4(int __a, int __b);
__attribute__((device)) int __nv_vavgu2(int __a, int __b);
__attribute__((device)) int __nv_vavgu4(int __a, int __b);
__attribute__((device)) int __nv_vcmpeq2(int __a, int __b);
__attribute__((device)) int __nv_vcmpeq4(int __a, int __b);
__attribute__((device)) int __nv_vcmpges2(int __a, int __b);
__attribute__((device)) int __nv_vcmpges4(int __a, int __b);
__attribute__((device)) int __nv_vcmpgeu2(int __a, int __b);
__attribute__((device)) int __nv_vcmpgeu4(int __a, int __b);
__attribute__((device)) int __nv_vcmpgts2(int __a, int __b);
__attribute__((device)) int __nv_vcmpgts4(int __a, int __b);
__attribute__((device)) int __nv_vcmpgtu2(int __a, int __b);
__attribute__((device)) int __nv_vcmpgtu4(int __a, int __b);
__attribute__((device)) int __nv_vcmples2(int __a, int __b);
__attribute__((device)) int __nv_vcmples4(int __a, int __b);
__attribute__((device)) int __nv_vcmpleu2(int __a, int __b);
__attribute__((device)) int __nv_vcmpleu4(int __a, int __b);
__attribute__((device)) int __nv_vcmplts2(int __a, int __b);
__attribute__((device)) int __nv_vcmplts4(int __a, int __b);
__attribute__((device)) int __nv_vcmpltu2(int __a, int __b);
__attribute__((device)) int __nv_vcmpltu4(int __a, int __b);
__attribute__((device)) int __nv_vcmpne2(int __a, int __b);
__attribute__((device)) int __nv_vcmpne4(int __a, int __b);
__attribute__((device)) int __nv_vhaddu2(int __a, int __b);
__attribute__((device)) int __nv_vhaddu4(int __a, int __b);
__attribute__((device)) int __nv_vmaxs2(int __a, int __b);
__attribute__((device)) int __nv_vmaxs4(int __a, int __b);
__attribute__((device)) int __nv_vmaxu2(int __a, int __b);
__attribute__((device)) int __nv_vmaxu4(int __a, int __b);
__attribute__((device)) int __nv_vmins2(int __a, int __b);
__attribute__((device)) int __nv_vmins4(int __a, int __b);
__attribute__((device)) int __nv_vminu2(int __a, int __b);
__attribute__((device)) int __nv_vminu4(int __a, int __b);
__attribute__((device)) int __nv_vneg2(int __a);
__attribute__((device)) int __nv_vneg4(int __a);
__attribute__((device)) int __nv_vnegss2(int __a);
__attribute__((device)) int __nv_vnegss4(int __a);
__attribute__((device)) int __nv_vsads2(int __a, int __b);
__attribute__((device)) int __nv_vsads4(int __a, int __b);
__attribute__((device)) int __nv_vsadu2(int __a, int __b);
__attribute__((device)) int __nv_vsadu4(int __a, int __b);
__attribute__((device)) int __nv_vseteq2(int __a, int __b);
__attribute__((device)) int __nv_vseteq4(int __a, int __b);
__attribute__((device)) int __nv_vsetges2(int __a, int __b);
__attribute__((device)) int __nv_vsetges4(int __a, int __b);
__attribute__((device)) int __nv_vsetgeu2(int __a, int __b);
__attribute__((device)) int __nv_vsetgeu4(int __a, int __b);
__attribute__((device)) int __nv_vsetgts2(int __a, int __b);
__attribute__((device)) int __nv_vsetgts4(int __a, int __b);
__attribute__((device)) int __nv_vsetgtu2(int __a, int __b);
__attribute__((device)) int __nv_vsetgtu4(int __a, int __b);
__attribute__((device)) int __nv_vsetles2(int __a, int __b);
__attribute__((device)) int __nv_vsetles4(int __a, int __b);
__attribute__((device)) int __nv_vsetleu2(int __a, int __b);
__attribute__((device)) int __nv_vsetleu4(int __a, int __b);
__attribute__((device)) int __nv_vsetlts2(int __a, int __b);
__attribute__((device)) int __nv_vsetlts4(int __a, int __b);
__attribute__((device)) int __nv_vsetltu2(int __a, int __b);
__attribute__((device)) int __nv_vsetltu4(int __a, int __b);
__attribute__((device)) int __nv_vsetne2(int __a, int __b);
__attribute__((device)) int __nv_vsetne4(int __a, int __b);
__attribute__((device)) int __nv_vsub2(int __a, int __b);
__attribute__((device)) int __nv_vsub4(int __a, int __b);
__attribute__((device)) int __nv_vsubss2(int __a, int __b);
__attribute__((device)) int __nv_vsubss4(int __a, int __b);
__attribute__((device)) int __nv_vsubus2(int __a, int __b);
__attribute__((device)) int __nv_vsubus4(int __a, int __b);
__attribute__((device)) double __nv_y0(double __a);
__attribute__((device)) float __nv_y0f(float __a);
__attribute__((device)) double __nv_y1(double __a);
__attribute__((device)) float __nv_y1f(float __a);
__attribute__((device)) float __nv_ynf(int __a, float __b);
__attribute__((device)) double __nv_yn(int __a, double __b);

}
# 146 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 187 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/cuda-8.0/include/device_functions.hpp" 1 3
# 248 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
extern "C" {







static __attribute__((device)) __inline__ __attribute__((always_inline)) int __syncthreads_count(int predicate)
{
  return __nvvm_bar0_popc(predicate);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __syncthreads_and(int predicate)
{
  return __nvvm_bar0_and(predicate);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __syncthreads_or(int predicate)
{
  return __nvvm_bar0_or(predicate);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) void __threadfence_block()
{
  __nvvm_membar_cta();
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) void __threadfence()
{
  __nvvm_membar_gl();
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) void __threadfence_system()
{
  __nvvm_membar_sys();
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) int __all(int a)
{
  int result;
  asm __volatile__ ("{ \n\t"
        ".reg .pred \t%%p1; \n\t"
        ".reg .pred \t%%p2; \n\t"
        "setp.ne.u32 \t%%p1, %1, 0; \n\t"
        "vote.all.pred \t%%p2, %%p1; \n\t"
        "selp.s32 \t%0, 1, 0, %%p2; \n\t"
        "}" : "=r"(result) : "r"(a));
  return result;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __any(int a)
{
  int result;
  asm __volatile__ ("{ \n\t"
        ".reg .pred \t%%p1; \n\t"
        ".reg .pred \t%%p2; \n\t"
        "setp.ne.u32 \t%%p1, %1, 0; \n\t"
        "vote.any.pred \t%%p2, %%p1; \n\t"
        "selp.s32 \t%0, 1, 0, %%p2; \n\t"
        "}" : "=r"(result) : "r"(a));
  return result;
}

static __attribute__((device)) __inline__ __attribute__((always_inline))



int

__ballot(int a)
{
  int result;
  asm __volatile__ ("{ \n\t"
        ".reg .pred \t%%p1; \n\t"
        "setp.ne.u32 \t%%p1, %1, 0; \n\t"
        "vote.ballot.b32 \t%0, %%p1; \n\t"
        "}" : "=r"(result) : "r"(a));
  return result;
}
# 347 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
static __attribute__((device)) __inline__ __attribute__((always_inline)) void __brkpt()

{
  asm __volatile__ ("brkpt;");
}




static __attribute__((device)) __inline__ __attribute__((always_inline)) int clock()

{
  int r;
  asm __volatile__ ("mov.u32 \t%0, %%clock;" : "=r"(r));
  return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long clock64()
{
  long long z;
  asm __volatile__ ("mov.u64 \t%0, %%clock64;" : "=l"(z));
  return z;
}



static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __pm0(void)
{
  unsigned int r;
  asm("mov.u32 \t%0, %%pm0;" : "=r"(r));
  return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __pm1(void)
{
  unsigned int r;
  asm("mov.u32 \t%0, %%pm1;" : "=r"(r));
  return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __pm2(void)
{
  unsigned int r;
  asm("mov.u32 \t%0, %%pm2;" : "=r"(r));
  return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __pm3(void)
{
  unsigned int r;
  asm("mov.u32 \t%0, %%pm3;" : "=r"(r));
  return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) void __trap(void)
{
  asm __volatile__ ("trap;");
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) void* memcpy(void *dest, const void *src, size_t n)
{



  __builtin_memcpy((unsigned char *)dest, (unsigned char *)src, n);

  return dest;

}

static __attribute__((device)) __inline__ __attribute__((always_inline)) void* memset(void *dest, int c, size_t n)
{



  __builtin_memset((unsigned char *)dest, (unsigned char)c, n);

  return dest;


}






static __attribute__((device)) __inline__ __attribute__((always_inline)) int __clz(int x)
{
  return __nv_clz(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __clzll(long long x)
{
  return __nv_clzll(x);
}




static __attribute__((device)) __inline__ __attribute__((always_inline)) int __popc(int x)

{
  return __nv_popc(x);
}




static __attribute__((device)) __inline__ __attribute__((always_inline)) int __popcll(long long x)

{
  return __nv_popcll(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __byte_perm(unsigned int a,
                                                unsigned int b,
                                                unsigned int c)
{
  return __nv_byte_perm(a, b, c);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) int min(int x, int y)
{
  return __nv_min(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int umin(unsigned int x, unsigned int y)
{
  return __nv_umin(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long llmin(long long x, long long y)
{
  return __nv_llmin(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long ullmin(unsigned long long x,
                                                 unsigned long long y)
{
  return __nv_ullmin(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int max(int x, int y)
{
  return __nv_max(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int umax(unsigned int x, unsigned int y)
{
  return __nv_umax(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long llmax(long long x, long long y)
{
  return __nv_llmax(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long ullmax(unsigned long long x,
                                                 unsigned long long y)
{
  return __nv_ullmax(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __mulhi(int x, int y)
{
  return __nv_mulhi(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __umulhi(unsigned int x, unsigned int y)
{
  return __nv_umulhi(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long __mul64hi(long long x, long long y)
{
  return __nv_mul64hi(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long __umul64hi(unsigned long long x,
                                                     unsigned long long y)
{
  return __nv_umul64hi(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __mul24(int x, int y)
{
  return __nv_mul24(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __umul24(unsigned int x, unsigned int y)
{
  return __nv_umul24(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __brev(unsigned int x)
{
  return __nv_brev(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long __brevll(unsigned long long x)
{
  return __nv_brevll(x);
}




static __attribute__((device)) __inline__ __attribute__((always_inline)) int __sad(int x, int y, int z)

{
  return __nv_sad(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __usad(unsigned int x,
                                           unsigned int y,
                                           unsigned int z)
{
  return __nv_usad(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int abs(int x)
{
  return __nv_abs(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long labs(long x)
{

  return __nv_llabs((long long) x);



}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long llabs(long long x)
{
  return __nv_llabs(x);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) float floorf(float f)
{
  return __nv_floorf(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double floor(double f)
{
  return __nv_floor(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float fabsf(float f)
{
  return __nv_fabsf(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double fabs(double f)
{
  return __nv_fabs(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float fminf(float x, float y)
{
  return __nv_fminf(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float fmaxf(float x, float y)
{
  return __nv_fmaxf(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float rsqrtf(float x)
{
  return __nv_rsqrtf(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double fmin(double x, double y)
{
  return __nv_fmin(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double fmax(double x, double y)
{
  return __nv_fmax(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double rsqrt(double x)
{
  return __nv_rsqrt(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double ceil(double x)
{
  return __nv_ceil(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double trunc(double x)
{
  return __nv_trunc(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float exp2f(float x)
{
  return __nv_exp2f(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float truncf(float x)
{
  return __nv_truncf(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float ceilf(float x)
{
  return __nv_ceilf(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __saturatef(float x)
{
  return __nv_saturatef(x);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmaf_rn(float x, float y, float z)
{
  return __nv_fmaf_rn(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmaf_rz(float x, float y, float z)
{
  return __nv_fmaf_rz(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmaf_rd(float x, float y, float z)
{
  return __nv_fmaf_rd(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmaf_ru(float x, float y, float z)
{
  return __nv_fmaf_ru(x, y, z);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmaf_ieee_rn(float x, float y, float z)
{
  return __nv_fmaf_ieee_rn(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmaf_ieee_rz(float x, float y, float z)
{
  return __nv_fmaf_ieee_rz(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmaf_ieee_rd(float x, float y, float z)
{
  return __nv_fmaf_ieee_rd(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmaf_ieee_ru(float x, float y, float z)
{
  return __nv_fmaf_ieee_ru(x, y, z);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) double __fma_rn(double x, double y, double z)
{
  return __nv_fma_rn(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __fma_rz(double x, double y, double z)
{
  return __nv_fma_rz(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __fma_rd(double x, double y, double z)
{
  return __nv_fma_rd(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __fma_ru(double x, double y, double z)
{
  return __nv_fma_ru(x, y, z);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fdividef(float x, float y)
{
  return __nv_fast_fdividef(x, y);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fdiv_rn(float x, float y)
{
  return __nv_fdiv_rn(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fdiv_rz(float x, float y)
{
  return __nv_fdiv_rz(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fdiv_rd(float x, float y)
{
  return __nv_fdiv_rd(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fdiv_ru(float x, float y)
{
  return __nv_fdiv_ru(x, y);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) float __frcp_rn(float x)
{
  return __nv_frcp_rn(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __frcp_rz(float x)
{
  return __nv_frcp_rz(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __frcp_rd(float x)
{
  return __nv_frcp_rd(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __frcp_ru(float x)
{
  return __nv_frcp_ru(x);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fsqrt_rn(float x)
{
  return __nv_fsqrt_rn(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fsqrt_rz(float x)
{
  return __nv_fsqrt_rz(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fsqrt_rd(float x)
{
  return __nv_fsqrt_rd(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fsqrt_ru(float x)
{
  return __nv_fsqrt_ru(x);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ddiv_rn(double x, double y)
{
  return __nv_ddiv_rn(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ddiv_rz(double x, double y)
{
  return __nv_ddiv_rz(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ddiv_rd(double x, double y)
{
  return __nv_ddiv_rd(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ddiv_ru(double x, double y)
{
  return __nv_ddiv_ru(x, y);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) double __drcp_rn(double x)
{
  return __nv_drcp_rn(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __drcp_rz(double x)
{
  return __nv_drcp_rz(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __drcp_rd(double x)
{
  return __nv_drcp_rd(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __drcp_ru(double x)
{
  return __nv_drcp_ru(x);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dsqrt_rn(double x)
{
  return __nv_dsqrt_rn(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dsqrt_rz(double x)
{
  return __nv_dsqrt_rz(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dsqrt_rd(double x)
{
  return __nv_dsqrt_rd(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dsqrt_ru(double x)
{
  return __nv_dsqrt_ru(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float sqrtf(float x)
{
  return __nv_sqrtf(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double sqrt(double x)
{
  return __nv_sqrt(x);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dadd_rn(double x, double y)
{
  return __nv_dadd_rn(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dadd_rz(double x, double y)
{
  return __nv_dadd_rz(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dadd_rd(double x, double y)
{
  return __nv_dadd_rd(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dadd_ru(double x, double y)
{
  return __nv_dadd_ru(x, y);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dmul_rn(double x, double y)
{
  return __nv_dmul_rn(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dmul_rz(double x, double y)
{
  return __nv_dmul_rz(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dmul_rd(double x, double y)
{
  return __nv_dmul_rd(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __dmul_ru(double x, double y)
{
  return __nv_dmul_ru(x, y);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fadd_rd(float x, float y)
{
  return __nv_fadd_rd(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fadd_ru(float x, float y)
{
  return __nv_fadd_ru(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fadd_rn(float x, float y)
{
  return __nv_fadd_rn(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fadd_rz(float x, float y)
{
  return __nv_fadd_rz(x, y);
}






static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmul_rd(float x, float y)
{
  return __nv_fmul_rd(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmul_ru(float x, float y)
{
  return __nv_fmul_ru(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmul_rn(float x, float y)
{
  return __nv_fmul_rn(x, y);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fmul_rz(float x, float y)
{
  return __nv_fmul_rz(x, y);
}







static __attribute__((device)) __inline__ __attribute__((always_inline)) float __double2float_rn(double d)
{
  return __nv_double2float_rn(d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __double2float_rz(double d)
{
  return __nv_double2float_rz(d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __double2float_rd(double d)
{
  return __nv_double2float_rd(d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __double2float_ru(double d)
{
  return __nv_double2float_ru(d);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) int __double2int_rn(double d)
{
  return __nv_double2int_rn(d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __double2int_rz(double d)
{
  return __nv_double2int_rz(d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __double2int_rd(double d)
{
  return __nv_double2int_rd(d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __double2int_ru(double d)
{
  return __nv_double2int_ru(d);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __double2uint_rn(double d)
{
  return __nv_double2uint_rn(d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __double2uint_rz(double d)
{
  return __nv_double2uint_rz(d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __double2uint_rd(double d)
{
  return __nv_double2uint_rd(d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __double2uint_ru(double d)
{
  return __nv_double2uint_ru(d);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) double __int2double_rn(int i)
{
  return __nv_int2double_rn(i);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) double __uint2double_rn(unsigned int i)
{
  return __nv_uint2double_rn(i);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) int __float2int_rn(float in)
{
  return __nv_float2int_rn(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __float2int_rz(float in)
{
  return __nv_float2int_rz(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __float2int_rd(float in)
{
  return __nv_float2int_rd(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __float2int_ru(float in)
{
  return __nv_float2int_ru(in);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __float2uint_rn(float in)
{
  return __nv_float2uint_rn(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __float2uint_rz(float in)
{
  return __nv_float2uint_rz(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __float2uint_rd(float in)
{
  return __nv_float2uint_rd(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __float2uint_ru(float in)
{
  return __nv_float2uint_ru(in);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) float __int2float_rn(int in)
{
  return __nv_int2float_rn(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __int2float_rz(int in)
{
  return __nv_int2float_rz(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __int2float_rd(int in)
{
  return __nv_int2float_rd(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __int2float_ru(int in)
{
  return __nv_int2float_ru(in);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) float __uint2float_rn(unsigned int in)
{
  return __nv_uint2float_rn(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __uint2float_rz(unsigned int in)
{
  return __nv_uint2float_rz(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __uint2float_rd(unsigned int in)
{
  return __nv_uint2float_rd(in);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __uint2float_ru(unsigned int in)
{
  return __nv_uint2float_ru(in);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) double __hiloint2double(int a, int b)
{
  return __nv_hiloint2double(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __double2loint(double d)
{
  return __nv_double2loint(d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __double2hiint(double d)
{
  return __nv_double2hiint(d);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) long long __float2ll_rn(float f)
{
  return __nv_float2ll_rn(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long __float2ll_rz(float f)
{
  return __nv_float2ll_rz(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long __float2ll_rd(float f)
{
  return __nv_float2ll_rd(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long __float2ll_ru(float f)
{
  return __nv_float2ll_ru(f);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long __float2ull_rn(float f)
{
  return __nv_float2ull_rn(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long __float2ull_rz(float f)
{
  return __nv_float2ull_rz(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long __float2ull_rd(float f)
{
  return __nv_float2ull_rd(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long __float2ull_ru(float f)
{
  return __nv_float2ull_ru(f);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) long long __double2ll_rn(double f)
{
  return __nv_double2ll_rn(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long __double2ll_rz(double f)
{
  return __nv_double2ll_rz(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long __double2ll_rd(double f)
{
  return __nv_double2ll_rd(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long __double2ll_ru(double f)
{
  return __nv_double2ll_ru(f);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long __double2ull_rn(double f)
{
  return __nv_double2ull_rn(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long __double2ull_rz(double f)
{
  return __nv_double2ull_rz(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long __double2ull_rd(double f)
{
  return __nv_double2ull_rd(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long __double2ull_ru(double f)
{
  return __nv_double2ull_ru(f);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) float __ll2float_rn(long long l)
{
  return __nv_ll2float_rn(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __ll2float_rz(long long l)
{
  return __nv_ll2float_rz(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __ll2float_rd(long long l)
{
  return __nv_ll2float_rd(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __ll2float_ru(long long l)
{
  return __nv_ll2float_ru(l);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) float __ull2float_rn(unsigned long long l)
{
  return __nv_ull2float_rn(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __ull2float_rz(unsigned long long l)
{
  return __nv_ull2float_rz(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __ull2float_rd(unsigned long long l)
{
  return __nv_ull2float_rd(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __ull2float_ru(unsigned long long l)
{
  return __nv_ull2float_ru(l);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ll2double_rn(long long l)
{
  return __nv_ll2double_rn(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ll2double_rz(long long l)
{
  return __nv_ll2double_rz(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ll2double_rd(long long l)
{
  return __nv_ll2double_rd(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ll2double_ru(long long l)
{
  return __nv_ll2double_ru(l);
}


static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ull2double_rn(unsigned long long l)
{
  return __nv_ull2double_rn(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ull2double_rz(unsigned long long l)
{
  return __nv_ull2double_rz(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ull2double_rd(unsigned long long l)
{
  return __nv_ull2double_rd(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __ull2double_ru(unsigned long long l)
{
  return __nv_ull2double_ru(l);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned short __float2half_rn(float f)
{
  return __nv_float2half_rn(f);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __half2float(unsigned short h)
{
  return __nv_half2float(h);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __int_as_float(int x)
{
  return __nv_int_as_float(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __float_as_int(float x)
{
  return __nv_float_as_int(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __uint_as_float(unsigned int x)
{
  return __nv_uint_as_float(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __float_as_uint(float x)
{
  return __nv_float_as_uint(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double __longlong_as_double(long long x)
{
  return __nv_longlong_as_double(x);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long __double_as_longlong (double x)
{
  return __nv_double_as_longlong(x);
}







static __attribute__((device)) __inline__ __attribute__((always_inline)) float __sinf(float a)
{
  return __nv_fast_sinf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __cosf(float a)
{
  return __nv_fast_cosf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __log2f(float a)
{
  return __nv_fast_log2f(a);
}







static __attribute__((device)) __inline__ __attribute__((always_inline)) float __tanf(float a)
{
  return __nv_fast_tanf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) void __sincosf(float a, float *sptr, float *cptr)
{
  __nv_fast_sincosf(a, sptr, cptr);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __expf(float a)
{
  return __nv_fast_expf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __exp10f(float a)
{
  return __nv_fast_exp10f(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __log10f(float a)
{
  return __nv_fast_log10f(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __logf(float a)
{
  return __nv_fast_logf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __powf(float a, float b)
{
  return __nv_fast_powf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float fdividef(float a, float b)
{
  if (0 && !0) {
    return __nv_fast_fdividef(a, b);
  } else {
    return a / b;
  }
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double fdivide(double a, double b)
{
  return a / b;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __hadd(int a, int b)
{
  return __nv_hadd(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __rhadd(int a, int b)
{
  return __nv_rhadd(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __uhadd(unsigned int a, unsigned int b)
{
  return __nv_uhadd(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __urhadd(unsigned int a, unsigned int b)
{
  return __nv_urhadd(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fsub_rn (float a, float b)
{
  return __nv_fsub_rn(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fsub_rz (float a, float b)
{
  return __nv_fsub_rz(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fsub_rd (float a, float b)
{
  return __nv_fsub_rd(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __fsub_ru (float a, float b)
{
  return __nv_fsub_ru(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float __frsqrt_rn (float a)
{
  return __nv_frsqrt_rn(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __ffs(int a)
{
  return __nv_ffs(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __ffsll(long long int a)
{
  return __nv_ffsll(a);
}






static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicAdd(int *p, int val)
{
  return __nvvm_atom_add_gen_i((volatile int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicAdd_block(int *p, int val)
{
  return __nvvm_atom_cta_add_gen_i((volatile int *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicAdd_system(int *p, int val)
{
  return __nvvm_atom_sys_add_gen_i((volatile int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicAdd(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_add_gen_i((volatile int *)p, (int)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicAdd_block(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_cta_add_gen_i((volatile int *)p, (int)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicAdd_system(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_sys_add_gen_i((volatile int *)p, (int)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicAdd(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_add_gen_ll((volatile long long *)p, (long long)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicAdd_block(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_cta_add_gen_ll((volatile long long *)p, (long long)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicAdd_system(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_sys_add_gen_ll((volatile long long *)p, (long long)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
float __fAtomicAdd(float *p, float val)
{
  return __nvvm_atom_add_gen_f((volatile float *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
float __fAtomicAdd_block(float *p, float val)
{
  return __nvvm_atom_cta_add_gen_f((volatile float *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
float __fAtomicAdd_system(float *p, float val)
{
  return __nvvm_atom_sys_add_gen_f((volatile float *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
double __dAtomicAdd(double *p, double val)
{
  return __nvvm_atom_add_gen_d((volatile double *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
double __dAtomicAdd_block(double *p, double val)
{
  return __nvvm_atom_cta_add_gen_d((volatile double *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
double __dAtomicAdd_system(double *p, double val)
{
  return __nvvm_atom_sys_add_gen_d((volatile double *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicExch(int *p, int val)
{
  return __nvvm_atom_xchg_gen_i((volatile int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicExch_block(int *p, int val)
{
  return __nvvm_atom_cta_xchg_gen_i((volatile int *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicExch_system(int *p, int val)
{
  return __nvvm_atom_sys_xchg_gen_i((volatile int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicExch(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_xchg_gen_i((volatile int *)p, (int)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicExch_block(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_cta_xchg_gen_i((volatile int *)p, (int)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicExch_system(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_sys_xchg_gen_i((volatile int *)p, (int)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicExch(unsigned long long *p,
                                   unsigned long long val)
{
  return __nvvm_atom_xchg_gen_ll((volatile long long *)p, (long long)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicExch_block(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_cta_xchg_gen_ll((volatile long long *)p, (long long)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicExch_system(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_sys_xchg_gen_ll((volatile long long *)p, (long long)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
float __fAtomicExch(float *p, float val)
{
  int old = __nvvm_atom_xchg_gen_i((volatile int *)p, __float_as_int(val));
  return __int_as_float(old);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
float __fAtomicExch_block(float *p, float val)
{
  int old = __nvvm_atom_cta_xchg_gen_i((volatile int *)p, __float_as_int(val));
  return __int_as_float(old);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
float __fAtomicExch_system(float *p, float val)
{
  int old = __nvvm_atom_sys_xchg_gen_i((volatile int *)p, __float_as_int(val));
  return __int_as_float(old);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicMin(int *p, int val)
{
  return __nvvm_atom_min_gen_i((volatile int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicMin_block(int *p, int val)
{
  return __nvvm_atom_cta_min_gen_i((volatile int *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicMin_system(int *p, int val)
{
  return __nvvm_atom_sys_min_gen_i((volatile int *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
long long __illAtomicMin(long long *p, long long val)
{
  return __nvvm_atom_min_gen_ll((volatile long long *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
long long __illAtomicMin_block(long long *p, long long val)
{
  return __nvvm_atom_cta_min_gen_ll((volatile long long *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
long long __illAtomicMin_system(long long *p, long long val)
{
  return __nvvm_atom_sys_min_gen_ll((volatile long long *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicMin(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_min_gen_ui((volatile unsigned int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicMin_block(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_cta_min_gen_ui((volatile unsigned int *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicMin_system(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_sys_min_gen_ui((volatile unsigned int *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicMin(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_min_gen_ull((volatile unsigned long long *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicMin_block(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_cta_min_gen_ull((volatile unsigned long long *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicMin_system(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_sys_min_gen_ull((volatile unsigned long long *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicMax(int *p, int val)
{
  return __nvvm_atom_max_gen_i((volatile int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicMax_block(int *p, int val)
{
  return __nvvm_atom_cta_max_gen_i((volatile int *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicMax_system(int *p, int val)
{
  return __nvvm_atom_sys_max_gen_i((volatile int *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
long long __illAtomicMax(long long *p, long long val)
{
  return __nvvm_atom_max_gen_ll((volatile long long *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
long long __illAtomicMax_block(long long *p, long long val)
{
  return __nvvm_atom_cta_max_gen_ll((volatile long long *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
long long __illAtomicMax_system(long long *p, long long val)
{
  return __nvvm_atom_sys_max_gen_ll((volatile long long *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicMax(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_max_gen_ui((unsigned int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicMax_block(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_cta_max_gen_ui((volatile unsigned int *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicMax_system(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_sys_max_gen_ui((volatile unsigned int *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicMax(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_max_gen_ull((volatile unsigned long long *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicMax_block(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_cta_max_gen_ull((volatile unsigned long long *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicMax_system(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_sys_max_gen_ull((volatile unsigned long long *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicInc(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_inc_gen_ui((unsigned int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicInc_block(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_cta_inc_gen_ui((volatile unsigned int *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicInc_system(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_sys_inc_gen_ui((volatile unsigned int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicDec(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_dec_gen_ui((unsigned int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicDec_block(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_cta_dec_gen_ui((volatile unsigned int *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicDec_system(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_sys_dec_gen_ui((volatile unsigned int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicCAS(int *p, int compare, int val)
{
  return __nvvm_atom_cas_gen_i((int *)p, compare, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicCAS_block(int *p, int compare, int val)
{
  return __nvvm_atom_cta_cas_gen_i((int *)p, compare, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicCAS_system(int *p, int compare, int val)
{
  return __nvvm_atom_sys_cas_gen_i((int *)p, compare, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicCAS(unsigned int *p, unsigned int compare,
                          unsigned int val)
{
  return (unsigned int)__nvvm_atom_cas_gen_i((volatile int *)p,
                                             (int)compare,
                                             (int)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicCAS_block(unsigned int *p, unsigned int compare,
                                unsigned int val)
{
  return (unsigned int)__nvvm_atom_cta_cas_gen_i((volatile int *)p,
                                                 (int)compare,
                                                 (int)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicCAS_system(unsigned int *p, unsigned int compare,
                                 unsigned int val)
{
  return (unsigned int)__nvvm_atom_sys_cas_gen_i((volatile int *)p,
                                                 (int)compare,
                                                 (int)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long int __ullAtomicCAS(unsigned long long int *p,
                                      unsigned long long int compare,
                                      unsigned long long int val)
{
  return
    (unsigned long long int)__nvvm_atom_cas_gen_ll((volatile long long int *)p,
                                                   (long long int)compare,
                                                   (long long int)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long int __ullAtomicCAS_block(unsigned long long int *p,
                                            unsigned long long int compare,
                                            unsigned long long int val)
{
  return
    (unsigned long long int)__nvvm_atom_cta_cas_gen_ll((volatile long long int *)p,
                                                       (long long int)compare,
                                                       (long long int)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long int __ullAtomicCAS_system(unsigned long long int *p,
                                             unsigned long long int compare,
                                             unsigned long long int val)
{
  return
    (unsigned long long int)__nvvm_atom_sys_cas_gen_ll((volatile long long int *)p,
                                                       (long long int)compare,
                                                       (long long int)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicAnd(int *p, int val)
{
  return __nvvm_atom_and_gen_i((volatile int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicAnd_block(int *p, int val)
{
  return __nvvm_atom_cta_and_gen_i((volatile int *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicAnd_system(int *p, int val)
{
  return __nvvm_atom_sys_and_gen_i((volatile int *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
long long int __llAtomicAnd(long long int *p, long long int val)
{
  return __nvvm_atom_and_gen_ll((volatile long long int *)p, (long long)val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
long long int __llAtomicAnd_block(long long int *p, long long int val)
{
  return __nvvm_atom_cta_and_gen_ll((volatile long long int *)p, (long long)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
long long int __llAtomicAnd_system(long long int *p, long long int val)
{
  return __nvvm_atom_sys_and_gen_ll((volatile long long int *)p, (long long)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicAnd(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_and_gen_i((volatile int *)p, (int)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicAnd_block(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_cta_and_gen_i((volatile int *)p, (int)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicAnd_system(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_sys_and_gen_i((volatile int *)p, (int)val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long int __ullAtomicAnd(unsigned long long int *p,
                                      unsigned long long int val)
{
  return __nvvm_atom_and_gen_ll((volatile long long int *)p, (long long)val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicAnd_block(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_cta_and_gen_ll((volatile long long *)p, (long long)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicAnd_system(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_sys_and_gen_ll((volatile long long *)p, (long long)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicOr(int *p, int val)
{
  return __nvvm_atom_or_gen_i((volatile int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicOr_block(int *p, int val)
{
  return __nvvm_atom_cta_or_gen_i((volatile int *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicOr_system(int *p, int val)
{
  return __nvvm_atom_sys_or_gen_i((volatile int *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
long long int __llAtomicOr(long long int *p, long long int val)
{
  return __nvvm_atom_or_gen_ll((volatile long long int *)p, (long long)val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
long long int __llAtomicOr_block(long long int *p, long long int val)
{
  return __nvvm_atom_cta_or_gen_ll((volatile long long int *)p, (long long)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
long long int __llAtomicOr_system(long long int *p, long long int val)
{
  return __nvvm_atom_sys_or_gen_ll((volatile long long int *)p, (long long)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicOr(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_or_gen_i((volatile int *)p, (int)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicOr_block(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_cta_or_gen_i((volatile int *)p, (int)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicOr_system(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_sys_or_gen_i((volatile int *)p, (int)val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long int __ullAtomicOr(unsigned long long int *p,
                                     unsigned long long int val)
{
  return __nvvm_atom_or_gen_ll((volatile long long int *)p, (long long)val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicOr_block(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_cta_or_gen_ll((volatile long long *)p, (long long)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicOr_system(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_sys_or_gen_ll((volatile long long *)p, (long long)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicXor(int *p, int val)
{
  return __nvvm_atom_xor_gen_i((volatile int *)p, val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicXor_block(int *p, int val)
{
  return __nvvm_atom_cta_xor_gen_i((volatile int *)p, val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
int __iAtomicXor_system(int *p, int val)
{
  return __nvvm_atom_sys_xor_gen_i((volatile int *)p, val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
long long int __llAtomicXor(long long int *p, long long int val)
{
  return __nvvm_atom_xor_gen_ll((volatile long long int *)p, (long long)val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
long long int __llAtomicXor_block(long long int *p, long long int val)
{
  return __nvvm_atom_cta_xor_gen_ll((volatile long long int *)p, (long long)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
long long int __llAtomicXor_system(long long int *p, long long int val)
{
  return __nvvm_atom_sys_xor_gen_ll((volatile long long int *)p, (long long)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicXor(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_xor_gen_i((volatile int *)p, (int)val);
}


static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicXor_block(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_cta_xor_gen_i((volatile int *)p, (int)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int __uAtomicXor_system(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_sys_xor_gen_i((volatile int *)p, (int)val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long int __ullAtomicXor(unsigned long long int *p,
                                      unsigned long long int val)
{
  return __nvvm_atom_xor_gen_ll((volatile long long int *)p, (long long)val);
}



static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicXor_block(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_cta_xor_gen_ll((volatile long long *)p, (long long)val);
}

static __attribute__((device)) __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicXor_system(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_sys_xor_gen_ll((volatile long long *)p, (long long)val);
}
# 2277 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vabs2(unsigned int a)
{
    unsigned int r;

    unsigned int b = 0, c = 0;
    asm ("vabsdiff2.s32.s32.s32 %0,%1,%2,%3;" : "=r"(r) :"r"(a),"r"(b),"r"(c));
# 2295 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vabsss2(unsigned int a)
{
    unsigned int r;

    unsigned int b = 0, c = 0;
    asm("vabsdiff2.s32.s32.s32.sat %0,%1,%2,%3;":"=r"(r):"r"(a),"r"(b),"r"(c));
# 2319 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vadd2(unsigned int a, unsigned int b)
{
    unsigned int s, t;

    s = 0;
    asm ("vadd2.u32.u32.u32 %0,%1,%2,%3;" : "=r"(t) : "r"(a), "r"(b), "r"(s));







    return t;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vaddss2 (unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vadd2.s32.s32.s32.sat %0,%1,%2,%3;" : "=r"(r):"r"(a),"r"(b),"r"(c));
# 2359 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vaddus2 (unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vadd2.u32.u32.u32.sat %0,%1,%2,%3;" : "=r"(r):"r"(a),"r"(b),"r"(c));
# 2387 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vavgs2(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vavrg2.s32.s32.s32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 2431 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vavgu2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vavrg2.u32.u32.u32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 2449 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vhaddu2(unsigned int a, unsigned int b)
{


    unsigned int r, s;
    s = a ^ b;
    r = a & b;
    s = s & 0xfffefffe;
    s = s >> 1;
    r = r + s;
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpeq2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.eq %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 16;
    r = c - r;
# 2483 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpges2(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset2.s32.s32.ge %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 16;
    r = c - r;
# 2510 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpgeu2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.ge %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 16;
    r = c - r;





    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpgts2(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset2.s32.s32.gt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 16;
    r = c - r;
# 2553 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpgtu2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.gt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 16;
    r = c - r;





    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmples2(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset2.s32.s32.le %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 16;
    r = c - r;
# 2596 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpleu2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.le %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 16;
    r = c - r;





    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmplts2(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset2.s32.s32.lt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 16;
    r = c - r;
# 2639 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpltu2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.lt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 16;
    r = c - r;





    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpne2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.ne %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 16;
    r = c - r;
# 2675 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vabsdiffu2(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vabsdiff2.u32.u32.u32 %0,%1,%2,%3;" : "=r"(r) :"r"(a),"r"(b),"r"(s));
# 2698 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vmaxs2(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vmax2.s32.s32.s32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(s));
# 2717 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vmaxu2(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vmax2.u32.u32.u32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(s));
# 2736 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vmins2(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vmin2.s32.s32.s32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(s));
# 2755 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vminu2(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vmin2.u32.u32.u32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(s));
# 2774 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vseteq2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.eq %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 2793 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetges2(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset2.s32.s32.ge %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 2819 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetgeu2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.ge %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetgts2(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset2.s32.s32.gt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 2860 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetgtu2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.gt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetles2(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset2.s32.s32.le %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 2901 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetleu2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.le %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetlts2(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset2.s32.s32.lt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 2942 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetltu2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.lt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetne2(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset2.u32.u32.ne %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 2976 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsadu2(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm("vabsdiff2.u32.u32.u32.add %0,%1,%2,%3;":"=r"(r):"r"(a),"r"(b),"r"(s));
# 3004 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsub2(unsigned int a, unsigned int b)
{
    unsigned int s, t;

    s = 0;
    asm ("vsub2.u32.u32.u32 %0,%1,%2,%3;" : "=r"(t) : "r"(a), "r"(b), "r"(s));







    return t;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsubss2 (unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vsub2.s32.s32.s32.sat %0,%1,%2,%3;" : "=r"(r):"r"(a),"r"(b),"r"(c));
# 3044 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsubus2 (unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vsub2.u32.u32.u32.sat %0,%1,%2,%3;" : "=r"(r):"r"(a),"r"(b),"r"(c));
# 3072 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vneg2(unsigned int a)
{
    return __vsub2 (0, a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vnegss2(unsigned int a)
{
    return __vsubss2(0,a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vabsdiffs2(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vabsdiff2.s32.s32.s32 %0,%1,%2,%3;" : "=r"(r) :"r"(a),"r"(b),"r"(s));







    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsads2(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm("vabsdiff2.s32.s32.s32.add %0,%1,%2,%3;":"=r"(r):"r"(a),"r"(b),"r"(s));




    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vabs4(unsigned int a)
{
    unsigned int r;

    unsigned int b = 0, c = 0;
    asm ("vabsdiff4.s32.s32.s32 %0,%1,%2,%3;" : "=r"(r) :"r"(a),"r"(b),"r"(c));
# 3132 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vabsss4(unsigned int a)
{
    unsigned int r;

    unsigned int b = 0, c = 0;
    asm("vabsdiff4.s32.s32.s32.sat %0,%1,%2,%3;":"=r"(r):"r"(a),"r"(b),"r"(c));
# 3156 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vadd4(unsigned int a, unsigned int b)
{

    unsigned int r, c = 0;
    asm ("vadd4.u32.u32.u32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 3173 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vaddss4 (unsigned int a, unsigned int b)
{

    unsigned int r, c = 0;
    asm ("vadd4.sat.s32.s32.s32 %0,%1,%2,%3;" : "=r"(r):"r"(a),"r"(b),"r"(c));
# 3239 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vaddus4 (unsigned int a, unsigned int b)
{

    unsigned int r, c = 0;
    asm ("vadd4.u32.u32.u32.sat %0,%1,%2,%3;" : "=r"(r):"r"(a),"r"(b),"r"(c));
# 3299 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vavgs4(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vavrg4.s32.s32.s32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 3343 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vavgu4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vavrg4.u32.u32.u32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 3361 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vhaddu4(unsigned int a, unsigned int b)
{


    unsigned int r, s;
    s = a ^ b;
    r = a & b;
    s = s & 0xfefefefe;
    s = s >> 1;
    s = r + s;
    return s;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpeq4(unsigned int a, unsigned int b)
{
    unsigned int c, r;

    r = 0;
    asm ("vset4.u32.u32.eq %0,%1,%2,%3;" : "=r"(c) : "r"(a), "r"(b), "r"(r));
    r = c << 8;
    r = r - c;
# 3395 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpges4(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset4.s32.s32.ge %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 8;
    r = c - r;
# 3424 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpgeu4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset4.u32.u32.ge %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 8;
    r = c - r;





    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpgts4(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset4.s32.s32.gt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 8;
    r = c - r;
# 3472 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpgtu4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset4.u32.u32.gt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 8;
    r = c - r;





    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmples4(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset4.s32.s32.le %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 8;
    r = c - r;
# 3520 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpleu4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset4.u32.u32.le %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 8;
    r = c - r;





    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmplts4(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset4.s32.s32.lt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 8;
    r = c - r;
# 3567 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpltu4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset4.u32.u32.lt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 8;
    r = c - r;





    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vcmpne4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset4.u32.u32.ne %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
    c = r << 8;
    r = c - r;
# 3603 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vabsdiffu4(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vabsdiff4.u32.u32.u32 %0,%1,%2,%3;" : "=r"(r) :"r"(a),"r"(b),"r"(s));







    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vmaxs4(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vmax4.s32.s32.s32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(s));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vmaxu4(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vmax4.u32.u32.u32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(s));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vmins4(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vmin4.s32.s32.s32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(s));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vminu4(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vmin4.u32.u32.u32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(s));






    return r;
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vseteq4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset4.u32.u32.eq %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 3697 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetles4(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset4.s32.s32.le %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 3728 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetleu4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset4.u32.u32.le %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetlts4(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset4.s32.s32.lt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 3773 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetltu4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset4.u32.u32.lt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetges4(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset4.s32.s32.ge %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 3816 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetgeu4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset4.u32.u32.ge %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetgts4(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vset4.s32.s32.gt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 3862 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetgtu4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset4.u32.u32.gt %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsetne4(unsigned int a, unsigned int b)
{
    unsigned int r, c;

    c = 0;
    asm ("vset4.u32.u32.ne %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 3896 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsadu4(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm("vabsdiff4.u32.u32.u32.add %0,%1,%2,%3;":"=r"(r):"r"(a),"r"(b),"r"(s));






    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsub4(unsigned int a, unsigned int b)
{

    unsigned int r, c = 0;
    asm ("vsub4.u32.u32.u32 %0,%1,%2,%3;" : "=r"(r) : "r"(a), "r"(b), "r"(c));
# 3928 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsubss4(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vsub4.s32.s32.s32.sat %0,%1,%2,%3;" : "=r"(r) :"r"(a),"r"(b),"r"(c));
# 3995 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsubus4(unsigned int a, unsigned int b)
{
    unsigned int r;

    unsigned int c = 0;
    asm ("vsub4.u32.u32.u32.sat %0,%1,%2,%3;" : "=r"(r) :"r"(a),"r"(b),"r"(c));
# 4050 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vneg4(unsigned int a)
{
    return __vsub4 (0, a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vnegss4(unsigned int a)
{
    unsigned int r;

    unsigned int s = 0;
    asm ("vsub4.s32.s32.s32.sat %0,%1,%2,%3;" : "=r"(r) :"r"(s),"r"(a),"r"(s));
# 4078 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vabsdiffs4(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm ("vabsdiff4.s32.s32.s32 %0,%1,%2,%3;" : "=r"(r) :"r"(a),"r"(b),"r"(s));







    return r;
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int __vsads4(unsigned int a, unsigned int b)
{
    unsigned int r, s;

    s = 0;
    asm("vabsdiff4.s32.s32.s32.add %0,%1,%2,%3;":"=r"(r):"r"(a),"r"(b),"r"(s));






    return r;
}
# 4313 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
}
# 188 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 209 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/cuda-8.0/include/math_functions.hpp" 1 3
# 1095 "/usr/local/cuda-8.0/include/math_functions.hpp" 3
# 1 "/usr/local/cuda-8.0/include/math_constants.h" 1 3
# 1096 "/usr/local/cuda-8.0/include/math_functions.hpp" 2 3








# 1 "/usr/local/cuda-8.0/include/device_functions_decls.h" 1 3
# 1105 "/usr/local/cuda-8.0/include/math_functions.hpp" 2 3


# 1 "/usr/local/cuda-8.0/include/device_functions.h" 1 3
# 1108 "/usr/local/cuda-8.0/include/math_functions.hpp" 2 3
# 1135 "/usr/local/cuda-8.0/include/math_functions.hpp" 3
static __attribute__((device)) __inline__ __attribute__((always_inline)) float rintf(float a)
{
  return __nv_rintf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long int lrintf(float a)
{

  return (long int)__float2ll_rn(a);



}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long int llrintf(float a)
{
  return __nv_llrintf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float nearbyintf(float a)
{
  return __nv_nearbyintf(a);
}







static __attribute__((device)) __inline__ __attribute__((always_inline)) int __signbitf(float a)
{
  return __nv_signbitf(a);
}
# 1189 "/usr/local/cuda-8.0/include/math_functions.hpp" 3
static __attribute__((device)) __inline__ __attribute__((always_inline)) float copysignf(float a, float b)
{
  return __nv_copysignf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __finitef(float a)
{
  return __nv_finitef(a);
}
# 1208 "/usr/local/cuda-8.0/include/math_functions.hpp" 3
static __attribute__((device)) __inline__ __attribute__((always_inline)) int __isinff(float a)
{
  return __nv_isinff(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __isnanf(float a)
{
  return __nv_isnanf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float nextafterf(float a, float b)
{
  return __nv_nextafterf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float nanf(const char *tagp)
{
  return __nv_nanf((const signed char *) tagp);
}







static __attribute__((device)) __inline__ __attribute__((always_inline)) float sinf(float a)
{
  if (0) {
    return __nv_fast_sinf(a);
  } else {
    return __nv_sinf(a);
  }
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float cosf(float a)
{
  if (0) {
    return __nv_fast_cosf(a);
  } else {
    return __nv_cosf(a);
  }
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) void sincosf(float a, float *sptr, float *cptr)
{
  if (0) {
    __nv_fast_sincosf(a, sptr, cptr);
  } else {
    __nv_sincosf(a, sptr, cptr);
  }
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float sinpif(float a)
{
  return __nv_sinpif(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float cospif(float a)
{
  return __nv_cospif(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) void sincospif(float a, float *sptr, float *cptr)
{
  __nv_sincospif(a, sptr, cptr);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float tanf(float a)
{
  if (0) {
    return __nv_fast_tanf(a);
  } else {
    return __nv_tanf(a);
  }
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float log2f(float a)
{
  if (0) {
    return __nv_fast_log2f(a);
  } else {
    return __nv_log2f(a);
  }
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float expf(float a)
{
  if (0) {
    return __nv_fast_expf(a);
  } else {
    return __nv_expf(a);
  }
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float exp10f(float a)
{
  if (0) {
    return __nv_fast_exp10f(a);
  } else {
    return __nv_exp10f(a);
  }
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float coshf(float a)
{
  return __nv_coshf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float sinhf(float a)
{
  return __nv_sinhf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float tanhf(float a)
{
  return __nv_tanhf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float atan2f(float a, float b)
{
  return __nv_atan2f(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float atanf(float a)
{
  return __nv_atanf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float asinf(float a)
{
  return __nv_asinf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float acosf(float a)
{
  return __nv_acosf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float logf(float a)
{
  if (0) {
    return __nv_fast_logf(a);
  } else {
    return __nv_logf(a);
  }
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float log10f(float a)
{
  if (0) {
    return __nv_fast_log10f(a);
  } else {
    return __nv_log10f(a);
  }
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float log1pf(float a)
{
  return __nv_log1pf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float acoshf(float a)
{
  return __nv_acoshf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float asinhf(float a)
{
  return __nv_asinhf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float atanhf(float a)
{
  return __nv_atanhf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float expm1f(float a)
{
  return __nv_expm1f(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float hypotf(float a, float b)
{
  return __nv_hypotf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float rhypotf(float a, float b)
{
  return __nv_rhypotf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float rnormf(int dim, float const * a)
{
  return __nv_rnormf(dim, a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float normf(int dim, float const * a)
{
  return __nv_normf(dim, a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float norm3df(float a, float b, float c)
{
  return __nv_norm3df(a, b, c);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float rnorm3df(float a, float b, float c)
{
  return __nv_rnorm3df(a, b, c);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float norm4df(float a, float b, float c, float d)
{
  return __nv_norm4df(a, b, c, d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float rnorm4df(float a, float b, float c, float d)
{
  return __nv_rnorm4df(a, b, c, d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float cbrtf(float a)
{
  return __nv_cbrtf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float rcbrtf(float a)
{
  return __nv_rcbrtf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float j0f(float a)
{
  return __nv_j0f(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float j1f(float a)
{
  return __nv_j1f(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float y0f(float a)
{
  return __nv_y0f(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float y1f(float a)
{
  return __nv_y1f(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float ynf(int n, float a)
{
  return __nv_ynf(n, a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float jnf(int n, float a)
{
  return __nv_jnf(n, a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float cyl_bessel_i0f(float a)
{
  return __nv_cyl_bessel_i0f(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float cyl_bessel_i1f(float a)
{
  return __nv_cyl_bessel_i1f(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float erff(float a)
{
  return __nv_erff(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float erfinvf(float a)
{
  return __nv_erfinvf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float erfcf(float a)
{
  return __nv_erfcf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float erfcxf(float a)
{
  return __nv_erfcxf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float erfcinvf(float a)
{
  return __nv_erfcinvf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float normcdfinvf(float a)
{
  return __nv_normcdfinvf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float normcdff(float a)
{
  return __nv_normcdff(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float lgammaf(float a)
{
  return __nv_lgammaf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float ldexpf(float a, int b)
{
  return __nv_ldexpf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float scalbnf(float a, int b)
{
  return __nv_scalbnf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float scalblnf(float a, long int b)
{
  int t;
  if (b > 2147483647L) {
    t = 2147483647;
  } else if (b < (-2147483647 - 1)) {
    t = (-2147483647 - 1);
  } else {
    t = (int)b;
  }
  return scalbnf(a, t);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float frexpf(float a, int *b)
{
  return __nv_frexpf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float modff(float a, float *b)
{
  return __nv_modff(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float fmodf(float a, float b)
{
  return __nv_fmodf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float remainderf(float a, float b)
{
  return __nv_remainderf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float remquof(float a, float b, int* quo)
{
  return __nv_remquof(a, b, quo);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float fmaf(float a, float b, float c)
{
  return __nv_fmaf(a, b, c);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float powif(float a, int b)
{
  return __nv_powif(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double powi(double a, int b)
{
  return __nv_powi(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float powf(float a, float b)
{
  if (0) {
    return __nv_fast_powf(a, b);
  } else {
    return __nv_powf(a, b);
  }
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float tgammaf(float a)
{
  return __nv_tgammaf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float roundf(float a)
{
  return __nv_roundf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long int llroundf(float a)
{
  return __nv_llroundf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long int lroundf(float a)
{

  return (long int)llroundf(a);



}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float fdimf(float a, float b)
{
  return __nv_fdimf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int ilogbf(float a)
{
  return __nv_ilogbf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) float logbf(float a)
{
  return __nv_logbf(a);
}
# 210 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3





# 1 "/usr/local/cuda-8.0/include/math_functions_dbl_ptx3.hpp" 1 3
# 71 "/usr/local/cuda-8.0/include/math_functions_dbl_ptx3.hpp" 3
static __attribute__((device)) __inline__ __attribute__((always_inline)) double rint(double a)
{
  return __nv_rint(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long int lrint(double a)
{

  return (long int)__double2ll_rn(a);



}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long int llrint(double a)
{
  return __nv_llrint(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double nearbyint(double a)
{
  return __nv_nearbyint(a);
}







static __attribute__((device)) __inline__ __attribute__((always_inline)) int __signbitd(double a)
{
  return __nv_signbitd(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __isfinited(double a)
{
  return __nv_isfinited(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __isinfd(double a)
{
  return __nv_isinfd(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __isnand(double a)
{
  return __nv_isnand(a);
}
# 145 "/usr/local/cuda-8.0/include/math_functions_dbl_ptx3.hpp" 3
static __attribute__((device)) __inline__ __attribute__((always_inline)) int __signbit(double a)
{
  return __signbitd(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __signbitl( double a)
{
  return __signbit((double)a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __finite(double a)
{
  return __isfinited(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __finitel( double a)
{
  return __finite((double)a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __isinf(double a)
{
  return __isinfd(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __isinfl( double a)
{
  return __isinf((double)a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __isnan(double a)
{
  return __isnand(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int __isnanl( double a)
{
  return __isnan((double)a);
}



static __attribute__((device)) __inline__ __attribute__((always_inline)) double copysign(double a, double b)
{
  return __nv_copysign(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) void sincos(double a, double *sptr, double *cptr)
{
  __nv_sincos(a, sptr, cptr);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) void sincospi(double a, double *sptr, double *cptr)
{
  __nv_sincospi(a, sptr, cptr);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double sin(double a)
{
  return __nv_sin(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double cos(double a)
{
  return __nv_cos(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double sinpi(double a)
{
  return __nv_sinpi(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double cospi(double a)
{
  return __nv_cospi(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double tan(double a)
{
  return __nv_tan(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double log(double a)
{
  return __nv_log(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double log2(double a)
{
  return __nv_log2(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double log10(double a)
{
  return __nv_log10(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double log1p(double a)
{
  return __nv_log1p(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double exp(double a)
{
  return __nv_exp(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double exp2(double a)
{
  return __nv_exp2(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double exp10(double a)
{
  return __nv_exp10(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double expm1(double a)
{
  return __nv_expm1(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double cosh(double a)
{
  return __nv_cosh(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double sinh(double a)
{
  return __nv_sinh(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double tanh(double a)
{
  return __nv_tanh(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double atan2(double a, double b)
{
  return __nv_atan2(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double atan(double a)
{
  return __nv_atan(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double asin(double a)
{
  return __nv_asin(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double acos(double a)
{
  return __nv_acos(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double acosh(double a)
{
  return __nv_acosh(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double asinh(double a)
{
  return __nv_asinh(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double atanh(double a)
{
  return __nv_atanh(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double hypot(double a, double b)
{
  return __nv_hypot(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double rhypot(double a, double b)
{
  return __nv_rhypot(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double norm3d(double a, double b, double c)
{
  return __nv_norm3d(a, b, c);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double rnorm3d(double a, double b, double c)
{
  return __nv_rnorm3d(a, b, c);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double norm4d(double a, double b, double c, double d)
{
  return __nv_norm4d(a, b, c, d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double rnorm4d(double a, double b, double c, double d)
{
  return __nv_rnorm4d(a, b, c, d);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double norm(int dim, double const * t)
{
  return __nv_norm(dim, t);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double rnorm(int dim, double const * t)
{
  return __nv_rnorm(dim, t);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double cbrt(double a)
{
  return __nv_cbrt(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double rcbrt(double a)
{
  return __nv_rcbrt(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double pow(double a, double b)
{
  return __nv_pow(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double j0(double a)
{
  return __nv_j0(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double j1(double a)
{
  return __nv_j1(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double y0(double a)
{
  return __nv_y0(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double y1(double a)
{
  return __nv_y1(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double yn(int n, double a)
{
  return __nv_yn(n, a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double jn(int n, double a)
{
  return __nv_jn(n, a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double cyl_bessel_i0(double a)
{
  return __nv_cyl_bessel_i0(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double cyl_bessel_i1(double a)
{
  return __nv_cyl_bessel_i1(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double erf(double a)
{
  return __nv_erf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double erfinv(double a)
{
  return __nv_erfinv(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double erfcinv(double a)
{
  return __nv_erfcinv(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double normcdfinv(double a)
{
  return __nv_normcdfinv(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double erfc(double a)
{
  return __nv_erfc(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double erfcx(double a)
{
  return __nv_erfcx(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double normcdf(double a)
{
  return __nv_normcdf(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double tgamma(double a)
{
  return __nv_tgamma(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double lgamma(double a)
{
  return __nv_lgamma(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double ldexp(double a, int b)
{
  return __nv_ldexp(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double scalbn(double a, int b)
{
  return __nv_scalbn(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double scalbln(double a, long int b)
{


  if (b < -2147483648L) b = -2147483648L;
  if (b > 2147483647L) b = 2147483647L;

  return scalbn(a, (int)b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double frexp(double a, int *b)
{
  return __nv_frexp(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double modf(double a, double *b)
{
  return __nv_modf(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double fmod(double a, double b)
{
  return __nv_fmod(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double remainder(double a, double b)
{
  return __nv_remainder(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double remquo(double a, double b, int *c)
{
  return __nv_remquo(a, b, c);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double nextafter(double a, double b)
{
  return __nv_nextafter(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double nan(const char *tagp)
{
  return __nv_nan((const signed char *) tagp);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double round(double a)
{
  return __nv_round(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long long int llround(double a)
{
  return __nv_llround(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) long int lround(double a)
{

  return (long int)llround(a);



}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double fdim(double a, double b)
{
  return __nv_fdim(a, b);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) int ilogb(double a)
{
  return __nv_ilogb(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double logb(double a)
{
  return __nv_logb(a);
}

static __attribute__((device)) __inline__ __attribute__((always_inline)) double fma(double a, double b, double c)
{
  return __nv_fma(a, b, c);
}
# 216 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3








# 1 "/usr/local/cuda-8.0/include/math_functions.hpp" 1 3
# 1674 "/usr/local/cuda-8.0/include/math_functions.hpp" 3
# 1 "/usr/local/cuda-8.0/include/crt/func_macro.h" 1 3
# 1675 "/usr/local/cuda-8.0/include/math_functions.hpp" 2 3
# 3420 "/usr/local/cuda-8.0/include/math_functions.hpp" 3
inline double rsqrt(double a)
{
  return 1.0 / sqrt(a);
}

inline double rcbrt(double a)
{
  double s, t;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return 1.0 / a;
  }
  s = fabs(a);
  t = exp2(-3.3333333333333333e-1 * log2(s));
  t = ((t*t) * (-s*t) + 1.0) * (3.3333333333333333e-1*t) + t;



  if (__signbit(a))

  {
    t = -t;
  }
  return t;
}

inline double sinpi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return sin (a);
  }
  if (a == floor(a)) {
    return ((a / 1.0e308) / 1.0e308) / 1.0e308;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  return a;
}

inline double cospi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (__isinf(a)) {
    return cos (a);
  }
  if (fabs(a) > 9.0071992547409920e+015) {
    a = 0.0;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  n++;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  if (a == 0.0) {
    a = fabs(a);
  }
  return a;
}

inline void sincospi(double a, double *sptr, double *cptr)
{
  *sptr = sinpi(a);
  *cptr = cospi(a);
}

inline double erfinv(double a)
{
  double p, q, t, fa;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  fa = fabs(a);
  if (fa >= 1.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;
    if (fa == 1.0) {
      t = a * exp(1000.0);
    }
  } else if (fa >= 0.9375) {




    t = log1p(-fa);
    t = 1.0 / sqrt(-t);
    p = 2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q = t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
    if (a < 0.0) t = -t;
  } else if (fa >= 0.75) {




    t = a * a - .87890625;
    p = .21489185007307062000e+0;
    p = p * t - .64200071507209448655e+1;
    p = p * t + .29631331505876308123e+2;
    p = p * t - .47644367129787181803e+2;
    p = p * t + .34810057749357500873e+2;
    p = p * t - .12954198980646771502e+2;
    p = p * t + .25349389220714893917e+1;
    p = p * t - .24758242362823355486e+0;
    p = p * t + .94897362808681080020e-2;
    q = t - .12831383833953226499e+2;
    q = q * t + .41409991778428888716e+2;
    q = q * t - .53715373448862143349e+2;
    q = q * t + .33880176779595142685e+2;
    q = q * t - .11315360624238054876e+2;
    q = q * t + .20369295047216351160e+1;
    q = q * t - .18611650627372178511e+0;
    q = q * t + .67544512778850945940e-2;
    p = p / q;
    t = a * p;
  } else {




    t = a * a - .5625;
    p = - .23886240104308755900e+2;
    p = p * t + .45560204272689128170e+3;
    p = p * t - .22977467176607144887e+4;
    p = p * t + .46631433533434331287e+4;
    p = p * t - .43799652308386926161e+4;
    p = p * t + .19007153590528134753e+4;
    p = p * t - .30786872642313695280e+3;
    q = t - .83288327901936570000e+2;
    q = q * t + .92741319160935318800e+3;
    q = q * t - .35088976383877264098e+4;
    q = q * t + .59039348134843665626e+4;
    q = q * t - .48481635430048872102e+4;
    q = q * t + .18997769186453057810e+4;
    q = q * t - .28386514725366621129e+3;
    p = p / q;
    t = a * p;
  }
  return t;
}

inline double erfcinv(double a)
{
  double t;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  if (__isnan(a)) {
    return a + a;
  }
  if (a <= 0.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;
    if (a == 0.0) {
        t = (1.0 - a) * exp(1000.0);
    }
  }
  else if (a >= 0.0625) {
    t = erfinv (1.0 - a);
  }
  else if (a >= 1e-100) {




    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p = 2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q = t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
  }
  else {




    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p = 6.9952990607058154858e-1;
    p = p * t + 1.9507620287580568829e+0;
    p = p * t + 8.2810030904462690216e-1;
    p = p * t + 1.1279046353630280005e-1;
    p = p * t + 6.0537914739162189689e-3;
    p = p * t + 1.3714329569665128933e-4;
    p = p * t + 1.2964481560643197452e-6;
    p = p * t + 4.6156006321345332510e-9;
    p = p * t + 4.5344689563209398450e-12;
    q = t + 1.5771922386662040546e+0;
    q = q * t + 2.1238242087454993542e+0;
    q = q * t + 8.4001814918178042919e-1;
    q = q * t + 1.1311889334355782065e-1;
    q = q * t + 6.0574830550097140404e-3;
    q = q * t + 1.3715891988350205065e-4;
    q = q * t + 1.2964671850944981713e-6;
    q = q * t + 4.6156017600933592558e-9;
    q = q * t + 4.5344687377088206783e-12;
    t = p / (q * t);
  }
  return t;
}

inline double normcdfinv(double a)
{
  return -1.4142135623730951 * erfcinv(a + a);
}

inline double normcdf(double a)
{
  double ah, al, t1, t2, u1, u2, v1, v2, z;
  if (fabs (a) > 38.5) a = copysign (38.5, a);
  ah = a * 134217729.0;
  u1 = (a - ah) + ah;
  u2 = a - u1;
  v1 = -7.0710678398609161e-01;
  v2 = 2.7995440410322203e-09;
  t1 = a * -7.0710678118654757e-1;
  t2 = (((u1 * v1 - t1) + u1 * v2) + u2 * v1) + u2 * v2;
  t2 = (a * -(-4.8336466567264567e-17)) + t2;
  ah = t1 + t2;
  z = erfc (ah);
  if (a < -1.0) {
    al = (t1 - ah) + t2;
    t1 = -2.0 * ah * z;
    z = t1 * al + z;
  }
  return 0.5 * z;
}

inline double erfcx(double a)
{
  double x, t1, t2, t3;

  if (__isnan(a)) {
    return a + a;
  }
  x = fabs(a);
  if (x < 32.0) {
# 3738 "/usr/local/cuda-8.0/include/math_functions.hpp" 3
    t1 = x - 4.0;
    t2 = x + 4.0;
    t2 = t1 / t2;

    t1 = - 3.5602694826817400E-010;
    t1 = t1 * t2 - 9.7239122591447274E-009;
    t1 = t1 * t2 - 8.9350224851649119E-009;
    t1 = t1 * t2 + 1.0404430921625484E-007;
    t1 = t1 * t2 + 5.8806698585341259E-008;
    t1 = t1 * t2 - 8.2147414929116908E-007;
    t1 = t1 * t2 + 3.0956409853306241E-007;
    t1 = t1 * t2 + 5.7087871844325649E-006;
    t1 = t1 * t2 - 1.1231787437600085E-005;
    t1 = t1 * t2 - 2.4399558857200190E-005;
    t1 = t1 * t2 + 1.5062557169571788E-004;
    t1 = t1 * t2 - 1.9925637684786154E-004;
    t1 = t1 * t2 - 7.5777429182785833E-004;
    t1 = t1 * t2 + 5.0319698792599572E-003;
    t1 = t1 * t2 - 1.6197733895953217E-002;
    t1 = t1 * t2 + 3.7167515553018733E-002;
    t1 = t1 * t2 - 6.6330365827532434E-002;
    t1 = t1 * t2 + 9.3732834997115544E-002;
    t1 = t1 * t2 - 1.0103906603555676E-001;
    t1 = t1 * t2 + 6.8097054254735140E-002;
    t1 = t1 * t2 + 1.5379652102605428E-002;
    t1 = t1 * t2 - 1.3962111684056291E-001;
    t1 = t1 * t2 + 1.2329951186255526E+000;

    t2 = 2.0 * x + 1.0;
    t1 = t1 / t2;
  } else {

    t2 = 1.0 / x;
    t3 = t2 * t2;
    t1 = -29.53125;
    t1 = t1 * t3 + 6.5625;
    t1 = t1 * t3 - 1.875;
    t1 = t1 * t3 + 0.75;
    t1 = t1 * t3 - 0.5;
    t1 = t1 * t3 + 1.0;
    t2 = t2 * 5.6418958354775628e-001;
    t1 = t1 * t2;
  }
  if (a < 0.0) {

    t2 = ((int)(x * 16.0)) * 0.0625;
    t3 = (x - t2) * (x + t2);
    t3 = exp(t2 * t2) * exp(t3);
    t3 = t3 + t3;
    t1 = t3 - t1;
  }
  return t1;
}

inline float rsqrtf(float a)
{
  return (float)rsqrt((double)a);
}

inline float rcbrtf(float a)
{
  return (float)rcbrt((double)a);
}

inline float sinpif(float a)
{
  return (float)sinpi((double)a);
}

inline float cospif(float a)
{
  return (float)cospi((double)a);
}

inline void sincospif(float a, float *sptr, float *cptr)
{
  double s, c;

  sincospi((double)a, &s, &c);
  *sptr = (float)s;
  *cptr = (float)c;
}

inline float erfinvf(float a)
{
  return (float)erfinv((double)a);
}

inline float erfcinvf(float a)
{
  return (float)erfcinv((double)a);
}

inline float normcdfinvf(float a)
{
  return (float)normcdfinv((double)a);
}

inline float normcdff(float a)
{
  return (float)normcdf((double)a);
}

inline float erfcxf(float a)
{
  return (float)erfcx((double)a);
}
# 225 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3




static inline float rsqrt(float __a) { return rsqrtf(__a); }
static inline float rcbrt(float __a) { return rcbrtf(__a); }
static inline float sinpi(float __a) { return sinpif(__a); }
static inline float cospi(float __a) { return cospif(__a); }
static inline void sincospi(float __a, float *__b, float *__c) {
  return sincospif(__a, __b, __c);
}
static inline float erfcinv(float __a) { return erfcinvf(__a); }
static inline float normcdfinv(float __a) { return normcdfinvf(__a); }
static inline float normcdf(float __a) { return normcdff(__a); }
static inline float erfcx(float __a) { return erfcxf(__a); }




static inline __attribute__((device)) void __brkpt(int __c) { __brkpt(); }
# 261 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/cuda-8.0/include/device_atomic_functions.hpp" 1 3
# 67 "/usr/local/cuda-8.0/include/device_atomic_functions.hpp" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 68 "/usr/local/cuda-8.0/include/device_atomic_functions.hpp" 2 3








static __inline__ __attribute__((device)) int atomicAdd(int *address, int val)
{
  return __iAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicAdd(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) int atomicSub(int *address, int val)
{
  return __iAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device)) unsigned int atomicSub(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device)) int atomicExch(int *address, int val)
{
  return __iAtomicExch(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicExch(unsigned int *address, unsigned int val)
{
  return __uAtomicExch(address, val);
}

static __inline__ __attribute__((device)) float atomicExch(float *address, float val)
{
  return __fAtomicExch(address, val);
}

static __inline__ __attribute__((device)) int atomicMin(int *address, int val)
{
  return __iAtomicMin(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicMin(unsigned int *address, unsigned int val)
{
  return __uAtomicMin(address, val);
}

static __inline__ __attribute__((device)) int atomicMax(int *address, int val)
{
  return __iAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicMax(unsigned int *address, unsigned int val)
{
  return __uAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicInc(unsigned int *address, unsigned int val)
{
  return __uAtomicInc(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicDec(unsigned int *address, unsigned int val)
{
  return __uAtomicDec(address, val);
}

static __inline__ __attribute__((device)) int atomicAnd(int *address, int val)
{
  return __iAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicAnd(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) int atomicOr(int *address, int val)
{
  return __iAtomicOr(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicOr(unsigned int *address, unsigned int val)
{
  return __uAtomicOr(address, val);
}

static __inline__ __attribute__((device)) int atomicXor(int *address, int val)
{
  return __iAtomicXor(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicXor(unsigned int *address, unsigned int val)
{
  return __uAtomicXor(address, val);
}

static __inline__ __attribute__((device)) int atomicCAS(int *address, int compare, int val)
{
  return __iAtomicCAS(address, compare, val);
}

static __inline__ __attribute__((device)) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  return __uAtomicCAS(address, compare, val);
}








# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 188 "/usr/local/cuda-8.0/include/device_atomic_functions.hpp" 2 3








static __inline__ __attribute__((device)) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicExch(address, val);
}

static __inline__ __attribute__((device)) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  return __ullAtomicCAS(address, compare, val);
}

static __inline__ __attribute__((device)) bool any(bool cond)
{
  return (bool)__any((int)cond);
}

static __inline__ __attribute__((device)) bool all(bool cond)
{
  return (bool)__all((int)cond);
}
# 262 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3




# 1 "/usr/local/cuda-8.0/include/device_functions.hpp" 1 3
# 72 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 73 "/usr/local/cuda-8.0/include/device_functions.hpp" 2 3
# 83 "/usr/local/cuda-8.0/include/device_functions.hpp" 3
static __inline__ __attribute__((device)) int mulhi(int a, int b)
{
  return __mulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, unsigned int b)
{
  return __umulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(int a, unsigned int b)
{
  return __umulhi((unsigned int)a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, int b)
{
  return __umulhi(a, (unsigned int)b);
}

static __inline__ __attribute__((device)) long long int mul64hi(long long int a, long long int b)
{
  return __mul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(long long int a, unsigned long long int b)
{
  return __umul64hi((unsigned long long int)a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, long long int b)
{
  return __umul64hi(a, (unsigned long long int)b);
}

static __inline__ __attribute__((device)) int float_as_int(float a)
{
  return __float_as_int(a);
}

static __inline__ __attribute__((device)) float int_as_float(int a)
{
  return __int_as_float(a);
}

static __inline__ __attribute__((device)) unsigned int float_as_uint(float a)
{
  return __float_as_uint(a);
}

static __inline__ __attribute__((device)) float uint_as_float(unsigned int a)
{
  return __uint_as_float(a);
}
static __inline__ __attribute__((device)) float saturate(float a)
{
  return __saturatef(a);
}

static __inline__ __attribute__((device)) int mul24(int a, int b)
{
  return __mul24(a, b);
}

static __inline__ __attribute__((device)) unsigned int umul24(unsigned int a, unsigned int b)
{
  return __umul24(a, b);
}

static __inline__ __attribute__((device)) void trap(void)
{
  __trap();
}


static __inline__ __attribute__((device)) void brkpt(int c)
{
  __brkpt(c);
}

static __inline__ __attribute__((device)) void syncthreads(void)
{
  __syncthreads();
}

static __inline__ __attribute__((device)) void prof_trigger(int e)
{
       if (e == 0) asm __volatile__ ("pmevent \t" "0" ";");
  else if (e == 1) asm __volatile__ ("pmevent \t" "1" ";");
  else if (e == 2) asm __volatile__ ("pmevent \t" "2" ";");
  else if (e == 3) asm __volatile__ ("pmevent \t" "3" ";");
  else if (e == 4) asm __volatile__ ("pmevent \t" "4" ";");
  else if (e == 5) asm __volatile__ ("pmevent \t" "5" ";");
  else if (e == 6) asm __volatile__ ("pmevent \t" "6" ";");
  else if (e == 7) asm __volatile__ ("pmevent \t" "7" ";");
  else if (e == 8) asm __volatile__ ("pmevent \t" "8" ";");
  else if (e == 9) asm __volatile__ ("pmevent \t" "9" ";");
  else if (e == 10) asm __volatile__ ("pmevent \t" "10" ";");
  else if (e == 11) asm __volatile__ ("pmevent \t" "11" ";");
  else if (e == 12) asm __volatile__ ("pmevent \t" "12" ";");
  else if (e == 13) asm __volatile__ ("pmevent \t" "13" ";");
  else if (e == 14) asm __volatile__ ("pmevent \t" "14" ";");
  else if (e == 15) asm __volatile__ ("pmevent \t" "15" ";");
}

static __inline__ __attribute__((device)) void threadfence(bool global)
{
  global ? __threadfence() : __threadfence_block();
}

static __inline__ __attribute__((device)) int float2int(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2int_rn(a) :
         mode == cudaRoundPosInf ? __float2int_ru(a) :
         mode == cudaRoundMinInf ? __float2int_rd(a) :
                                    __float2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int float2uint(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2uint_rn(a) :
         mode == cudaRoundPosInf ? __float2uint_ru(a) :
         mode == cudaRoundMinInf ? __float2uint_rd(a) :
                                    __float2uint_rz(a);
}

static __inline__ __attribute__((device)) float int2float(int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __int2float_rz(a) :
         mode == cudaRoundPosInf ? __int2float_ru(a) :
         mode == cudaRoundMinInf ? __int2float_rd(a) :
                                   __int2float_rn(a);
}

static __inline__ __attribute__((device)) float uint2float(unsigned int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __uint2float_rz(a) :
         mode == cudaRoundPosInf ? __uint2float_ru(a) :
         mode == cudaRoundMinInf ? __uint2float_rd(a) :
                                   __uint2float_rn(a);
}
# 267 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3

# 1 "/usr/local/cuda-8.0/include/device_double_functions.h" 1 3
# 75 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 76 "/usr/local/cuda-8.0/include/device_double_functions.h" 2 3




extern "C"
{
# 91 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) long long int __double_as_longlong(double x);
# 100 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __longlong_as_double(long long int x);
# 257 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __fma_rn(double x, double y, double z);
# 414 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __fma_rz(double x, double y, double z);
# 571 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __fma_ru(double x, double y, double z);
# 728 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __fma_rd(double x, double y, double z);
# 740 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dadd_rn(double x, double y);
# 752 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dadd_rz(double x, double y);
# 764 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dadd_ru(double x, double y);
# 776 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dadd_rd(double x, double y);
# 788 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dsub_rn(double x, double y);
# 800 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dsub_rz(double x, double y);
# 812 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dsub_ru(double x, double y);
# 824 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dsub_rd(double x, double y);
# 836 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dmul_rn(double x, double y);
# 848 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dmul_rz(double x, double y);
# 860 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dmul_ru(double x, double y);
# 872 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __dmul_rd(double x, double y);
# 881 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) float __double2float_rn(double x);
# 890 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) float __double2float_rz(double x);
# 899 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) float __double2float_ru(double x);
# 908 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) float __double2float_rd(double x);
# 917 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) int __double2int_rn(double x);
# 926 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) int __double2int_ru(double x);
# 935 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) int __double2int_rd(double x);
# 944 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) unsigned int __double2uint_rn(double x);
# 953 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) unsigned int __double2uint_ru(double x);
# 962 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) unsigned int __double2uint_rd(double x);
# 971 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) long long int __double2ll_rn(double x);
# 980 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) long long int __double2ll_ru(double x);
# 989 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) long long int __double2ll_rd(double x);
# 998 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) unsigned long long int __double2ull_rn(double x);
# 1007 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) unsigned long long int __double2ull_ru(double x);
# 1016 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) unsigned long long int __double2ull_rd(double x);







extern __attribute__((device)) double __int2double_rn(int x);







extern __attribute__((device)) double __uint2double_rn(unsigned int x);
# 1041 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __ll2double_rn(long long int x);
# 1050 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __ll2double_rz(long long int x);
# 1059 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __ll2double_ru(long long int x);
# 1068 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __ll2double_rd(long long int x);
# 1077 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __ull2double_rn(unsigned long long int x);
# 1086 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __ull2double_rz(unsigned long long int x);
# 1095 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __ull2double_ru(unsigned long long int x);
# 1104 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __ull2double_rd(unsigned long long int x);
# 1113 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) int __double2hiint(double x);
# 1122 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) int __double2loint(double x);
# 1132 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
extern __attribute__((device)) double __hiloint2double(int hi, int lo);

}
# 1143 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
static __inline__ __attribute__((device)) double fma(double a, double b, double c, enum cudaRoundMode mode);

static __inline__ __attribute__((device)) double dmul(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double dadd(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double dsub(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) int double2int(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) unsigned int double2uint(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) long long int double2ll(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) unsigned long long int double2ull(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) double ll2double(long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double ull2double(unsigned long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double int2double(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double uint2double(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double float2double(float a, enum cudaRoundMode mode = cudaRoundNearest);
# 1182 "/usr/local/cuda-8.0/include/device_double_functions.h" 3
static __inline__ __attribute__((always_inline)) double __dsub_rn(double a, double b);

static __inline__ __attribute__((always_inline)) double __dsub_rz(double a, double b);

static __inline__ __attribute__((always_inline)) double __dsub_ru(double a, double b);

static __inline__ __attribute__((always_inline)) double __dsub_rd(double a, double b);







# 1 "/usr/local/cuda-8.0/include/device_double_functions.hpp" 1 3
# 75 "/usr/local/cuda-8.0/include/device_double_functions.hpp" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 76 "/usr/local/cuda-8.0/include/device_double_functions.hpp" 2 3
# 85 "/usr/local/cuda-8.0/include/device_double_functions.hpp" 3
static __inline__ __attribute__((device)) double fma(double a, double b, double c, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __fma_rz(a, b, c) :
         mode == cudaRoundPosInf ? __fma_ru(a, b, c) :
         mode == cudaRoundMinInf ? __fma_rd(a, b, c) :
                                   __fma_rn(a, b, c);
}

static __inline__ __attribute__((device)) double dmul(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dmul_rz(a, b) :
         mode == cudaRoundPosInf ? __dmul_ru(a, b) :
         mode == cudaRoundMinInf ? __dmul_rd(a, b) :
                                   __dmul_rn(a, b);
}

static __inline__ __attribute__((device)) double dadd(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dadd_rz(a, b) :
         mode == cudaRoundPosInf ? __dadd_ru(a, b) :
         mode == cudaRoundMinInf ? __dadd_rd(a, b) :
                                   __dadd_rn(a, b);
}

static __inline__ __attribute__((device)) double dsub(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dsub_rz(a, b) :
         mode == cudaRoundPosInf ? __dsub_ru(a, b) :
         mode == cudaRoundMinInf ? __dsub_rd(a, b) :
                                   __dsub_rn(a, b);
}

static __inline__ __attribute__((device)) int double2int(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2int_rn(a) :
         mode == cudaRoundPosInf ? __double2int_ru(a) :
         mode == cudaRoundMinInf ? __double2int_rd(a) :
                                    __double2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int double2uint(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2uint_rn(a) :
         mode == cudaRoundPosInf ? __double2uint_ru(a) :
         mode == cudaRoundMinInf ? __double2uint_rd(a) :
                                    __double2uint_rz(a);
}

static __inline__ __attribute__((device)) long long int double2ll(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ll_rn(a) :
         mode == cudaRoundPosInf ? __double2ll_ru(a) :
         mode == cudaRoundMinInf ? __double2ll_rd(a) :
                                    __double2ll_rz(a);
}

static __inline__ __attribute__((device)) unsigned long long int double2ull(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ull_rn(a) :
         mode == cudaRoundPosInf ? __double2ull_ru(a) :
         mode == cudaRoundMinInf ? __double2ull_rd(a) :
                                    __double2ull_rz(a);
}

static __inline__ __attribute__((device)) double ll2double(long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __ll2double_rz(a) :
         mode == cudaRoundPosInf ? __ll2double_ru(a) :
         mode == cudaRoundMinInf ? __ll2double_rd(a) :
                                   __ll2double_rn(a);
}

static __inline__ __attribute__((device)) double ull2double(unsigned long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __ull2double_rz(a) :
         mode == cudaRoundPosInf ? __ull2double_ru(a) :
         mode == cudaRoundMinInf ? __ull2double_rd(a) :
                                   __ull2double_rn(a);
}

static __inline__ __attribute__((device)) double int2double(int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline__ __attribute__((device)) double uint2double(unsigned int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline__ __attribute__((device)) double float2double(float a, enum cudaRoundMode mode)
{
  return (double)a;
}
# 193 "/usr/local/cuda-8.0/include/device_double_functions.hpp" 3
static __inline__ __attribute__((always_inline)) double __dsub_rn(double a, double b)
{
  double res;
  asm ("sub.rn.f64 %0, %1, %2;" : "=d"(res) : "d"(a), "d"(b));
  return res;
}

static __inline__ __attribute__((always_inline)) double __dsub_rz(double a, double b)
{
  double res;
  asm ("sub.rz.f64 %0, %1, %2;" : "=d"(res) : "d"(a), "d"(b));
  return res;
}

static __inline__ __attribute__((always_inline)) double __dsub_ru(double a, double b)
{
  double res;
  asm ("sub.rp.f64 %0, %1, %2;" : "=d"(res) : "d"(a), "d"(b));
  return res;
}

static __inline__ __attribute__((always_inline)) double __dsub_rd(double a, double b)
{
  double res;
  asm ("sub.rm.f64 %0, %1, %2;" : "=d"(res) : "d"(a), "d"(b));
  return res;
}
# 1196 "/usr/local/cuda-8.0/include/device_double_functions.h" 2 3
# 269 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3


# 1 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.hpp" 1 3
# 67 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.hpp" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 68 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.hpp" 2 3








static __inline__ __attribute__((device)) float atomicAdd(float *address, float val)
{
  return __fAtomicAdd(address, val);
}
# 272 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 1 "/usr/local/cuda-8.0/include/sm_20_intrinsics.hpp" 1 3
# 67 "/usr/local/cuda-8.0/include/sm_20_intrinsics.hpp" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 68 "/usr/local/cuda-8.0/include/sm_20_intrinsics.hpp" 2 3
# 77 "/usr/local/cuda-8.0/include/sm_20_intrinsics.hpp" 3
static __inline__ __attribute__((device)) unsigned int ballot(bool pred)
{
  return __ballot((int)pred);
}

static __inline__ __attribute__((device)) int syncthreads_count(bool pred)
{
  return __syncthreads_count((int)pred);
}

static __inline__ __attribute__((device)) bool syncthreads_and(bool pred)
{
  return (bool)__syncthreads_and((int)pred);
}

static __inline__ __attribute__((device)) bool syncthreads_or(bool pred)
{
  return (bool)__syncthreads_or((int)pred);
}




static __inline__ __attribute__((device)) unsigned int __isGlobal(const void *ptr)
{
    unsigned int ret;
    asm volatile ("{ \n\t"
                  "    .reg .pred p; \n\t"
                  "    isspacep.global p, %1; \n\t"
                  "    selp.u32 %0, 1, 0, p;  \n\t"

                  "} \n\t" : "=r"(ret) : "l"(ptr));




    return ret;
}
# 273 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 1 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.hpp" 1 3
# 69 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.hpp" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 70 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.hpp" 2 3








static __inline__ __attribute__((device)) long long atomicMin(long long *address, long long val)
{
    return __illAtomicMin(address, val);
}

static __inline__ __attribute__((device)) long long atomicMax(long long *address, long long val)
{
    return __illAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicMin(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMin(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicMax(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicOr(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicOr(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicXor(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicXor(address, val);
}
# 274 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 286 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.hpp" 1 3
# 69 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.hpp" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 70 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.hpp" 2 3








static __inline__ __attribute__((device)) double atomicAdd(double *address, double val)
{
  return __dAtomicAdd(address, val);
}

static __inline__ __attribute__((device))
int atomicAdd_block(int *address, int val)
{
  return __iAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
int atomicAdd_system(int *address, int val)
{
  return __iAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAdd_block(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAdd_system(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
float atomicAdd_block(float *address, float val)
{
  return __fAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
float atomicAdd_system(float *address, float val)
{
  return __fAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
double atomicAdd_block(double *address, double val)
{
  return __dAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
double atomicAdd_system(double *address, double val)
{
  return __dAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
int atomicExch_block(int *address, int val)
{
  return __iAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
int atomicExch_system(int *address, int val)
{
  return __iAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicExch_block(unsigned int *address, unsigned int val)
{
  return __uAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicExch_system(unsigned int *address, unsigned int val)
{
  return __uAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
float atomicExch_block(float *address, float val)
{
  return __fAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
float atomicExch_system(float *address, float val)
{
  return __fAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
int atomicMin_block(int *address, int val)
{
  return __iAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
int atomicMin_system(int *address, int val)
{
  return __iAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicMin_block(long long *address, long long val)
{
  return __illAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicMin_system(long long *address, long long val)
{
  return __illAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMin_block(unsigned int *address, unsigned int val)
{
  return __uAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMin_system(unsigned int *address, unsigned int val)
{
  return __uAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
int atomicMax_block(int *address, int val)
{
  return __iAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
int atomicMax_system(int *address, int val)
{
  return __iAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicMax_block(long long *address, long long val)
{
  return __illAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicMax_system(long long *address, long long val)
{
  return __illAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMax_block(unsigned int *address, unsigned int val)
{
  return __uAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMax_system(unsigned int *address, unsigned int val)
{
  return __uAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicInc_block(unsigned int *address, unsigned int val)
{
  return __uAtomicInc_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicInc_system(unsigned int *address, unsigned int val)
{
  return __uAtomicInc_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicDec_block(unsigned int *address, unsigned int val)
{
  return __uAtomicDec_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicDec_system(unsigned int *address, unsigned int val)
{
  return __uAtomicDec_system(address, val);
}

static __inline__ __attribute__((device))
int atomicCAS_block(int *address, int compare, int val)
{
  return __iAtomicCAS_block(address, compare, val);
}

static __inline__ __attribute__((device))
int atomicCAS_system(int *address, int compare, int val)
{
  return __iAtomicCAS_system(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned int atomicCAS_block(unsigned int *address, unsigned int compare,
                             unsigned int val)
{
  return __uAtomicCAS_block(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned int atomicCAS_system(unsigned int *address, unsigned int compare,
                              unsigned int val)
{
  return __uAtomicCAS_system(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned long long int atomicCAS_block(unsigned long long int *address,
                                       unsigned long long int compare,
                                       unsigned long long int val)
{
  return __ullAtomicCAS_block(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned long long int atomicCAS_system(unsigned long long int *address,
                                        unsigned long long int compare,
                                        unsigned long long int val)
{
  return __ullAtomicCAS_system(address, compare, val);
}

static __inline__ __attribute__((device))
int atomicAnd_block(int *address, int val)
{
  return __iAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
int atomicAnd_system(int *address, int val)
{
  return __iAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicAnd_block(long long *address, long long val)
{
  return __llAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicAnd_system(long long *address, long long val)
{
  return __llAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAnd_block(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAnd_system(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
int atomicOr_block(int *address, int val)
{
  return __iAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
int atomicOr_system(int *address, int val)
{
  return __iAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicOr_block(long long *address, long long val)
{
  return __llAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicOr_system(long long *address, long long val)
{
  return __llAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicOr_block(unsigned int *address, unsigned int val)
{
  return __uAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicOr_system(unsigned int *address, unsigned int val)
{
  return __uAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
int atomicXor_block(int *address, int val)
{
  return __iAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
int atomicXor_system(int *address, int val)
{
  return __iAtomicXor_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicXor_block(long long *address, long long val)
{
  return __llAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicXor_system(long long *address, long long val)
{
  return __llAtomicXor_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicXor_block(unsigned int *address, unsigned int val)
{
  return __uAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicXor_system(unsigned int *address, unsigned int val)
{
  return __uAtomicXor_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicXor_system(address, val);
}
# 287 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 1 "/usr/local/cuda-8.0/include/sm_61_intrinsics.hpp" 1 3
# 69 "/usr/local/cuda-8.0/include/sm_61_intrinsics.hpp" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 70 "/usr/local/cuda-8.0/include/sm_61_intrinsics.hpp" 2 3
# 81 "/usr/local/cuda-8.0/include/sm_61_intrinsics.hpp" 3
static __attribute__((device)) __inline__ int __dp4a(int srcA, int srcB, int c) {
    int ret;
    asm volatile ("dp4a.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp4a(unsigned int srcA, unsigned int srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp4a.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ int __dp4a(char4 srcA, char4 srcB, int c) {
    int ret;
    asm volatile ("dp4a.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(int *)&srcA), "r"(*(int *)&srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp4a(uchar4 srcA, uchar4 srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp4a.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(unsigned int *)&srcA), "r"(*(unsigned int *)&srcB), "r"(c));
    return ret;
}


static __attribute__((device)) __inline__ int __dp2a_lo(int srcA, int srcB, int c) {
    int ret;
    asm volatile ("dp2a.lo.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp2a_lo(unsigned int srcA, unsigned int srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.lo.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ int __dp2a_lo(short2 srcA, char4 srcB, int c) {
    int ret;
    asm volatile ("dp2a.lo.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(int *)&srcA), "r"(*(int *)&srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.lo.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(unsigned int *)&srcA), "r"(*(unsigned int *)&srcB), "r"(c));
    return ret;
}


static __attribute__((device)) __inline__ int __dp2a_hi(int srcA, int srcB, int c) {
    int ret;
    asm volatile ("dp2a.hi.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp2a_hi(unsigned int srcA, unsigned int srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.hi.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ int __dp2a_hi(short2 srcA, char4 srcB, int c) {
    int ret;
    asm volatile ("dp2a.hi.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(int *)&srcA), "r"(*(int *)&srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.hi.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(unsigned int *)&srcA), "r"(*(unsigned int *)&srcB), "r"(c));
    return ret;
}
# 288 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 318 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/cuda-8.0/include/math_functions.hpp" 1 3
# 67 "/usr/local/cuda-8.0/include/math_functions.hpp" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 68 "/usr/local/cuda-8.0/include/math_functions.hpp" 2 3
# 503 "/usr/local/cuda-8.0/include/math_functions.hpp" 3
static inline __attribute__((device)) float logb(float a)
{
  return logbf(a);
}

static inline __attribute__((device)) int ilogb(float a)
{
  return ilogbf(a);
}

static inline __attribute__((device)) float scalbn(float a, int b)
{
  return scalbnf(a, b);
}

static inline __attribute__((device)) float scalbln(float a, long int b)
{
  return scalblnf(a, b);
}

static inline __attribute__((device)) float exp2(float a)
{
  return exp2f(a);
}

static inline __attribute__((device)) float expm1(float a)
{
  return expm1f(a);
}

static inline __attribute__((device)) float log2(float a)
{
  return log2f(a);
}

static inline __attribute__((device)) float log1p(float a)
{
  return log1pf(a);
}

static inline __attribute__((device)) float acosh(float a)
{
  return acoshf(a);
}

static inline __attribute__((device)) float asinh(float a)
{
  return asinhf(a);
}

static inline __attribute__((device)) float atanh(float a)
{
  return atanhf(a);
}

static inline __attribute__((device)) float hypot(float a, float b)
{
  return hypotf(a, b);
}

static inline __attribute__((device)) float norm3d(float a, float b, float c)
{
  return norm3df(a, b, c);
}

static inline __attribute__((device)) float norm4d(float a, float b, float c, float d)
{
  return norm4df(a, b, c, d);
}

static inline __attribute__((device)) float cbrt(float a)
{
  return cbrtf(a);
}

static inline __attribute__((device)) float erf(float a)
{
  return erff(a);
}

static inline __attribute__((device)) float erfc(float a)
{
  return erfcf(a);
}

static inline __attribute__((device)) float lgamma(float a)
{
  return lgammaf(a);
}

static inline __attribute__((device)) float tgamma(float a)
{
  return tgammaf(a);
}

static inline __attribute__((device)) float copysign(float a, float b)
{
  return copysignf(a, b);
}

static inline __attribute__((device)) float nextafter(float a, float b)
{
  return nextafterf(a, b);
}

static inline __attribute__((device)) float remainder(float a, float b)
{
  return remainderf(a, b);
}

static inline __attribute__((device)) float remquo(float a, float b, int *quo)
{
  return remquof(a, b, quo);
}

static inline __attribute__((device)) float round(float a)
{
  return roundf(a);
}

static inline __attribute__((device)) long int lround(float a)
{
  return lroundf(a);
}

static inline __attribute__((device)) long long int llround(float a)
{
  return llroundf(a);
}

static inline __attribute__((device)) float trunc(float a)
{
  return truncf(a);
}

static inline __attribute__((device)) float rint(float a)
{
  return rintf(a);
}

static inline __attribute__((device)) long int lrint(float a)
{
  return lrintf(a);
}

static inline __attribute__((device)) long long int llrint(float a)
{
  return llrintf(a);
}

static inline __attribute__((device)) float nearbyint(float a)
{
  return nearbyintf(a);
}

static inline __attribute__((device)) float fdim(float a, float b)
{
  return fdimf(a, b);
}

static inline __attribute__((device)) float fma(float a, float b, float c)
{
  return fmaf(a, b, c);
}

static inline __attribute__((device)) float fmax(float a, float b)
{
  return fmaxf(a, b);
}

static inline __attribute__((device)) float fmin(float a, float b)
{
  return fminf(a, b);
}




static inline __attribute__((device)) float exp10(float a)
{
  return exp10f(a);
}

static inline __attribute__((device)) float rsqrt(float a)
{
  return rsqrtf(a);
}

static inline __attribute__((device)) float rcbrt(float a)
{
  return rcbrtf(a);
}

static inline __attribute__((device)) float sinpi(float a)
{
  return sinpif(a);
}

static inline __attribute__((device)) float cospi(float a)
{
  return cospif(a);
}

static inline __attribute__((device)) void sincospi(float a, float *sptr, float *cptr)
{
  sincospif(a, sptr, cptr);
}

static inline __attribute__((device)) void sincos(float a, float *sptr, float *cptr)
{
  sincosf(a, sptr, cptr);
}

static inline __attribute__((device)) float j0(float a)
{
  return j0f(a);
}

static inline __attribute__((device)) float j1(float a)
{
  return j1f(a);
}

static inline __attribute__((device)) float jn(int n, float a)
{
  return jnf(n, a);
}

static inline __attribute__((device)) float y0(float a)
{
  return y0f(a);
}

static inline __attribute__((device)) float y1(float a)
{
  return y1f(a);
}

static inline __attribute__((device)) float yn(int n, float a)
{
  return ynf(n, a);
}

static inline __attribute__((device)) float cyl_bessel_i0(float a)
{
  return cyl_bessel_i0f(a);
}

static inline __attribute__((device)) float cyl_bessel_i1(float a)
{
  return cyl_bessel_i1f(a);
}

static inline __attribute__((device)) float erfinv(float a)
{
  return erfinvf(a);
}

static inline __attribute__((device)) float erfcinv(float a)
{
  return erfcinvf(a);
}

static inline __attribute__((device)) float normcdfinv(float a)
{
  return normcdfinvf(a);
}

static inline __attribute__((device)) float normcdf(float a)
{
  return normcdff(a);
}

static inline __attribute__((device)) float erfcx(float a)
{
  return erfcxf(a);
}

static inline __attribute__((device)) double copysign(double a, float b)
{
  return copysign(a, (double)b);
}

static inline __attribute__((device)) float copysign(float a, double b)
{
  return copysignf(a, (float)b);
}

static inline __attribute__((device)) unsigned int min(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static inline __attribute__((device)) unsigned int min(int a, unsigned int b)
{
  return umin((unsigned int)a, b);
}

static inline __attribute__((device)) unsigned int min(unsigned int a, int b)
{
  return umin(a, (unsigned int)b);
}

static inline __attribute__((device)) long int min(long int a, long int b)
{





  if (sizeof(long int) == sizeof(int)) {



    return (long int)min((int)a, (int)b);
  } else {
    return (long int)llmin((long long int)a, (long long int)b);
  }
}

static inline __attribute__((device)) unsigned long int min(unsigned long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((device)) unsigned long int min(long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((device)) unsigned long int min(unsigned long int a, long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((device)) long long int min(long long int a, long long int b)
{
  return llmin(a, b);
}

static inline __attribute__((device)) unsigned long long int min(unsigned long long int a, unsigned long long int b)
{
  return ullmin(a, b);
}

static inline __attribute__((device)) unsigned long long int min(long long int a, unsigned long long int b)
{
  return ullmin((unsigned long long int)a, b);
}

static inline __attribute__((device)) unsigned long long int min(unsigned long long int a, long long int b)
{
  return ullmin(a, (unsigned long long int)b);
}

static inline __attribute__((device)) float min(float a, float b)
{
  return fminf(a, b);
}

static inline __attribute__((device)) double min(double a, double b)
{
  return fmin(a, b);
}

static inline __attribute__((device)) double min(float a, double b)
{
  return fmin((double)a, b);
}

static inline __attribute__((device)) double min(double a, float b)
{
  return fmin(a, (double)b);
}

static inline __attribute__((device)) unsigned int max(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static inline __attribute__((device)) unsigned int max(int a, unsigned int b)
{
  return umax((unsigned int)a, b);
}

static inline __attribute__((device)) unsigned int max(unsigned int a, int b)
{
  return umax(a, (unsigned int)b);
}

static inline __attribute__((device)) long int max(long int a, long int b)
{




  if (sizeof(long int) == sizeof(int)) {



    return (long int)max((int)a, (int)b);
  } else {
    return (long int)llmax((long long int)a, (long long int)b);
  }
}

static inline __attribute__((device)) unsigned long int max(unsigned long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((device)) unsigned long int max(long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((device)) unsigned long int max(unsigned long int a, long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((device)) long long int max(long long int a, long long int b)
{
  return llmax(a, b);
}

static inline __attribute__((device)) unsigned long long int max(unsigned long long int a, unsigned long long int b)
{
  return ullmax(a, b);
}

static inline __attribute__((device)) unsigned long long int max(long long int a, unsigned long long int b)
{
  return ullmax((unsigned long long int)a, b);
}

static inline __attribute__((device)) unsigned long long int max(unsigned long long int a, long long int b)
{
  return ullmax(a, (unsigned long long int)b);
}

static inline __attribute__((device)) float max(float a, float b)
{
  return fmaxf(a, b);
}

static inline __attribute__((device)) double max(double a, double b)
{
  return fmax(a, b);
}

static inline __attribute__((device)) double max(float a, double b)
{
  return fmax((double)a, b);
}

static inline __attribute__((device)) double max(double a, float b)
{
  return fmax(a, (double)b);
}
# 319 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3








# 1 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 1 3
# 57 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1 3
# 58 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 2 3
# 74 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1Dfetch(char *, cudaTextureObject_t, int) asm("__itex1Dfetch_char_as_schar");

__attribute__((device)) void tex1Dfetch(signed char *, cudaTextureObject_t, int) asm("__itex1Dfetch_schar");
__attribute__((device)) void tex1Dfetch(char1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char1");
__attribute__((device)) void tex1Dfetch(char2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char2");
__attribute__((device)) void tex1Dfetch(char4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char4");
__attribute__((device)) void tex1Dfetch(unsigned char *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar");
__attribute__((device)) void tex1Dfetch(uchar1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar1");
__attribute__((device)) void tex1Dfetch(uchar2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar2");
__attribute__((device)) void tex1Dfetch(uchar4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar4");

__attribute__((device)) void tex1Dfetch(short *, cudaTextureObject_t, int) asm("__itex1Dfetch_short");
__attribute__((device)) void tex1Dfetch(short1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short1");
__attribute__((device)) void tex1Dfetch(short2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short2");
__attribute__((device)) void tex1Dfetch(short4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short4");
__attribute__((device)) void tex1Dfetch(unsigned short *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort");
__attribute__((device)) void tex1Dfetch(ushort1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort1");
__attribute__((device)) void tex1Dfetch(ushort2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort2");
__attribute__((device)) void tex1Dfetch(ushort4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort4");

__attribute__((device)) void tex1Dfetch(int *, cudaTextureObject_t, int) asm("__itex1Dfetch_int");
__attribute__((device)) void tex1Dfetch(int1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int1");
__attribute__((device)) void tex1Dfetch(int2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int2");
__attribute__((device)) void tex1Dfetch(int4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int4");
__attribute__((device)) void tex1Dfetch(unsigned int *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint");
__attribute__((device)) void tex1Dfetch(uint1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint1");
__attribute__((device)) void tex1Dfetch(uint2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint2");
__attribute__((device)) void tex1Dfetch(uint4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint4");
# 114 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1Dfetch(float *, cudaTextureObject_t, int) asm("__itex1Dfetch_float");
__attribute__((device)) void tex1Dfetch(float1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float1");
__attribute__((device)) void tex1Dfetch(float2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float2");
__attribute__((device)) void tex1Dfetch(float4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float4");



template <class T>
static __attribute__((device)) T tex1Dfetch(cudaTextureObject_t texObject, int x)
{
  T ret;
  tex1Dfetch(&ret, texObject, x);
  return ret;
}
# 142 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1D(char *, cudaTextureObject_t, float) asm("__itex1D_char_as_schar");


__attribute__((device)) void tex1D(signed char *, cudaTextureObject_t, float) asm("__itex1D_schar");
__attribute__((device)) void tex1D(char1 *, cudaTextureObject_t, float) asm("__itex1D_char1");
__attribute__((device)) void tex1D(char2 *, cudaTextureObject_t, float) asm("__itex1D_char2");
__attribute__((device)) void tex1D(char4 *, cudaTextureObject_t, float) asm("__itex1D_char4");
__attribute__((device)) void tex1D(unsigned char *, cudaTextureObject_t, float) asm("__itex1D_uchar");
__attribute__((device)) void tex1D(uchar1 *, cudaTextureObject_t, float) asm("__itex1D_uchar1");
__attribute__((device)) void tex1D(uchar2 *, cudaTextureObject_t, float) asm("__itex1D_uchar2");
__attribute__((device)) void tex1D(uchar4 *, cudaTextureObject_t, float) asm("__itex1D_uchar4");

__attribute__((device)) void tex1D(short *, cudaTextureObject_t, float) asm("__itex1D_short");
__attribute__((device)) void tex1D(short1 *, cudaTextureObject_t, float) asm("__itex1D_short1");
__attribute__((device)) void tex1D(short2 *, cudaTextureObject_t, float) asm("__itex1D_short2");
__attribute__((device)) void tex1D(short4 *, cudaTextureObject_t, float) asm("__itex1D_short4");
__attribute__((device)) void tex1D(unsigned short *, cudaTextureObject_t, float) asm("__itex1D_ushort");
__attribute__((device)) void tex1D(ushort1 *, cudaTextureObject_t, float) asm("__itex1D_ushort1");
__attribute__((device)) void tex1D(ushort2 *, cudaTextureObject_t, float) asm("__itex1D_ushort2");
__attribute__((device)) void tex1D(ushort4 *, cudaTextureObject_t, float) asm("__itex1D_ushort4");


__attribute__((device)) void tex1D(int *, cudaTextureObject_t, float) asm("__itex1D_int");
__attribute__((device)) void tex1D(int1 *, cudaTextureObject_t, float) asm("__itex1D_int1");
__attribute__((device)) void tex1D(int2 *, cudaTextureObject_t, float) asm("__itex1D_int2");
__attribute__((device)) void tex1D(int4 *, cudaTextureObject_t, float) asm("__itex1D_int4");
__attribute__((device)) void tex1D(unsigned int *, cudaTextureObject_t, float) asm("__itex1D_uint");
__attribute__((device)) void tex1D(uint1 *, cudaTextureObject_t, float) asm("__itex1D_uint1");
__attribute__((device)) void tex1D(uint2 *, cudaTextureObject_t, float) asm("__itex1D_uint2");
__attribute__((device)) void tex1D(uint4 *, cudaTextureObject_t, float) asm("__itex1D_uint4");
# 184 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1D(float *, cudaTextureObject_t, float) asm("__itex1D_float");
__attribute__((device)) void tex1D(float1 *, cudaTextureObject_t, float) asm("__itex1D_float1");
__attribute__((device)) void tex1D(float2 *, cudaTextureObject_t, float) asm("__itex1D_float2");
__attribute__((device)) void tex1D(float4 *, cudaTextureObject_t, float) asm("__itex1D_float4");


template <class T>
static __attribute__((device)) T tex1D(cudaTextureObject_t texObject, float x)
{
  T ret;
  tex1D(&ret, texObject, x);
  return ret;
}
# 212 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2D(char *, cudaTextureObject_t, float, float) asm("__itex2D_char_as_schar");

__attribute__((device)) void tex2D(signed char *, cudaTextureObject_t, float, float) asm("__itex2D_schar");
__attribute__((device)) void tex2D(char1 *, cudaTextureObject_t, float, float) asm("__itex2D_char1");
__attribute__((device)) void tex2D(char2 *, cudaTextureObject_t, float, float) asm("__itex2D_char2");
__attribute__((device)) void tex2D(char4 *, cudaTextureObject_t, float, float) asm("__itex2D_char4");
__attribute__((device)) void tex2D(unsigned char *, cudaTextureObject_t, float, float) asm("__itex2D_uchar");
__attribute__((device)) void tex2D(uchar1 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar1");
__attribute__((device)) void tex2D(uchar2 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar2");
__attribute__((device)) void tex2D(uchar4 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar4");

__attribute__((device)) void tex2D(short *, cudaTextureObject_t, float, float) asm("__itex2D_short");
__attribute__((device)) void tex2D(short1 *, cudaTextureObject_t, float, float) asm("__itex2D_short1");
__attribute__((device)) void tex2D(short2 *, cudaTextureObject_t, float, float) asm("__itex2D_short2");
__attribute__((device)) void tex2D(short4 *, cudaTextureObject_t, float, float) asm("__itex2D_short4");
__attribute__((device)) void tex2D(unsigned short *, cudaTextureObject_t, float, float) asm("__itex2D_ushort");
__attribute__((device)) void tex2D(ushort1 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort1");
__attribute__((device)) void tex2D(ushort2 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort2");
__attribute__((device)) void tex2D(ushort4 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort4");

__attribute__((device)) void tex2D(int *, cudaTextureObject_t, float, float) asm("__itex2D_int");
__attribute__((device)) void tex2D(int1 *, cudaTextureObject_t, float, float) asm("__itex2D_int1");
__attribute__((device)) void tex2D(int2 *, cudaTextureObject_t, float, float) asm("__itex2D_int2");
__attribute__((device)) void tex2D(int4 *, cudaTextureObject_t, float, float) asm("__itex2D_int4");
__attribute__((device)) void tex2D(unsigned int *, cudaTextureObject_t, float, float) asm("__itex2D_uint");
__attribute__((device)) void tex2D(uint1 *, cudaTextureObject_t, float, float) asm("__itex2D_uint1");
__attribute__((device)) void tex2D(uint2 *, cudaTextureObject_t, float, float) asm("__itex2D_uint2");
__attribute__((device)) void tex2D(uint4 *, cudaTextureObject_t, float, float) asm("__itex2D_uint4");
# 252 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2D(float *, cudaTextureObject_t, float, float) asm("__itex2D_float");
__attribute__((device)) void tex2D(float1 *, cudaTextureObject_t, float, float) asm("__itex2D_float1");
__attribute__((device)) void tex2D(float2 *, cudaTextureObject_t, float, float) asm("__itex2D_float2");
__attribute__((device)) void tex2D(float4 *, cudaTextureObject_t, float, float) asm("__itex2D_float4");


template <class T>
static __attribute__((device)) T tex2D(cudaTextureObject_t texObject, float x, float y)
{
  T ret;
  tex2D(&ret, texObject, x, y);
  return ret;
}
# 279 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex3D(char *, cudaTextureObject_t, float, float, float) asm("__itex3D_char_as_schar");

__attribute__((device)) void tex3D(signed char *, cudaTextureObject_t, float, float, float) asm("__itex3D_schar");
__attribute__((device)) void tex3D(char1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char1");
__attribute__((device)) void tex3D(char2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char2");
__attribute__((device)) void tex3D(char4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char4");
__attribute__((device)) void tex3D(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar");
__attribute__((device)) void tex3D(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar1");
__attribute__((device)) void tex3D(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar2");
__attribute__((device)) void tex3D(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar4");

__attribute__((device)) void tex3D(short *, cudaTextureObject_t, float, float, float) asm("__itex3D_short");
__attribute__((device)) void tex3D(short1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short1");
__attribute__((device)) void tex3D(short2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short2");
__attribute__((device)) void tex3D(short4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short4");
__attribute__((device)) void tex3D(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort");
__attribute__((device)) void tex3D(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort1");
__attribute__((device)) void tex3D(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort2");
__attribute__((device)) void tex3D(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort4");

__attribute__((device)) void tex3D(int *, cudaTextureObject_t, float, float, float) asm("__itex3D_int");
__attribute__((device)) void tex3D(int1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int1");
__attribute__((device)) void tex3D(int2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int2");
__attribute__((device)) void tex3D(int4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int4");
__attribute__((device)) void tex3D(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint");
__attribute__((device)) void tex3D(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint1");
__attribute__((device)) void tex3D(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint2");
__attribute__((device)) void tex3D(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint4");
# 319 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex3D(float *, cudaTextureObject_t, float, float, float) asm("__itex3D_float");
__attribute__((device)) void tex3D(float1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float1");
__attribute__((device)) void tex3D(float2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float2");
__attribute__((device)) void tex3D(float4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float4");


template <class T>
static __attribute__((device)) T tex3D(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  tex3D(&ret, texObject, x, y, z);
  return ret;
}
# 347 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1DLayered(char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char_as_schar");

__attribute__((device)) void tex1DLayered(signed char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_schar");
__attribute__((device)) void tex1DLayered(char1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char1");
__attribute__((device)) void tex1DLayered(char2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char2");
__attribute__((device)) void tex1DLayered(char4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char4");
__attribute__((device)) void tex1DLayered(unsigned char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar");
__attribute__((device)) void tex1DLayered(uchar1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar1");
__attribute__((device)) void tex1DLayered(uchar2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar2");
__attribute__((device)) void tex1DLayered(uchar4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar4");

__attribute__((device)) void tex1DLayered(short *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short");
__attribute__((device)) void tex1DLayered(short1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short1");
__attribute__((device)) void tex1DLayered(short2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short2");
__attribute__((device)) void tex1DLayered(short4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short4");
__attribute__((device)) void tex1DLayered(unsigned short *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort");
__attribute__((device)) void tex1DLayered(ushort1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort1");
__attribute__((device)) void tex1DLayered(ushort2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort2");
__attribute__((device)) void tex1DLayered(ushort4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort4");

__attribute__((device)) void tex1DLayered(int *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int");
__attribute__((device)) void tex1DLayered(int1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int1");
__attribute__((device)) void tex1DLayered(int2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int2");
__attribute__((device)) void tex1DLayered(int4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int4");
__attribute__((device)) void tex1DLayered(unsigned int *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint");
__attribute__((device)) void tex1DLayered(uint1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint1");
__attribute__((device)) void tex1DLayered(uint2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint2");
__attribute__((device)) void tex1DLayered(uint4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint4");
# 387 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1DLayered(float *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float");
__attribute__((device)) void tex1DLayered(float1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float1");
__attribute__((device)) void tex1DLayered(float2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float2");
__attribute__((device)) void tex1DLayered(float4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float4");


template <class T>
static __attribute__((device)) T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
{
  T ret;
  tex1DLayered(&ret, texObject, x, layer);
  return ret;
}
# 415 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2DLayered(char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char_as_schar");

__attribute__((device)) void tex2DLayered(signed char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_schar");
__attribute__((device)) void tex2DLayered(char1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char1");
__attribute__((device)) void tex2DLayered(char2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char2");
__attribute__((device)) void tex2DLayered(char4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char4");
__attribute__((device)) void tex2DLayered(unsigned char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar");
__attribute__((device)) void tex2DLayered(uchar1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar1");
__attribute__((device)) void tex2DLayered(uchar2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar2");
__attribute__((device)) void tex2DLayered(uchar4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar4");

__attribute__((device)) void tex2DLayered(short *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short");
__attribute__((device)) void tex2DLayered(short1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short1");
__attribute__((device)) void tex2DLayered(short2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short2");
__attribute__((device)) void tex2DLayered(short4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short4");
__attribute__((device)) void tex2DLayered(unsigned short *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort");
__attribute__((device)) void tex2DLayered(ushort1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort1");
__attribute__((device)) void tex2DLayered(ushort2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort2");
__attribute__((device)) void tex2DLayered(ushort4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort4");

__attribute__((device)) void tex2DLayered(int *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int");
__attribute__((device)) void tex2DLayered(int1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int1");
__attribute__((device)) void tex2DLayered(int2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int2");
__attribute__((device)) void tex2DLayered(int4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int4");
__attribute__((device)) void tex2DLayered(unsigned int *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint");
__attribute__((device)) void tex2DLayered(uint1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint1");
__attribute__((device)) void tex2DLayered(uint2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint2");
__attribute__((device)) void tex2DLayered(uint4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint4");
# 455 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2DLayered(float *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float");
__attribute__((device)) void tex2DLayered(float1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float1");
__attribute__((device)) void tex2DLayered(float2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float2");
__attribute__((device)) void tex2DLayered(float4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float4");


template <class T>
static __attribute__((device)) T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
{
  T ret;
  tex2DLayered(&ret, texObject, x, y, layer);
  return ret;
}
# 483 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void texCubemap(char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char_as_schar");

__attribute__((device)) void texCubemap(signed char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_schar");
__attribute__((device)) void texCubemap(char1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char1");
__attribute__((device)) void texCubemap(char2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char2");
__attribute__((device)) void texCubemap(char4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char4");
__attribute__((device)) void texCubemap(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar");
__attribute__((device)) void texCubemap(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar1");
__attribute__((device)) void texCubemap(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar2");
__attribute__((device)) void texCubemap(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar4");

__attribute__((device)) void texCubemap(short *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short");
__attribute__((device)) void texCubemap(short1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short1");
__attribute__((device)) void texCubemap(short2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short2");
__attribute__((device)) void texCubemap(short4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short4");
__attribute__((device)) void texCubemap(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort");
__attribute__((device)) void texCubemap(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort1");
__attribute__((device)) void texCubemap(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort2");
__attribute__((device)) void texCubemap(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort4");

__attribute__((device)) void texCubemap(int *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int");
__attribute__((device)) void texCubemap(int1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int1");
__attribute__((device)) void texCubemap(int2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int2");
__attribute__((device)) void texCubemap(int4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int4");
__attribute__((device)) void texCubemap(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint");
__attribute__((device)) void texCubemap(uint1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint1");
__attribute__((device)) void texCubemap(uint2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint2");
__attribute__((device)) void texCubemap(uint4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint4");
# 523 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void texCubemap(float *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float");
__attribute__((device)) void texCubemap(float1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float1");
__attribute__((device)) void texCubemap(float2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float2");
__attribute__((device)) void texCubemap(float4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float4");


template <class T>
static __attribute__((device)) T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  texCubemap(&ret, texObject, x, y, z);
  return ret;
}
# 551 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void texCubemapLayered(char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char_as_schar");


__attribute__((device)) void texCubemapLayered(signed char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_schar");
__attribute__((device)) void texCubemapLayered(char1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char1");
__attribute__((device)) void texCubemapLayered(char2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char2");
__attribute__((device)) void texCubemapLayered(char4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char4");
__attribute__((device)) void texCubemapLayered(unsigned char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar");
__attribute__((device)) void texCubemapLayered(uchar1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar1");
__attribute__((device)) void texCubemapLayered(uchar2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar2");
__attribute__((device)) void texCubemapLayered(uchar4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar4");

__attribute__((device)) void texCubemapLayered(short *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short");
__attribute__((device)) void texCubemapLayered(short1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short1");
__attribute__((device)) void texCubemapLayered(short2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short2");
__attribute__((device)) void texCubemapLayered(short4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short4");
__attribute__((device)) void texCubemapLayered(unsigned short *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort");
__attribute__((device)) void texCubemapLayered(ushort1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort1");
__attribute__((device)) void texCubemapLayered(ushort2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort2");
__attribute__((device)) void texCubemapLayered(ushort4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort4");

__attribute__((device)) void texCubemapLayered(int *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int");
__attribute__((device)) void texCubemapLayered(int1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int1");
__attribute__((device)) void texCubemapLayered(int2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int2");
__attribute__((device)) void texCubemapLayered(int4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int4");
__attribute__((device)) void texCubemapLayered(unsigned int *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint");
__attribute__((device)) void texCubemapLayered(uint1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint1");
__attribute__((device)) void texCubemapLayered(uint2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint2");
__attribute__((device)) void texCubemapLayered(uint4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint4");
# 592 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void texCubemapLayered(float *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float");
__attribute__((device)) void texCubemapLayered(float1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float1");
__attribute__((device)) void texCubemapLayered(float2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float2");
__attribute__((device)) void texCubemapLayered(float4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float4");


template <class T>
static __attribute__((device)) T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  T ret;
  texCubemapLayered(&ret, texObject, x, y, z, layer);
  return ret;
}
# 617 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2Dgather(char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char");
__attribute__((device)) void tex2Dgather(signed char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_schar");
__attribute__((device)) void tex2Dgather(char1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char1");
__attribute__((device)) void tex2Dgather(char2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char2");
__attribute__((device)) void tex2Dgather(char4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char4");
__attribute__((device)) void tex2Dgather(unsigned char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar");
__attribute__((device)) void tex2Dgather(uchar1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar1");
__attribute__((device)) void tex2Dgather(uchar2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar2");
__attribute__((device)) void tex2Dgather(uchar4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar4");

__attribute__((device)) void tex2Dgather(short *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short");
__attribute__((device)) void tex2Dgather(short1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short1");
__attribute__((device)) void tex2Dgather(short2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short2");
__attribute__((device)) void tex2Dgather(short4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short4");
__attribute__((device)) void tex2Dgather(unsigned short *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort");
__attribute__((device)) void tex2Dgather(ushort1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort1");
__attribute__((device)) void tex2Dgather(ushort2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort2");
__attribute__((device)) void tex2Dgather(ushort4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort4");

__attribute__((device)) void tex2Dgather(int *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int");
__attribute__((device)) void tex2Dgather(int1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int1");
__attribute__((device)) void tex2Dgather(int2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int2");
__attribute__((device)) void tex2Dgather(int4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int4");
__attribute__((device)) void tex2Dgather(unsigned int *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint");
__attribute__((device)) void tex2Dgather(uint1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint1");
__attribute__((device)) void tex2Dgather(uint2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint2");
__attribute__((device)) void tex2Dgather(uint4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint4");
# 654 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2Dgather(float *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float");
__attribute__((device)) void tex2Dgather(float1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float1");
__attribute__((device)) void tex2Dgather(float2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float2");
__attribute__((device)) void tex2Dgather(float4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float4");


template <class T>
static __attribute__((device)) T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
{
  T ret;
  tex2Dgather(&ret, to, x, y, comp);
  return ret;
}
# 682 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1DLod(char *, cudaTextureObject_t, float, float) asm("__itex1DLod_char_as_schar");

__attribute__((device)) void tex1DLod(signed char *, cudaTextureObject_t, float, float) asm("__itex1DLod_schar");
__attribute__((device)) void tex1DLod(char1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char1");
__attribute__((device)) void tex1DLod(char2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char2");
__attribute__((device)) void tex1DLod(char4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char4");
__attribute__((device)) void tex1DLod(unsigned char *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar");
__attribute__((device)) void tex1DLod(uchar1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar1");
__attribute__((device)) void tex1DLod(uchar2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar2");
__attribute__((device)) void tex1DLod(uchar4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar4");

__attribute__((device)) void tex1DLod(short *, cudaTextureObject_t, float, float) asm("__itex1DLod_short");
__attribute__((device)) void tex1DLod(short1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short1");
__attribute__((device)) void tex1DLod(short2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short2");
__attribute__((device)) void tex1DLod(short4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short4");
__attribute__((device)) void tex1DLod(unsigned short *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort");
__attribute__((device)) void tex1DLod(ushort1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort1");
__attribute__((device)) void tex1DLod(ushort2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort2");
__attribute__((device)) void tex1DLod(ushort4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort4");

__attribute__((device)) void tex1DLod(int *, cudaTextureObject_t, float, float) asm("__itex1DLod_int");
__attribute__((device)) void tex1DLod(int1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int1");
__attribute__((device)) void tex1DLod(int2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int2");
__attribute__((device)) void tex1DLod(int4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int4");
__attribute__((device)) void tex1DLod(unsigned int *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint");
__attribute__((device)) void tex1DLod(uint1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint1");
__attribute__((device)) void tex1DLod(uint2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint2");
__attribute__((device)) void tex1DLod(uint4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint4");
# 722 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1DLod(float *, cudaTextureObject_t, float, float) asm("__itex1DLod_float");
__attribute__((device)) void tex1DLod(float1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float1");
__attribute__((device)) void tex1DLod(float2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float2");
__attribute__((device)) void tex1DLod(float4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float4");


template <class T>
static __attribute__((device)) T tex1DLod(cudaTextureObject_t texObject, float x, float level)
{
  T ret;
  tex1DLod(&ret, texObject, x, level);
  return ret;
}
# 750 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2DLod(char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char_as_schar");


__attribute__((device)) void tex2DLod(signed char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_schar");
__attribute__((device)) void tex2DLod(char1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char1");
__attribute__((device)) void tex2DLod(char2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char2");
__attribute__((device)) void tex2DLod(char4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char4");
__attribute__((device)) void tex2DLod(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar");
__attribute__((device)) void tex2DLod(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar1");
__attribute__((device)) void tex2DLod(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar2");
__attribute__((device)) void tex2DLod(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar4");

__attribute__((device)) void tex2DLod(short *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short");
__attribute__((device)) void tex2DLod(short1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short1");
__attribute__((device)) void tex2DLod(short2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short2");
__attribute__((device)) void tex2DLod(short4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short4");
__attribute__((device)) void tex2DLod(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort");
__attribute__((device)) void tex2DLod(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort1");
__attribute__((device)) void tex2DLod(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort2");
__attribute__((device)) void tex2DLod(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort4");

__attribute__((device)) void tex2DLod(int *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int");
__attribute__((device)) void tex2DLod(int1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int1");
__attribute__((device)) void tex2DLod(int2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int2");
__attribute__((device)) void tex2DLod(int4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int4");
__attribute__((device)) void tex2DLod(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint");
__attribute__((device)) void tex2DLod(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint1");
__attribute__((device)) void tex2DLod(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint2");
__attribute__((device)) void tex2DLod(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint4");
# 791 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2DLod(float *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float");
__attribute__((device)) void tex2DLod(float1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float1");
__attribute__((device)) void tex2DLod(float2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float2");
__attribute__((device)) void tex2DLod(float4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float4");


template <class T>
static __attribute__((device)) T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
{
  T ret;
  tex2DLod(&ret, texObject, x, y, level);
  return ret;
}
# 819 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex3DLod(char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char_as_schar");

__attribute__((device)) void tex3DLod(signed char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_schar");
__attribute__((device)) void tex3DLod(char1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char1");
__attribute__((device)) void tex3DLod(char2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char2");
__attribute__((device)) void tex3DLod(char4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char4");
__attribute__((device)) void tex3DLod(unsigned char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar");
__attribute__((device)) void tex3DLod(uchar1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar1");
__attribute__((device)) void tex3DLod(uchar2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar2");
__attribute__((device)) void tex3DLod(uchar4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar4");

__attribute__((device)) void tex3DLod(short *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short");
__attribute__((device)) void tex3DLod(short1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short1");
__attribute__((device)) void tex3DLod(short2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short2");
__attribute__((device)) void tex3DLod(short4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short4");
__attribute__((device)) void tex3DLod(unsigned short *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort");
__attribute__((device)) void tex3DLod(ushort1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort1");
__attribute__((device)) void tex3DLod(ushort2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort2");
__attribute__((device)) void tex3DLod(ushort4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort4");

__attribute__((device)) void tex3DLod(int *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int");
__attribute__((device)) void tex3DLod(int1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int1");
__attribute__((device)) void tex3DLod(int2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int2");
__attribute__((device)) void tex3DLod(int4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int4");
__attribute__((device)) void tex3DLod(unsigned int *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint");
__attribute__((device)) void tex3DLod(uint1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint1");
__attribute__((device)) void tex3DLod(uint2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint2");
__attribute__((device)) void tex3DLod(uint4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint4");
# 859 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex3DLod(float *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float");
__attribute__((device)) void tex3DLod(float1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float1");
__attribute__((device)) void tex3DLod(float2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float2");
__attribute__((device)) void tex3DLod(float4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float4");


template <class T>
static __attribute__((device)) T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  tex3DLod(&ret, texObject, x, y, z, level);
  return ret;
}
# 886 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1DLayeredLod(char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char_as_schar");

__attribute__((device)) void tex1DLayeredLod(signed char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_schar");
__attribute__((device)) void tex1DLayeredLod(char1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char1");
__attribute__((device)) void tex1DLayeredLod(char2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char2");
__attribute__((device)) void tex1DLayeredLod(char4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char4");
__attribute__((device)) void tex1DLayeredLod(unsigned char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar");
__attribute__((device)) void tex1DLayeredLod(uchar1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar1");
__attribute__((device)) void tex1DLayeredLod(uchar2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar2");
__attribute__((device)) void tex1DLayeredLod(uchar4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar4");

__attribute__((device)) void tex1DLayeredLod(short *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short");
__attribute__((device)) void tex1DLayeredLod(short1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short1");
__attribute__((device)) void tex1DLayeredLod(short2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short2");
__attribute__((device)) void tex1DLayeredLod(short4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short4");
__attribute__((device)) void tex1DLayeredLod(unsigned short *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort");
__attribute__((device)) void tex1DLayeredLod(ushort1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort1");
__attribute__((device)) void tex1DLayeredLod(ushort2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort2");
__attribute__((device)) void tex1DLayeredLod(ushort4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort4");

__attribute__((device)) void tex1DLayeredLod(int *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int");
__attribute__((device)) void tex1DLayeredLod(int1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int1");
__attribute__((device)) void tex1DLayeredLod(int2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int2");
__attribute__((device)) void tex1DLayeredLod(int4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int4");
__attribute__((device)) void tex1DLayeredLod(unsigned int *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint");
__attribute__((device)) void tex1DLayeredLod(uint1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint1");
__attribute__((device)) void tex1DLayeredLod(uint2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint2");
__attribute__((device)) void tex1DLayeredLod(uint4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint4");
# 926 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1DLayeredLod(float *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float");
__attribute__((device)) void tex1DLayeredLod(float1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float1");
__attribute__((device)) void tex1DLayeredLod(float2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float2");
__attribute__((device)) void tex1DLayeredLod(float4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float4");


template <class T>
static __attribute__((device)) T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
{
  T ret;
  tex1DLayeredLod(&ret, texObject, x, layer, level);
  return ret;
}
# 954 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2DLayeredLod(char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char_as_schar");

__attribute__((device)) void tex2DLayeredLod(signed char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_schar");
__attribute__((device)) void tex2DLayeredLod(char1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char1");
__attribute__((device)) void tex2DLayeredLod(char2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char2");
__attribute__((device)) void tex2DLayeredLod(char4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char4");
__attribute__((device)) void tex2DLayeredLod(unsigned char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar");
__attribute__((device)) void tex2DLayeredLod(uchar1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar1");
__attribute__((device)) void tex2DLayeredLod(uchar2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar2");
__attribute__((device)) void tex2DLayeredLod(uchar4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar4");

__attribute__((device)) void tex2DLayeredLod(short *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short");
__attribute__((device)) void tex2DLayeredLod(short1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short1");
__attribute__((device)) void tex2DLayeredLod(short2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short2");
__attribute__((device)) void tex2DLayeredLod(short4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short4");
__attribute__((device)) void tex2DLayeredLod(unsigned short *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort");
__attribute__((device)) void tex2DLayeredLod(ushort1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort1");
__attribute__((device)) void tex2DLayeredLod(ushort2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort2");
__attribute__((device)) void tex2DLayeredLod(ushort4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort4");

__attribute__((device)) void tex2DLayeredLod(int *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int");
__attribute__((device)) void tex2DLayeredLod(int1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int1");
__attribute__((device)) void tex2DLayeredLod(int2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int2");
__attribute__((device)) void tex2DLayeredLod(int4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int4");
__attribute__((device)) void tex2DLayeredLod(unsigned int *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint");
__attribute__((device)) void tex2DLayeredLod(uint1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint1");
__attribute__((device)) void tex2DLayeredLod(uint2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint2");
__attribute__((device)) void tex2DLayeredLod(uint4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint4");
# 994 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2DLayeredLod(float *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float");
__attribute__((device)) void tex2DLayeredLod(float1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float1");
__attribute__((device)) void tex2DLayeredLod(float2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float2");
__attribute__((device)) void tex2DLayeredLod(float4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float4");


template <class T>
static __attribute__((device)) T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level);
  return ret;
}
# 1021 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void texCubemapLod(char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char_as_schar");

__attribute__((device)) void texCubemapLod(signed char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_schar");
__attribute__((device)) void texCubemapLod(char1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char1");
__attribute__((device)) void texCubemapLod(char2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char2");
__attribute__((device)) void texCubemapLod(char4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char4");
__attribute__((device)) void texCubemapLod(unsigned char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar");
__attribute__((device)) void texCubemapLod(uchar1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar1");
__attribute__((device)) void texCubemapLod(uchar2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar2");
__attribute__((device)) void texCubemapLod(uchar4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar4");

__attribute__((device)) void texCubemapLod(short *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short");
__attribute__((device)) void texCubemapLod(short1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short1");
__attribute__((device)) void texCubemapLod(short2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short2");
__attribute__((device)) void texCubemapLod(short4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short4");
__attribute__((device)) void texCubemapLod(unsigned short *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort");
__attribute__((device)) void texCubemapLod(ushort1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort1");
__attribute__((device)) void texCubemapLod(ushort2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort2");
__attribute__((device)) void texCubemapLod(ushort4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort4");

__attribute__((device)) void texCubemapLod(int *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int");
__attribute__((device)) void texCubemapLod(int1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int1");
__attribute__((device)) void texCubemapLod(int2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int2");
__attribute__((device)) void texCubemapLod(int4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int4");
__attribute__((device)) void texCubemapLod(unsigned int *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint");
__attribute__((device)) void texCubemapLod(uint1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint1");
__attribute__((device)) void texCubemapLod(uint2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint2");
__attribute__((device)) void texCubemapLod(uint4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint4");
# 1061 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void texCubemapLod(float *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float");
__attribute__((device)) void texCubemapLod(float1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float1");
__attribute__((device)) void texCubemapLod(float2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float2");
__attribute__((device)) void texCubemapLod(float4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float4");


template <class T>
static __attribute__((device)) T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  texCubemapLod(&ret, texObject, x, y, z, level);
  return ret;
}
# 1088 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void texCubemapLayeredLod(char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char_as_schar");

__attribute__((device)) void texCubemapLayeredLod(signed char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_schar");
__attribute__((device)) void texCubemapLayeredLod(char1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char1");
__attribute__((device)) void texCubemapLayeredLod(char2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char2");
__attribute__((device)) void texCubemapLayeredLod(char4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char4");
__attribute__((device)) void texCubemapLayeredLod(unsigned char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar");
__attribute__((device)) void texCubemapLayeredLod(uchar1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar1");
__attribute__((device)) void texCubemapLayeredLod(uchar2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar2");
__attribute__((device)) void texCubemapLayeredLod(uchar4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar4");

__attribute__((device)) void texCubemapLayeredLod(short *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short");
__attribute__((device)) void texCubemapLayeredLod(short1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short1");
__attribute__((device)) void texCubemapLayeredLod(short2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short2");
__attribute__((device)) void texCubemapLayeredLod(short4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short4");
__attribute__((device)) void texCubemapLayeredLod(unsigned short *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort");
__attribute__((device)) void texCubemapLayeredLod(ushort1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort1");
__attribute__((device)) void texCubemapLayeredLod(ushort2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort2");
__attribute__((device)) void texCubemapLayeredLod(ushort4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort4");

__attribute__((device)) void texCubemapLayeredLod(int *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int");
__attribute__((device)) void texCubemapLayeredLod(int1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int1");
__attribute__((device)) void texCubemapLayeredLod(int2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int2");
__attribute__((device)) void texCubemapLayeredLod(int4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int4");
__attribute__((device)) void texCubemapLayeredLod(unsigned int *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint");
__attribute__((device)) void texCubemapLayeredLod(uint1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint1");
__attribute__((device)) void texCubemapLayeredLod(uint2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint2");
__attribute__((device)) void texCubemapLayeredLod(uint4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint4");
# 1128 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void texCubemapLayeredLod(float *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float");
__attribute__((device)) void texCubemapLayeredLod(float1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float1");
__attribute__((device)) void texCubemapLayeredLod(float2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float2");
__attribute__((device)) void texCubemapLayeredLod(float4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float4");


template <class T>
static __attribute__((device)) T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  T ret;
  texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level);
  return ret;
}
# 1155 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1DGrad(char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char_as_schar");


__attribute__((device)) void tex1DGrad(signed char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_schar");
__attribute__((device)) void tex1DGrad(char1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char1");
__attribute__((device)) void tex1DGrad(char2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char2");
__attribute__((device)) void tex1DGrad(char4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char4");
__attribute__((device)) void tex1DGrad(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar");
__attribute__((device)) void tex1DGrad(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar1");
__attribute__((device)) void tex1DGrad(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar2");
__attribute__((device)) void tex1DGrad(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar4");

__attribute__((device)) void tex1DGrad(short *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short");
__attribute__((device)) void tex1DGrad(short1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short1");
__attribute__((device)) void tex1DGrad(short2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short2");
__attribute__((device)) void tex1DGrad(short4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short4");
__attribute__((device)) void tex1DGrad(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort");
__attribute__((device)) void tex1DGrad(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort1");
__attribute__((device)) void tex1DGrad(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort2");
__attribute__((device)) void tex1DGrad(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort4");

__attribute__((device)) void tex1DGrad(int *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int");
__attribute__((device)) void tex1DGrad(int1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int1");
__attribute__((device)) void tex1DGrad(int2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int2");
__attribute__((device)) void tex1DGrad(int4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int4");
__attribute__((device)) void tex1DGrad(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint");
__attribute__((device)) void tex1DGrad(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint1");
__attribute__((device)) void tex1DGrad(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint2");
__attribute__((device)) void tex1DGrad(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint4");
# 1196 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1DGrad(float *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float");
__attribute__((device)) void tex1DGrad(float1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float1");
__attribute__((device)) void tex1DGrad(float2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float2");
__attribute__((device)) void tex1DGrad(float4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float4");


template <class T>
static __attribute__((device)) T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  T ret;
  tex1DGrad(&ret, texObject, x, dPdx, dPdy);
  return ret;
}
# 1223 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2DGrad(char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char_as_schar");

__attribute__((device)) void tex2DGrad(signed char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_schar");
__attribute__((device)) void tex2DGrad(char1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char1");
__attribute__((device)) void tex2DGrad(char2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char2");
__attribute__((device)) void tex2DGrad(char4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char4");
__attribute__((device)) void tex2DGrad(unsigned char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar");
__attribute__((device)) void tex2DGrad(uchar1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar1");
__attribute__((device)) void tex2DGrad(uchar2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar2");
__attribute__((device)) void tex2DGrad(uchar4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar4");

__attribute__((device)) void tex2DGrad(short *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short");
__attribute__((device)) void tex2DGrad(short1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short1");
__attribute__((device)) void tex2DGrad(short2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short2");
__attribute__((device)) void tex2DGrad(short4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short4");
__attribute__((device)) void tex2DGrad(unsigned short *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort");
__attribute__((device)) void tex2DGrad(ushort1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort1");
__attribute__((device)) void tex2DGrad(ushort2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort2");
__attribute__((device)) void tex2DGrad(ushort4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort4");

__attribute__((device)) void tex2DGrad(int *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int");
__attribute__((device)) void tex2DGrad(int1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int1");
__attribute__((device)) void tex2DGrad(int2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int2");
__attribute__((device)) void tex2DGrad(int4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int4");
__attribute__((device)) void tex2DGrad(unsigned int *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint");
__attribute__((device)) void tex2DGrad(uint1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint1");
__attribute__((device)) void tex2DGrad(uint2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint2");
__attribute__((device)) void tex2DGrad(uint4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint4");
# 1263 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2DGrad(float *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float");
__attribute__((device)) void tex2DGrad(float1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float1");
__attribute__((device)) void tex2DGrad(float2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float2");
__attribute__((device)) void tex2DGrad(float4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float4");


template <class T>
static __attribute__((device)) T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy);
  return ret;
}
# 1290 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex3DGrad(char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char_as_schar");

__attribute__((device)) void tex3DGrad(signed char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_schar");
__attribute__((device)) void tex3DGrad(char1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char1");
__attribute__((device)) void tex3DGrad(char2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char2");
__attribute__((device)) void tex3DGrad(char4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char4");
__attribute__((device)) void tex3DGrad(unsigned char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar");
__attribute__((device)) void tex3DGrad(uchar1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar1");
__attribute__((device)) void tex3DGrad(uchar2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar2");
__attribute__((device)) void tex3DGrad(uchar4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar4");

__attribute__((device)) void tex3DGrad(short *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short");
__attribute__((device)) void tex3DGrad(short1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short1");
__attribute__((device)) void tex3DGrad(short2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short2");
__attribute__((device)) void tex3DGrad(short4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short4");
__attribute__((device)) void tex3DGrad(unsigned short *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort");
__attribute__((device)) void tex3DGrad(ushort1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort1");
__attribute__((device)) void tex3DGrad(ushort2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort2");
__attribute__((device)) void tex3DGrad(ushort4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort4");

__attribute__((device)) void tex3DGrad(int *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int");
__attribute__((device)) void tex3DGrad(int1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int1");
__attribute__((device)) void tex3DGrad(int2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int2");
__attribute__((device)) void tex3DGrad(int4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int4");
__attribute__((device)) void tex3DGrad(unsigned int *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint");
__attribute__((device)) void tex3DGrad(uint1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint1");
__attribute__((device)) void tex3DGrad(uint2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint2");
__attribute__((device)) void tex3DGrad(uint4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint4");
# 1330 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex3DGrad(float *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float");
__attribute__((device)) void tex3DGrad(float1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float1");
__attribute__((device)) void tex3DGrad(float2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float2");
__attribute__((device)) void tex3DGrad(float4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float4");


template <class T>
static __attribute__((device)) T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
}
# 1357 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1DLayeredGrad(char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char_as_schar");


__attribute__((device)) void tex1DLayeredGrad(signed char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_schar");
__attribute__((device)) void tex1DLayeredGrad(char1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char1");
__attribute__((device)) void tex1DLayeredGrad(char2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char2");
__attribute__((device)) void tex1DLayeredGrad(char4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char4");
__attribute__((device)) void tex1DLayeredGrad(unsigned char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar");
__attribute__((device)) void tex1DLayeredGrad(uchar1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar1");
__attribute__((device)) void tex1DLayeredGrad(uchar2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar2");
__attribute__((device)) void tex1DLayeredGrad(uchar4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar4");

__attribute__((device)) void tex1DLayeredGrad(short *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short");
__attribute__((device)) void tex1DLayeredGrad(short1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short1");
__attribute__((device)) void tex1DLayeredGrad(short2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short2");
__attribute__((device)) void tex1DLayeredGrad(short4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short4");
__attribute__((device)) void tex1DLayeredGrad(unsigned short *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort");
__attribute__((device)) void tex1DLayeredGrad(ushort1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort1");
__attribute__((device)) void tex1DLayeredGrad(ushort2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort2");
__attribute__((device)) void tex1DLayeredGrad(ushort4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort4");

__attribute__((device)) void tex1DLayeredGrad(int *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int");
__attribute__((device)) void tex1DLayeredGrad(int1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int1");
__attribute__((device)) void tex1DLayeredGrad(int2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int2");
__attribute__((device)) void tex1DLayeredGrad(int4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int4");
__attribute__((device)) void tex1DLayeredGrad(unsigned int *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint");
__attribute__((device)) void tex1DLayeredGrad(uint1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint1");
__attribute__((device)) void tex1DLayeredGrad(uint2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint2");
__attribute__((device)) void tex1DLayeredGrad(uint4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint4");
# 1398 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex1DLayeredGrad(float *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float");
__attribute__((device)) void tex1DLayeredGrad(float1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float1");
__attribute__((device)) void tex1DLayeredGrad(float2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float2");
__attribute__((device)) void tex1DLayeredGrad(float4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float4");


template <class T>
static __attribute__((device)) T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  T ret;
  tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy);
  return ret;
}
# 1425 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2DLayeredGrad(char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char_as_schar");

__attribute__((device)) void tex2DLayeredGrad(signed char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_schar");
__attribute__((device)) void tex2DLayeredGrad(char1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char1");
__attribute__((device)) void tex2DLayeredGrad(char2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char2");
__attribute__((device)) void tex2DLayeredGrad(char4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char4");
__attribute__((device)) void tex2DLayeredGrad(unsigned char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar");
__attribute__((device)) void tex2DLayeredGrad(uchar1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar1");
__attribute__((device)) void tex2DLayeredGrad(uchar2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar2");
__attribute__((device)) void tex2DLayeredGrad(uchar4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar4");

__attribute__((device)) void tex2DLayeredGrad(short *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short");
__attribute__((device)) void tex2DLayeredGrad(short1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short1");
__attribute__((device)) void tex2DLayeredGrad(short2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short2");
__attribute__((device)) void tex2DLayeredGrad(short4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short4");
__attribute__((device)) void tex2DLayeredGrad(unsigned short *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort");
__attribute__((device)) void tex2DLayeredGrad(ushort1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort1");
__attribute__((device)) void tex2DLayeredGrad(ushort2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort2");
__attribute__((device)) void tex2DLayeredGrad(ushort4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort4");

__attribute__((device)) void tex2DLayeredGrad(int *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int");
__attribute__((device)) void tex2DLayeredGrad(int1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int1");
__attribute__((device)) void tex2DLayeredGrad(int2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int2");
__attribute__((device)) void tex2DLayeredGrad(int4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int4");
__attribute__((device)) void tex2DLayeredGrad(unsigned int *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint");
__attribute__((device)) void tex2DLayeredGrad(uint1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint1");
__attribute__((device)) void tex2DLayeredGrad(uint2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint2");
__attribute__((device)) void tex2DLayeredGrad(uint4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint4");
# 1465 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 3
__attribute__((device)) void tex2DLayeredGrad(float *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float");
__attribute__((device)) void tex2DLayeredGrad(float1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float1");
__attribute__((device)) void tex2DLayeredGrad(float2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float2");
__attribute__((device)) void tex2DLayeredGrad(float4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float4");


template <class T>
static __attribute__((device)) T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy);
  return ret;
}
# 328 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 337 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
extern "C" {





__attribute__((device)) int vprintf(const char *, const char *);
__attribute__((device)) void free(void *) __attribute((nothrow));
__attribute__((device)) void *malloc(size_t) __attribute((nothrow)) __attribute__((malloc));
__attribute__((device)) void __assertfail(const char *__message, const char *__file,
                             unsigned __line, const char *__function,
                             size_t __charSize) __attribute__((noreturn));



__attribute__((device)) static inline void __assert_fail(const char *__message,
                                            const char *__file, unsigned __line,
                                            const char *__function) {
  __assertfail(__message, __file, __line, __function, sizeof(char));
}



__attribute__((device)) int printf(const char *, ...);
}


namespace std {
__attribute__((device)) static inline void free(void *__ptr) { ::free(__ptr); }
__attribute__((device)) static inline void *malloc(size_t __size) {
  return ::malloc(__size);
}
}




__attribute__((device)) inline __cuda_builtin_threadIdx_t::operator uint3() const {
  uint3 ret;
  ret.x = x;
  ret.y = y;
  ret.z = z;
  return ret;
}

__attribute__((device)) inline __cuda_builtin_blockIdx_t::operator uint3() const {
  uint3 ret;
  ret.x = x;
  ret.y = y;
  ret.z = z;
  return ret;
}

__attribute__((device)) inline __cuda_builtin_blockDim_t::operator dim3() const {
  return dim3(x, y, z);
}

__attribute__((device)) inline __cuda_builtin_gridDim_t::operator dim3() const {
  return dim3(x, y, z);
}


# 1 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_cmath.h" 1 3
# 29 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_cmath.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 1 3
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
# 158 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 202 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
  struct __numeric_limits_base
  {


    static const bool is_specialized = false;




    static const int digits = 0;


    static const int digits10 = 0;
# 223 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
    static const bool is_signed = false;


    static const bool is_integer = false;




    static const bool is_exact = false;



    static const int radix = 0;



    static const int min_exponent = 0;



    static const int min_exponent10 = 0;




    static const int max_exponent = 0;



    static const int max_exponent10 = 0;


    static const bool has_infinity = false;



    static const bool has_quiet_NaN = false;



    static const bool has_signaling_NaN = false;


    static const float_denorm_style has_denorm = denorm_absent;



    static const bool has_denorm_loss = false;



    static const bool is_iec559 = false;




    static const bool is_bounded = false;
# 288 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
    static const bool is_modulo = false;


    static const bool traps = false;


    static const bool tinyness_before = false;




    static const float_round_style round_style =
          round_toward_zero;
  };
# 314 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static _Tp
      min() throw() { return _Tp(); }


      static _Tp
      max() throw() { return _Tp(); }
# 335 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
      static _Tp
      epsilon() throw() { return _Tp(); }


      static _Tp
      round_error() throw() { return _Tp(); }


      static _Tp
      infinity() throw() { return _Tp(); }



      static _Tp
      quiet_NaN() throw() { return _Tp(); }



      static _Tp
      signaling_NaN() throw() { return _Tp(); }




      static _Tp
      denorm_min() throw() { return _Tp(); }
    };
# 381 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static const bool is_specialized = true;

      static bool
      min() throw() { return false; }

      static bool
      max() throw() { return true; }





      static const int digits = 1;
      static const int digits10 = 0;



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static bool
      epsilon() throw() { return false; }

      static bool
      round_error() throw() { return false; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static bool
      infinity() throw() { return false; }

      static bool
      quiet_NaN() throw() { return false; }

      static bool
      signaling_NaN() throw() { return false; }

      static bool
      denorm_min() throw() { return false; }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;




      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static const bool is_specialized = true;

      static char
      min() throw() { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static char
      max() throw() { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }






      static const int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static const int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = ((char)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static char
      epsilon() throw() { return 0; }

      static char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static
      char infinity() throw() { return char(); }

      static char
      quiet_NaN() throw() { return char(); }

      static char
      signaling_NaN() throw() { return char(); }

      static char
      denorm_min() throw() { return static_cast<char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = !is_signed;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static const bool is_specialized = true;

      static signed char
      min() throw() { return -127 - 1; }

      static signed char
      max() throw() { return 127; }






      static const int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static const int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static signed char
      epsilon() throw() { return 0; }

      static signed char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static signed char
      infinity() throw() { return static_cast<signed char>(0); }

      static signed char
      quiet_NaN() throw() { return static_cast<signed char>(0); }

      static signed char
      signaling_NaN() throw()
      { return static_cast<signed char>(0); }

      static signed char
      denorm_min() throw()
      { return static_cast<signed char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static const bool is_specialized = true;

      static unsigned char
      min() throw() { return 0; }

      static unsigned char
      max() throw() { return 127 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned char
      epsilon() throw() { return 0; }

      static unsigned char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned char
      infinity() throw()
      { return static_cast<unsigned char>(0); }

      static unsigned char
      quiet_NaN() throw()
      { return static_cast<unsigned char>(0); }

      static unsigned char
      signaling_NaN() throw()
      { return static_cast<unsigned char>(0); }

      static unsigned char
      denorm_min() throw()
      { return static_cast<unsigned char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static const bool is_specialized = true;

      static wchar_t
      min() throw() { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static wchar_t
      max() throw() { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }






      static const int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static const int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = ((wchar_t)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static wchar_t
      epsilon() throw() { return 0; }

      static wchar_t
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static wchar_t
      infinity() throw() { return wchar_t(); }

      static wchar_t
      quiet_NaN() throw() { return wchar_t(); }

      static wchar_t
      signaling_NaN() throw() { return wchar_t(); }

      static wchar_t
      denorm_min() throw() { return wchar_t(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = !is_signed;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };
# 852 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
  template<>
    struct numeric_limits<short>
    {
      static const bool is_specialized = true;

      static short
      min() throw() { return -32767 - 1; }

      static short
      max() throw() { return 32767; }






      static const int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static const int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static short
      epsilon() throw() { return 0; }

      static short
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static short
      infinity() throw() { return short(); }

      static short
      quiet_NaN() throw() { return short(); }

      static short
      signaling_NaN() throw() { return short(); }

      static short
      denorm_min() throw() { return short(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static const bool is_specialized = true;

      static unsigned short
      min() throw() { return 0; }

      static unsigned short
      max() throw() { return 32767 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned short
      epsilon() throw() { return 0; }

      static unsigned short
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned short
      infinity() throw()
      { return static_cast<unsigned short>(0); }

      static unsigned short
      quiet_NaN() throw()
      { return static_cast<unsigned short>(0); }

      static unsigned short
      signaling_NaN() throw()
      { return static_cast<unsigned short>(0); }

      static unsigned short
      denorm_min() throw()
      { return static_cast<unsigned short>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static const bool is_specialized = true;

      static int
      min() throw() { return -2147483647 - 1; }

      static int
      max() throw() { return 2147483647; }






      static const int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static const int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static int
      epsilon() throw() { return 0; }

      static int
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static int
      infinity() throw() { return static_cast<int>(0); }

      static int
      quiet_NaN() throw() { return static_cast<int>(0); }

      static int
      signaling_NaN() throw() { return static_cast<int>(0); }

      static int
      denorm_min() throw() { return static_cast<int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static const bool is_specialized = true;

      static unsigned int
      min() throw() { return 0; }

      static unsigned int
      max() throw() { return 2147483647 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned int
      epsilon() throw() { return 0; }

      static unsigned int
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned int
      infinity() throw() { return static_cast<unsigned int>(0); }

      static unsigned int
      quiet_NaN() throw()
      { return static_cast<unsigned int>(0); }

      static unsigned int
      signaling_NaN() throw()
      { return static_cast<unsigned int>(0); }

      static unsigned int
      denorm_min() throw()
      { return static_cast<unsigned int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static const bool is_specialized = true;

      static long
      min() throw() { return -9223372036854775807L - 1; }

      static long
      max() throw() { return 9223372036854775807L; }






      static const int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static const int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static long
      epsilon() throw() { return 0; }

      static long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static long
      infinity() throw() { return static_cast<long>(0); }

      static long
      quiet_NaN() throw() { return static_cast<long>(0); }

      static long
      signaling_NaN() throw() { return static_cast<long>(0); }

      static long
      denorm_min() throw() { return static_cast<long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static const bool is_specialized = true;

      static unsigned long
      min() throw() { return 0; }

      static unsigned long
      max() throw() { return 9223372036854775807L * 2UL + 1; }






      static const int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned long
      epsilon() throw() { return 0; }

      static unsigned long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long
      infinity() throw()
      { return static_cast<unsigned long>(0); }

      static unsigned long
      quiet_NaN() throw()
      { return static_cast<unsigned long>(0); }

      static unsigned long
      signaling_NaN() throw()
      { return static_cast<unsigned long>(0); }

      static unsigned long
      denorm_min() throw()
      { return static_cast<unsigned long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static const bool is_specialized = true;

      static long long
      min() throw() { return -9223372036854775807LL - 1; }

      static long long
      max() throw() { return 9223372036854775807LL; }






      static const int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static const int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static long long
      epsilon() throw() { return 0; }

      static long long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static long long
      infinity() throw() { return static_cast<long long>(0); }

      static long long
      quiet_NaN() throw() { return static_cast<long long>(0); }

      static long long
      signaling_NaN() throw()
      { return static_cast<long long>(0); }

      static long long
      denorm_min() throw() { return static_cast<long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static const bool is_specialized = true;

      static unsigned long long
      min() throw() { return 0; }

      static unsigned long long
      max() throw() { return 9223372036854775807LL * 2ULL + 1; }






      static const int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned long long
      epsilon() throw() { return 0; }

      static unsigned long long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long long
      infinity() throw()
      { return static_cast<unsigned long long>(0); }

      static unsigned long long
      quiet_NaN() throw()
      { return static_cast<unsigned long long>(0); }

      static unsigned long long
      signaling_NaN() throw()
      { return static_cast<unsigned long long>(0); }

      static unsigned long long
      denorm_min() throw()
      { return static_cast<unsigned long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };
# 1592 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
  template<>
    struct numeric_limits<float>
    {
      static const bool is_specialized = true;

      static float
      min() throw() { return 1.17549435e-38F; }

      static float
      max() throw() { return 3.40282347e+38F; }






      static const int digits = 24;
      static const int digits10 = 6;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static float
      epsilon() throw() { return 1.19209290e-7F; }

      static float
      round_error() throw() { return 0.5F; }

      static const int min_exponent = (-125);
      static const int min_exponent10 = (-37);
      static const int max_exponent = 128;
      static const int max_exponent10 = 38;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
       = false;

      static float
      infinity() throw() { return __builtin_huge_valf(); }

      static float
      quiet_NaN() throw() { return __builtin_nanf(""); }

      static float
      signaling_NaN() throw() { return __builtin_nansf(""); }

      static float
      denorm_min() throw() { return 1.40129846e-45F; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before
       = false;
      static const float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static const bool is_specialized = true;

      static double
      min() throw() { return 2.2250738585072014e-308; }

      static double
      max() throw() { return 1.7976931348623157e+308; }






      static const int digits = 53;
      static const int digits10 = 15;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static double
      epsilon() throw() { return 2.2204460492503131e-16; }

      static double
      round_error() throw() { return 0.5; }

      static const int min_exponent = (-1021);
      static const int min_exponent10 = (-307);
      static const int max_exponent = 1024;
      static const int max_exponent10 = 308;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
        = false;

      static double
      infinity() throw() { return __builtin_huge_val(); }

      static double
      quiet_NaN() throw() { return __builtin_nan(""); }

      static double
      signaling_NaN() throw() { return __builtin_nans(""); }

      static double
      denorm_min() throw() { return 4.9406564584124654e-324; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before
       = false;
      static const float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static const bool is_specialized = true;

      static long double
      min() throw() { return 3.36210314311209350626e-4932L; }

      static long double
      max() throw() { return 1.18973149535723176502e+4932L; }






      static const int digits = 64;
      static const int digits10 = 18;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static long double
      epsilon() throw() { return 1.08420217248550443401e-19L; }

      static long double
      round_error() throw() { return 0.5L; }

      static const int min_exponent = (-16381);
      static const int min_exponent10 = (-4931);
      static const int max_exponent = 16384;
      static const int max_exponent10 = 4932;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
 = false;

      static long double
      infinity() throw() { return __builtin_huge_vall(); }

      static long double
      quiet_NaN() throw() { return __builtin_nanl(""); }

      static long double
      signaling_NaN() throw() { return __builtin_nansl(""); }

      static long double
      denorm_min() throw() { return 3.64519953188247460253e-4951L; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before =
      false;
      static const float_round_style round_style =
            round_to_nearest;
    };






}
# 30 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_cmath.h" 2 3
# 49 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_cmath.h" 3
static __attribute__((device)) __inline__ __attribute__((always_inline)) long long abs(long long __n) { return ::llabs(__n); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) long abs(long __n) { return ::labs(__n); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float abs(float __x) { return ::fabsf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) double abs(double __x) { return ::fabs(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float acos(float __x) { return ::acosf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float asin(float __x) { return ::asinf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float atan(float __x) { return ::atanf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float atan2(float __x, float __y) { return ::atan2f(__x, __y); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float ceil(float __x) { return ::ceilf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float cos(float __x) { return ::cosf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float cosh(float __x) { return ::coshf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float exp(float __x) { return ::expf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float fabs(float __x) { return ::fabsf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float floor(float __x) { return ::floorf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float fmod(float __x, float __y) { return ::fmodf(__x, __y); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) int fpclassify(float __x) {
  return __builtin_fpclassify(0, 1, 4, 3,
                              2, __x);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) int fpclassify(double __x) {
  return __builtin_fpclassify(0, 1, 4, 3,
                              2, __x);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) float frexp(float __arg, int *__exp) {
  return ::frexpf(__arg, __exp);
}




static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isinf(float __x) { return ::__isinff(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isinf(double __x) { return ::__isinf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isfinite(float __x) { return ::__finitef(__x); }



static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isfinite(double __x) { return ::__isfinited(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isnan(float __x) { return ::__isnanf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isnan(double __x) { return ::__isnan(__x); }


static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isgreater(float __x, float __y) {
  return __builtin_isgreater(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isgreater(double __x, double __y) {
  return __builtin_isgreater(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isgreaterequal(float __x, float __y) {
  return __builtin_isgreaterequal(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isgreaterequal(double __x, double __y) {
  return __builtin_isgreaterequal(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isless(float __x, float __y) {
  return __builtin_isless(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isless(double __x, double __y) {
  return __builtin_isless(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool islessequal(float __x, float __y) {
  return __builtin_islessequal(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool islessequal(double __x, double __y) {
  return __builtin_islessequal(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool islessgreater(float __x, float __y) {
  return __builtin_islessgreater(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool islessgreater(double __x, double __y) {
  return __builtin_islessgreater(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isnormal(float __x) { return __builtin_isnormal(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isnormal(double __x) { return __builtin_isnormal(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isunordered(float __x, float __y) {
  return __builtin_isunordered(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool isunordered(double __x, double __y) {
  return __builtin_isunordered(__x, __y);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) float ldexp(float __arg, int __exp) {
  return ::ldexpf(__arg, __exp);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) float log(float __x) { return ::logf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float log10(float __x) { return ::log10f(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float modf(float __x, float *__iptr) { return ::modff(__x, __iptr); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float pow(float __base, float __exp) {
  return ::powf(__base, __exp);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) float pow(float __base, int __iexp) {
  return ::powif(__base, __iexp);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) double pow(double __base, int __iexp) {
  return ::powi(__base, __iexp);
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool signbit(float __x) { return ::__signbitf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) bool signbit(double __x) { return ::__signbitd(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float sin(float __x) { return ::sinf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float sinh(float __x) { return ::sinhf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float sqrt(float __x) { return ::sqrtf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float tan(float __x) { return ::tanf(__x); }
static __attribute__((device)) __inline__ __attribute__((always_inline)) float tanh(float __x) { return ::tanhf(__x); }
# 170 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_cmath.h" 3
template<bool __B, class __T = void>
struct __clang_cuda_enable_if {};

template <class __T> struct __clang_cuda_enable_if<true, __T> {
  typedef __T type;
};
# 203 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_cmath.h" 3
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type acos(__T __x) { return ::acos((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type acosh(__T __x) { return ::acosh((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type asin(__T __x) { return ::asin((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type asinh(__T __x) { return ::asinh((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type atan(__T __x) { return ::atan((double)__x); }
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, double>::type atan2(__T1 __x, __T2 __y) { return atan2((double)__x, (double)__y); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type atanh(__T __x) { return ::atanh((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type cbrt(__T __x) { return ::cbrt((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type ceil(__T __x) { return ::ceil((double)__x); }
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, double>::type copysign(__T1 __x, __T2 __y) { return copysign((double)__x, (double)__y); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type cos(__T __x) { return ::cos((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type cosh(__T __x) { return ::cosh((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type erf(__T __x) { return ::erf((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type erfc(__T __x) { return ::erfc((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type exp(__T __x) { return ::exp((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type exp2(__T __x) { return ::exp2((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type expm1(__T __x) { return ::expm1((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type fabs(__T __x) { return ::fabs((double)__x); }
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, double>::type fdim(__T1 __x, __T2 __y) { return fdim((double)__x, (double)__y); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type floor(__T __x) { return ::floor((double)__x); }
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, double>::type fmax(__T1 __x, __T2 __y) { return fmax((double)__x, (double)__y); };
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, double>::type fmin(__T1 __x, __T2 __y) { return fmin((double)__x, (double)__y); };
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, double>::type fmod(__T1 __x, __T2 __y) { return fmod((double)__x, (double)__y); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, int>::type fpclassify(__T __x) { return ::fpclassify((double)__x); }
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, double>::type hypot(__T1 __x, __T2 __y) { return hypot((double)__x, (double)__y); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, int>::type ilogb(__T __x) { return ::ilogb((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, bool>::type isfinite(__T __x) { return ::isfinite((double)__x); }
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, bool>::type isgreater(__T1 __x, __T2 __y) { return isgreater((double)__x, (double)__y); };
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, bool>::type isgreaterequal(__T1 __x, __T2 __y) { return isgreaterequal((double)__x, (double)__y); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, bool>::type isinf(__T __x) { return ::isinf((double)__x); };
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, bool>::type isless(__T1 __x, __T2 __y) { return isless((double)__x, (double)__y); };
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, bool>::type islessequal(__T1 __x, __T2 __y) { return islessequal((double)__x, (double)__y); };
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, bool>::type islessgreater(__T1 __x, __T2 __y) { return islessgreater((double)__x, (double)__y); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, bool>::type isnan(__T __x) { return ::isnan((double)__x); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, bool>::type isnormal(__T __x) { return ::isnormal((double)__x); }
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, bool>::type isunordered(__T1 __x, __T2 __y) { return isunordered((double)__x, (double)__y); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type lgamma(__T __x) { return ::lgamma((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type log(__T __x) { return ::log((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type log10(__T __x) { return ::log10((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type log1p(__T __x) { return ::log1p((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type log2(__T __x) { return ::log2((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type logb(__T __x) { return ::logb((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, long long>::type llrint(__T __x) { return ::llrint((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, long long>::type llround(__T __x) { return ::llround((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, long>::type lrint(__T __x) { return ::lrint((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, long>::type lround(__T __x) { return ::lround((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type nearbyint(__T __x) { return ::nearbyint((double)__x); };
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, double>::type nextafter(__T1 __x, __T2 __y) { return nextafter((double)__x, (double)__y); };
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, double>::type pow(__T1 __x, __T2 __y) { return pow((double)__x, (double)__y); };
template <typename __T1, typename __T2> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if< std::numeric_limits<__T1>::is_specialized && std::numeric_limits<__T2>::is_specialized, double>::type remainder(__T1 __x, __T2 __y) { return remainder((double)__x, (double)__y); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type rint(__T __x) { return ::rint((double)__x); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type round(__T __x) { return ::round((double)__x); };
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, bool>::type signbit(__T __x) { return ::signbit((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type sin(__T __x) { return ::sin((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type sinh(__T __x) { return ::sinh((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type sqrt(__T __x) { return ::sqrt((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type tan(__T __x) { return ::tan((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type tanh(__T __x) { return ::tanh((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type tgamma(__T __x) { return ::tgamma((double)__x); }
template <typename __T> static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer, double>::type trunc(__T __x) { return ::trunc((double)__x); };






template <typename __T1, typename __T2, typename __T3>
static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<
    std::numeric_limits<__T1>::is_specialized &&
        std::numeric_limits<__T2>::is_specialized &&
        std::numeric_limits<__T3>::is_specialized,
    double>::type
fma(__T1 __x, __T2 __y, __T3 __z) {
  return std::fma((double)__x, (double)__y, (double)__z);
}

template <typename __T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer,
                                           double>::type
frexp(__T __x, int *__exp) {
  return std::frexp((double)__x, __exp);
}

template <typename __T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer,
                                           double>::type
ldexp(__T __x, int __exp) {
  return std::ldexp((double)__x, __exp);
}

template <typename __T1, typename __T2>
static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<
    std::numeric_limits<__T1>::is_specialized &&
        std::numeric_limits<__T2>::is_specialized,
    double>::type
remquo(__T1 __x, __T2 __y, int *__quo) {
  return std::remquo((double)__x, (double)__y, __quo);
}

template <typename __T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer,
                                           double>::type
scalbln(__T __x, long __exp) {
  return std::scalbln((double)__x, __exp);
}

template <typename __T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer,
                                           double>::type
scalbn(__T __x, int __exp) {
  return std::scalbn((double)__x, __exp);
}
# 323 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_cmath.h" 3
namespace std {






using ::acos;
using ::acosh;
using ::asin;
using ::asinh;
using ::atan;
using ::atan2;
using ::atanh;
using ::cbrt;
using ::ceil;
using ::copysign;
using ::cos;
using ::cosh;
using ::erf;
using ::erfc;
using ::exp;
using ::exp2;
using ::expm1;
using ::fabs;
using ::fdim;
using ::floor;
using ::fma;
using ::fmax;
using ::fmin;
using ::fmod;
using ::fpclassify;
using ::frexp;
using ::hypot;
using ::ilogb;
using ::isfinite;
using ::isgreater;
using ::isgreaterequal;
using ::isless;
using ::islessequal;
using ::islessgreater;
using ::isnormal;
using ::isunordered;
using ::ldexp;
using ::lgamma;
using ::llrint;
using ::llround;
using ::log;
using ::log10;
using ::log1p;
using ::log2;
using ::logb;
using ::lrint;
using ::lround;
using ::nearbyint;
using ::nextafter;
using ::pow;
using ::remainder;
using ::remquo;
using ::rint;
using ::round;
using ::scalbln;
using ::scalbn;
using ::signbit;
using ::sin;
using ::sinh;
using ::sqrt;
using ::tan;
using ::tanh;
using ::tgamma;
using ::trunc;
# 405 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_cmath.h" 3
using ::acosf;
using ::acoshf;
using ::asinf;
using ::asinhf;
using ::atan2f;
using ::atanf;
using ::atanhf;
using ::cbrtf;
using ::ceilf;
using ::copysignf;
using ::cosf;
using ::coshf;
using ::erfcf;
using ::erff;
using ::exp2f;
using ::expf;
using ::expm1f;
using ::fabsf;
using ::fdimf;
using ::floorf;
using ::fmaf;
using ::fmaxf;
using ::fminf;
using ::fmodf;
using ::frexpf;
using ::hypotf;
using ::ilogbf;
using ::ldexpf;
using ::lgammaf;
using ::llrintf;
using ::llroundf;
using ::log10f;
using ::log1pf;
using ::log2f;
using ::logbf;
using ::logf;
using ::lrintf;
using ::lroundf;
using ::modff;
using ::nearbyintf;
using ::nextafterf;
using ::powf;
using ::remainderf;
using ::remquof;
using ::rintf;
using ::roundf;
using ::scalblnf;
using ::scalbnf;
using ::sinf;
using ::sinhf;
using ::sqrtf;
using ::tanf;
using ::tanhf;
using ::tgammaf;
using ::truncf;







}
# 399 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 1 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_intrinsics.h" 1 3
# 102 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_intrinsics.h" 3
inline __attribute__((device)) int __shfl(int __val, int __offset, int __width = warpSize) { return __nvvm_shfl_idx_i32(__val, __offset, ((warpSize - __width) << 8) | (0x1f)); } inline __attribute__((device)) float __shfl(float __val, int __offset, int __width = warpSize) { return __nvvm_shfl_idx_f32(__val, __offset, ((warpSize - __width) << 8) | (0x1f)); } inline __attribute__((device)) unsigned int __shfl(unsigned int __val, int __offset, int __width = warpSize) { return static_cast<unsigned int>( ::__shfl(static_cast<int>(__val), __offset, __width)); } inline __attribute__((device)) long long __shfl(long long __val, int __offset, int __width = warpSize) { struct __Bits { int __a, __b; }; _Static_assert(sizeof(__val) == sizeof(__Bits)); _Static_assert(sizeof(__Bits) == 2 * sizeof(int)); __Bits __tmp; memcpy(&__val, &__tmp, sizeof(__val)); __tmp.__a = ::__shfl(__tmp.__a, __offset, __width); __tmp.__b = ::__shfl(__tmp.__b, __offset, __width); long long __ret; memcpy(&__ret, &__tmp, sizeof(__tmp)); return __ret; } inline __attribute__((device)) long __shfl(long __val, int __offset, int __width = warpSize) { _Static_assert(sizeof(long) == sizeof(long long) || sizeof(long) == sizeof(int)); if (sizeof(long) == sizeof(long long)) { return static_cast<long>( ::__shfl(static_cast<long long>(__val), __offset, __width)); } else if (sizeof(long) == sizeof(int)) { return static_cast<long>( ::__shfl(static_cast<int>(__val), __offset, __width)); } } inline __attribute__((device)) unsigned long __shfl( unsigned long __val, int __offset, int __width = warpSize) { return static_cast<unsigned long>( ::__shfl(static_cast<long>(__val), __offset, __width)); } inline __attribute__((device)) unsigned long long __shfl( unsigned long long __val, int __offset, int __width = warpSize) { return static_cast<unsigned long long>(::__shfl( static_cast<unsigned long long>(__val), __offset, __width)); } inline __attribute__((device)) double __shfl(double __val, int __offset, int __width = warpSize) { long long __tmp; _Static_assert(sizeof(__tmp) == sizeof(__val)); memcpy(&__tmp, &__val, sizeof(__val)); __tmp = ::__shfl(__tmp, __offset, __width); double __ret; memcpy(&__ret, &__tmp, sizeof(__ret)); return __ret; };


inline __attribute__((device)) int __shfl_up(int __val, unsigned int __offset, int __width = warpSize) { return __nvvm_shfl_up_i32(__val, __offset, ((warpSize - __width) << 8) | (0)); } inline __attribute__((device)) float __shfl_up(float __val, unsigned int __offset, int __width = warpSize) { return __nvvm_shfl_up_f32(__val, __offset, ((warpSize - __width) << 8) | (0)); } inline __attribute__((device)) unsigned int __shfl_up(unsigned int __val, unsigned int __offset, int __width = warpSize) { return static_cast<unsigned int>( ::__shfl_up(static_cast<int>(__val), __offset, __width)); } inline __attribute__((device)) long long __shfl_up(long long __val, unsigned int __offset, int __width = warpSize) { struct __Bits { int __a, __b; }; _Static_assert(sizeof(__val) == sizeof(__Bits)); _Static_assert(sizeof(__Bits) == 2 * sizeof(int)); __Bits __tmp; memcpy(&__val, &__tmp, sizeof(__val)); __tmp.__a = ::__shfl_up(__tmp.__a, __offset, __width); __tmp.__b = ::__shfl_up(__tmp.__b, __offset, __width); long long __ret; memcpy(&__ret, &__tmp, sizeof(__tmp)); return __ret; } inline __attribute__((device)) long __shfl_up(long __val, unsigned int __offset, int __width = warpSize) { _Static_assert(sizeof(long) == sizeof(long long) || sizeof(long) == sizeof(int)); if (sizeof(long) == sizeof(long long)) { return static_cast<long>( ::__shfl_up(static_cast<long long>(__val), __offset, __width)); } else if (sizeof(long) == sizeof(int)) { return static_cast<long>( ::__shfl_up(static_cast<int>(__val), __offset, __width)); } } inline __attribute__((device)) unsigned long __shfl_up( unsigned long __val, unsigned int __offset, int __width = warpSize) { return static_cast<unsigned long>( ::__shfl_up(static_cast<long>(__val), __offset, __width)); } inline __attribute__((device)) unsigned long long __shfl_up( unsigned long long __val, unsigned int __offset, int __width = warpSize) { return static_cast<unsigned long long>(::__shfl_up( static_cast<unsigned long long>(__val), __offset, __width)); } inline __attribute__((device)) double __shfl_up(double __val, unsigned int __offset, int __width = warpSize) { long long __tmp; _Static_assert(sizeof(__tmp) == sizeof(__val)); memcpy(&__tmp, &__val, sizeof(__val)); __tmp = ::__shfl_up(__tmp, __offset, __width); double __ret; memcpy(&__ret, &__tmp, sizeof(__ret)); return __ret; };

inline __attribute__((device)) int __shfl_down(int __val, unsigned int __offset, int __width = warpSize) { return __nvvm_shfl_down_i32(__val, __offset, ((warpSize - __width) << 8) | (0x1f)); } inline __attribute__((device)) float __shfl_down(float __val, unsigned int __offset, int __width = warpSize) { return __nvvm_shfl_down_f32(__val, __offset, ((warpSize - __width) << 8) | (0x1f)); } inline __attribute__((device)) unsigned int __shfl_down(unsigned int __val, unsigned int __offset, int __width = warpSize) { return static_cast<unsigned int>( ::__shfl_down(static_cast<int>(__val), __offset, __width)); } inline __attribute__((device)) long long __shfl_down(long long __val, unsigned int __offset, int __width = warpSize) { struct __Bits { int __a, __b; }; _Static_assert(sizeof(__val) == sizeof(__Bits)); _Static_assert(sizeof(__Bits) == 2 * sizeof(int)); __Bits __tmp; memcpy(&__val, &__tmp, sizeof(__val)); __tmp.__a = ::__shfl_down(__tmp.__a, __offset, __width); __tmp.__b = ::__shfl_down(__tmp.__b, __offset, __width); long long __ret; memcpy(&__ret, &__tmp, sizeof(__tmp)); return __ret; } inline __attribute__((device)) long __shfl_down(long __val, unsigned int __offset, int __width = warpSize) { _Static_assert(sizeof(long) == sizeof(long long) || sizeof(long) == sizeof(int)); if (sizeof(long) == sizeof(long long)) { return static_cast<long>( ::__shfl_down(static_cast<long long>(__val), __offset, __width)); } else if (sizeof(long) == sizeof(int)) { return static_cast<long>( ::__shfl_down(static_cast<int>(__val), __offset, __width)); } } inline __attribute__((device)) unsigned long __shfl_down( unsigned long __val, unsigned int __offset, int __width = warpSize) { return static_cast<unsigned long>( ::__shfl_down(static_cast<long>(__val), __offset, __width)); } inline __attribute__((device)) unsigned long long __shfl_down( unsigned long long __val, unsigned int __offset, int __width = warpSize) { return static_cast<unsigned long long>(::__shfl_down( static_cast<unsigned long long>(__val), __offset, __width)); } inline __attribute__((device)) double __shfl_down(double __val, unsigned int __offset, int __width = warpSize) { long long __tmp; _Static_assert(sizeof(__tmp) == sizeof(__val)); memcpy(&__tmp, &__val, sizeof(__val)); __tmp = ::__shfl_down(__tmp, __offset, __width); double __ret; memcpy(&__ret, &__tmp, sizeof(__ret)); return __ret; };

inline __attribute__((device)) int __shfl_xor(int __val, int __offset, int __width = warpSize) { return __nvvm_shfl_bfly_i32(__val, __offset, ((warpSize - __width) << 8) | (0x1f)); } inline __attribute__((device)) float __shfl_xor(float __val, int __offset, int __width = warpSize) { return __nvvm_shfl_bfly_f32(__val, __offset, ((warpSize - __width) << 8) | (0x1f)); } inline __attribute__((device)) unsigned int __shfl_xor(unsigned int __val, int __offset, int __width = warpSize) { return static_cast<unsigned int>( ::__shfl_xor(static_cast<int>(__val), __offset, __width)); } inline __attribute__((device)) long long __shfl_xor(long long __val, int __offset, int __width = warpSize) { struct __Bits { int __a, __b; }; _Static_assert(sizeof(__val) == sizeof(__Bits)); _Static_assert(sizeof(__Bits) == 2 * sizeof(int)); __Bits __tmp; memcpy(&__val, &__tmp, sizeof(__val)); __tmp.__a = ::__shfl_xor(__tmp.__a, __offset, __width); __tmp.__b = ::__shfl_xor(__tmp.__b, __offset, __width); long long __ret; memcpy(&__ret, &__tmp, sizeof(__tmp)); return __ret; } inline __attribute__((device)) long __shfl_xor(long __val, int __offset, int __width = warpSize) { _Static_assert(sizeof(long) == sizeof(long long) || sizeof(long) == sizeof(int)); if (sizeof(long) == sizeof(long long)) { return static_cast<long>( ::__shfl_xor(static_cast<long long>(__val), __offset, __width)); } else if (sizeof(long) == sizeof(int)) { return static_cast<long>( ::__shfl_xor(static_cast<int>(__val), __offset, __width)); } } inline __attribute__((device)) unsigned long __shfl_xor( unsigned long __val, int __offset, int __width = warpSize) { return static_cast<unsigned long>( ::__shfl_xor(static_cast<long>(__val), __offset, __width)); } inline __attribute__((device)) unsigned long long __shfl_xor( unsigned long long __val, int __offset, int __width = warpSize) { return static_cast<unsigned long long>(::__shfl_xor( static_cast<unsigned long long>(__val), __offset, __width)); } inline __attribute__((device)) double __shfl_xor(double __val, int __offset, int __width = warpSize) { long long __tmp; _Static_assert(sizeof(__tmp) == sizeof(__val)); memcpy(&__tmp, &__val, sizeof(__val)); __tmp = ::__shfl_xor(__tmp, __offset, __width); double __ret; memcpy(&__ret, &__tmp, sizeof(__ret)); return __ret; };
# 270 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_intrinsics.h" 3
inline __attribute__((device)) char __ldg(const char *ptr) { return __nvvm_ldg_c(ptr); }
inline __attribute__((device)) short __ldg(const short *ptr) { return __nvvm_ldg_s(ptr); }
inline __attribute__((device)) int __ldg(const int *ptr) { return __nvvm_ldg_i(ptr); }
inline __attribute__((device)) long __ldg(const long *ptr) { return __nvvm_ldg_l(ptr); }
inline __attribute__((device)) long long __ldg(const long long *ptr) {
  return __nvvm_ldg_ll(ptr);
}
inline __attribute__((device)) unsigned char __ldg(const unsigned char *ptr) {
  return __nvvm_ldg_uc(ptr);
}
inline __attribute__((device)) signed char __ldg(const signed char *ptr) {
  return __nvvm_ldg_uc((const unsigned char *)ptr);
}
inline __attribute__((device)) unsigned short __ldg(const unsigned short *ptr) {
  return __nvvm_ldg_us(ptr);
}
inline __attribute__((device)) unsigned int __ldg(const unsigned int *ptr) {
  return __nvvm_ldg_ui(ptr);
}
inline __attribute__((device)) unsigned long __ldg(const unsigned long *ptr) {
  return __nvvm_ldg_ul(ptr);
}
inline __attribute__((device)) unsigned long long __ldg(const unsigned long long *ptr) {
  return __nvvm_ldg_ull(ptr);
}
inline __attribute__((device)) float __ldg(const float *ptr) { return __nvvm_ldg_f(ptr); }
inline __attribute__((device)) double __ldg(const double *ptr) { return __nvvm_ldg_d(ptr); }

inline __attribute__((device)) char2 __ldg(const char2 *ptr) {
  typedef char c2 __attribute__((ext_vector_type(2)));



  c2 rv = __nvvm_ldg_c2(reinterpret_cast<const c2 *>(ptr));
  char2 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  return ret;
}
inline __attribute__((device)) char4 __ldg(const char4 *ptr) {
  typedef char c4 __attribute__((ext_vector_type(4)));
  c4 rv = __nvvm_ldg_c4(reinterpret_cast<const c4 *>(ptr));
  char4 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  ret.z = rv[2];
  ret.w = rv[3];
  return ret;
}
inline __attribute__((device)) short2 __ldg(const short2 *ptr) {
  typedef short s2 __attribute__((ext_vector_type(2)));
  s2 rv = __nvvm_ldg_s2(reinterpret_cast<const s2 *>(ptr));
  short2 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  return ret;
}
inline __attribute__((device)) short4 __ldg(const short4 *ptr) {
  typedef short s4 __attribute__((ext_vector_type(4)));
  s4 rv = __nvvm_ldg_s4(reinterpret_cast<const s4 *>(ptr));
  short4 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  ret.z = rv[2];
  ret.w = rv[3];
  return ret;
}
inline __attribute__((device)) int2 __ldg(const int2 *ptr) {
  typedef int i2 __attribute__((ext_vector_type(2)));
  i2 rv = __nvvm_ldg_i2(reinterpret_cast<const i2 *>(ptr));
  int2 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  return ret;
}
inline __attribute__((device)) int4 __ldg(const int4 *ptr) {
  typedef int i4 __attribute__((ext_vector_type(4)));
  i4 rv = __nvvm_ldg_i4(reinterpret_cast<const i4 *>(ptr));
  int4 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  ret.z = rv[2];
  ret.w = rv[3];
  return ret;
}
inline __attribute__((device)) longlong2 __ldg(const longlong2 *ptr) {
  typedef long long ll2 __attribute__((ext_vector_type(2)));
  ll2 rv = __nvvm_ldg_ll2(reinterpret_cast<const ll2 *>(ptr));
  longlong2 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  return ret;
}

inline __attribute__((device)) uchar2 __ldg(const uchar2 *ptr) {
  typedef unsigned char uc2 __attribute__((ext_vector_type(2)));
  uc2 rv = __nvvm_ldg_uc2(reinterpret_cast<const uc2 *>(ptr));
  uchar2 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  return ret;
}
inline __attribute__((device)) uchar4 __ldg(const uchar4 *ptr) {
  typedef unsigned char uc4 __attribute__((ext_vector_type(4)));
  uc4 rv = __nvvm_ldg_uc4(reinterpret_cast<const uc4 *>(ptr));
  uchar4 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  ret.z = rv[2];
  ret.w = rv[3];
  return ret;
}
inline __attribute__((device)) ushort2 __ldg(const ushort2 *ptr) {
  typedef unsigned short us2 __attribute__((ext_vector_type(2)));
  us2 rv = __nvvm_ldg_us2(reinterpret_cast<const us2 *>(ptr));
  ushort2 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  return ret;
}
inline __attribute__((device)) ushort4 __ldg(const ushort4 *ptr) {
  typedef unsigned short us4 __attribute__((ext_vector_type(4)));
  us4 rv = __nvvm_ldg_us4(reinterpret_cast<const us4 *>(ptr));
  ushort4 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  ret.z = rv[2];
  ret.w = rv[3];
  return ret;
}
inline __attribute__((device)) uint2 __ldg(const uint2 *ptr) {
  typedef unsigned int ui2 __attribute__((ext_vector_type(2)));
  ui2 rv = __nvvm_ldg_ui2(reinterpret_cast<const ui2 *>(ptr));
  uint2 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  return ret;
}
inline __attribute__((device)) uint4 __ldg(const uint4 *ptr) {
  typedef unsigned int ui4 __attribute__((ext_vector_type(4)));
  ui4 rv = __nvvm_ldg_ui4(reinterpret_cast<const ui4 *>(ptr));
  uint4 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  ret.z = rv[2];
  ret.w = rv[3];
  return ret;
}
inline __attribute__((device)) ulonglong2 __ldg(const ulonglong2 *ptr) {
  typedef unsigned long long ull2 __attribute__((ext_vector_type(2)));
  ull2 rv = __nvvm_ldg_ull2(reinterpret_cast<const ull2 *>(ptr));
  ulonglong2 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  return ret;
}

inline __attribute__((device)) float2 __ldg(const float2 *ptr) {
  typedef float f2 __attribute__((ext_vector_type(2)));
  f2 rv = __nvvm_ldg_f2(reinterpret_cast<const f2 *>(ptr));
  float2 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  return ret;
}
inline __attribute__((device)) float4 __ldg(const float4 *ptr) {
  typedef float f4 __attribute__((ext_vector_type(4)));
  f4 rv = __nvvm_ldg_f4(reinterpret_cast<const f4 *>(ptr));
  float4 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  ret.z = rv[2];
  ret.w = rv[3];
  return ret;
}
inline __attribute__((device)) double2 __ldg(const double2 *ptr) {
  typedef double d2 __attribute__((ext_vector_type(2)));
  d2 rv = __nvvm_ldg_d2(reinterpret_cast<const d2 *>(ptr));
  double2 ret;
  ret.x = rv[0];
  ret.y = rv[1];
  return ret;
}




inline __attribute__((device)) unsigned __funnelshift_l(unsigned low32, unsigned high32,
                                           unsigned shiftWidth) {
  unsigned result;
  asm("shf.l.wrap.b32 %0, %1, %2, %3;"
      : "=r"(result)
      : "r"(low32), "r"(high32), "r"(shiftWidth));
  return result;
}
inline __attribute__((device)) unsigned __funnelshift_lc(unsigned low32, unsigned high32,
                                            unsigned shiftWidth) {
  unsigned result;
  asm("shf.l.clamp.b32 %0, %1, %2, %3;"
      : "=r"(result)
      : "r"(low32), "r"(high32), "r"(shiftWidth));
  return result;
}
inline __attribute__((device)) unsigned __funnelshift_r(unsigned low32, unsigned high32,
                                           unsigned shiftWidth) {
  unsigned result;
  asm("shf.r.wrap.b32 %0, %1, %2, %3;"
      : "=r"(result)
      : "r"(low32), "r"(high32), "r"(shiftWidth));
  return result;
}
inline __attribute__((device)) unsigned __funnelshift_rc(unsigned low32, unsigned high32,
                                            unsigned shiftWidth) {
  unsigned ret;
  asm("shf.r.clamp.b32 %0, %1, %2, %3;"
      : "=r"(ret)
      : "r"(low32), "r"(high32), "r"(shiftWidth));
  return ret;
}
# 400 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 1 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_complex_builtins.h" 1 3
# 32 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_complex_builtins.h" 3
extern "C" inline __attribute__((device)) double _Complex __muldc3(double __a, double __b,
                                                      double __c, double __d) {
  double __ac = __a * __c;
  double __bd = __b * __d;
  double __ad = __a * __d;
  double __bc = __b * __c;
  double _Complex z;
  __real__(z) = __ac - __bd;
  __imag__(z) = __ad + __bc;
  if (std::isnan(__real__(z)) && std::isnan(__imag__(z))) {
    int __recalc = 0;
    if (std::isinf(__a) || std::isinf(__b)) {
      __a = std::copysign(std::isinf(__a) ? 1 : 0, __a);
      __b = std::copysign(std::isinf(__b) ? 1 : 0, __b);
      if (std::isnan(__c))
        __c = std::copysign(0, __c);
      if (std::isnan(__d))
        __d = std::copysign(0, __d);
      __recalc = 1;
    }
    if (std::isinf(__c) || std::isinf(__d)) {
      __c = std::copysign(std::isinf(__c) ? 1 : 0, __c);
      __d = std::copysign(std::isinf(__d) ? 1 : 0, __d);
      if (std::isnan(__a))
        __a = std::copysign(0, __a);
      if (std::isnan(__b))
        __b = std::copysign(0, __b);
      __recalc = 1;
    }
    if (!__recalc && (std::isinf(__ac) || std::isinf(__bd) ||
                      std::isinf(__ad) || std::isinf(__bc))) {
      if (std::isnan(__a))
        __a = std::copysign(0, __a);
      if (std::isnan(__b))
        __b = std::copysign(0, __b);
      if (std::isnan(__c))
        __c = std::copysign(0, __c);
      if (std::isnan(__d))
        __d = std::copysign(0, __d);
      __recalc = 1;
    }
    if (__recalc) {


      __real__(z) = __builtin_huge_valf() * (__a * __c - __b * __d);
      __imag__(z) = __builtin_huge_valf() * (__a * __d + __b * __c);
    }
  }
  return z;
}

extern "C" inline __attribute__((device)) float _Complex __mulsc3(float __a, float __b,
                                                     float __c, float __d) {
  float __ac = __a * __c;
  float __bd = __b * __d;
  float __ad = __a * __d;
  float __bc = __b * __c;
  float _Complex z;
  __real__(z) = __ac - __bd;
  __imag__(z) = __ad + __bc;
  if (std::isnan(__real__(z)) && std::isnan(__imag__(z))) {
    int __recalc = 0;
    if (std::isinf(__a) || std::isinf(__b)) {
      __a = std::copysign(std::isinf(__a) ? 1 : 0, __a);
      __b = std::copysign(std::isinf(__b) ? 1 : 0, __b);
      if (std::isnan(__c))
        __c = std::copysign(0, __c);
      if (std::isnan(__d))
        __d = std::copysign(0, __d);
      __recalc = 1;
    }
    if (std::isinf(__c) || std::isinf(__d)) {
      __c = std::copysign(std::isinf(__c) ? 1 : 0, __c);
      __d = std::copysign(std::isinf(__d) ? 1 : 0, __d);
      if (std::isnan(__a))
        __a = std::copysign(0, __a);
      if (std::isnan(__b))
        __b = std::copysign(0, __b);
      __recalc = 1;
    }
    if (!__recalc && (std::isinf(__ac) || std::isinf(__bd) ||
                      std::isinf(__ad) || std::isinf(__bc))) {
      if (std::isnan(__a))
        __a = std::copysign(0, __a);
      if (std::isnan(__b))
        __b = std::copysign(0, __b);
      if (std::isnan(__c))
        __c = std::copysign(0, __c);
      if (std::isnan(__d))
        __d = std::copysign(0, __d);
      __recalc = 1;
    }
    if (__recalc) {
      __real__(z) = __builtin_huge_valf() * (__a * __c - __b * __d);
      __imag__(z) = __builtin_huge_valf() * (__a * __d + __b * __c);
    }
  }
  return z;
}

extern "C" inline __attribute__((device)) double _Complex __divdc3(double __a, double __b,
                                                      double __c, double __d) {
  int __ilogbw = 0;



  double __logbw = std::logb(max(std::abs(__c), std::abs(__d)));
  if (std::isfinite(__logbw)) {
    __ilogbw = (int)__logbw;
    __c = std::scalbn(__c, -__ilogbw);
    __d = std::scalbn(__d, -__ilogbw);
  }
  double __denom = __c * __c + __d * __d;
  double _Complex z;
  __real__(z) = std::scalbn((__a * __c + __b * __d) / __denom, -__ilogbw);
  __imag__(z) = std::scalbn((__b * __c - __a * __d) / __denom, -__ilogbw);
  if (std::isnan(__real__(z)) && std::isnan(__imag__(z))) {
    if ((__denom == 0.0) && (!std::isnan(__a) || !std::isnan(__b))) {
      __real__(z) = std::copysign(__builtin_huge_valf(), __c) * __a;
      __imag__(z) = std::copysign(__builtin_huge_valf(), __c) * __b;
    } else if ((std::isinf(__a) || std::isinf(__b)) && std::isfinite(__c) &&
               std::isfinite(__d)) {
      __a = std::copysign(std::isinf(__a) ? 1.0 : 0.0, __a);
      __b = std::copysign(std::isinf(__b) ? 1.0 : 0.0, __b);
      __real__(z) = __builtin_huge_valf() * (__a * __c + __b * __d);
      __imag__(z) = __builtin_huge_valf() * (__b * __c - __a * __d);
    } else if (std::isinf(__logbw) && __logbw > 0.0 && std::isfinite(__a) &&
               std::isfinite(__b)) {
      __c = std::copysign(std::isinf(__c) ? 1.0 : 0.0, __c);
      __d = std::copysign(std::isinf(__d) ? 1.0 : 0.0, __d);
      __real__(z) = 0.0 * (__a * __c + __b * __d);
      __imag__(z) = 0.0 * (__b * __c - __a * __d);
    }
  }
  return z;
}

extern "C" inline __attribute__((device)) float _Complex __divsc3(float __a, float __b,
                                                     float __c, float __d) {
  int __ilogbw = 0;
  float __logbw = std::logb(max(std::abs(__c), std::abs(__d)));
  if (std::isfinite(__logbw)) {
    __ilogbw = (int)__logbw;
    __c = std::scalbn(__c, -__ilogbw);
    __d = std::scalbn(__d, -__ilogbw);
  }
  float __denom = __c * __c + __d * __d;
  float _Complex z;
  __real__(z) = std::scalbn((__a * __c + __b * __d) / __denom, -__ilogbw);
  __imag__(z) = std::scalbn((__b * __c - __a * __d) / __denom, -__ilogbw);
  if (std::isnan(__real__(z)) && std::isnan(__imag__(z))) {
    if ((__denom == 0) && (!std::isnan(__a) || !std::isnan(__b))) {
      __real__(z) = std::copysign(__builtin_huge_valf(), __c) * __a;
      __imag__(z) = std::copysign(__builtin_huge_valf(), __c) * __b;
    } else if ((std::isinf(__a) || std::isinf(__b)) && std::isfinite(__c) &&
               std::isfinite(__d)) {
      __a = std::copysign(std::isinf(__a) ? 1 : 0, __a);
      __b = std::copysign(std::isinf(__b) ? 1 : 0, __b);
      __real__(z) = __builtin_huge_valf() * (__a * __c + __b * __d);
      __imag__(z) = __builtin_huge_valf() * (__b * __c - __a * __d);
    } else if (std::isinf(__logbw) && __logbw > 0 && std::isfinite(__a) &&
               std::isfinite(__b)) {
      __c = std::copysign(std::isinf(__c) ? 1 : 0, __c);
      __d = std::copysign(std::isinf(__d) ? 1 : 0, __d);
      __real__(z) = 0 * (__a * __c + __b * __d);
      __imag__(z) = 0 * (__b * __c - __a * __d);
    }
  }
  return z;
}
# 401 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 412 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 3
# 1 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 1 3
# 108 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 3
# 1 "/usr/include/memory.h" 1 3 4
# 29 "/usr/include/memory.h" 3 4
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4
extern "C" {





# 1 "/usr/local/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 106 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 117 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));
# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 368 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();
# 433 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));
# 599 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) throw () __attribute__ ((__nonnull__ (1)));
# 648 "/usr/include/string.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
__mempcpy_inline (void *__restrict __dest,
    const void *__restrict __src, size_t __n)
{
  return (char *) memcpy (__dest, __src, __n) + __n;
}




}
# 30 "/usr/include/memory.h" 2 3 4
# 109 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 2 3

# 1 "/usr/local/cuda-8.0/include/curand.h" 1 3
# 70 "/usr/local/cuda-8.0/include/curand.h" 3
extern "C" {
# 82 "/usr/local/cuda-8.0/include/curand.h" 3
enum curandStatus {
    CURAND_STATUS_SUCCESS = 0,
    CURAND_STATUS_VERSION_MISMATCH = 100,
    CURAND_STATUS_NOT_INITIALIZED = 101,
    CURAND_STATUS_ALLOCATION_FAILED = 102,
    CURAND_STATUS_TYPE_ERROR = 103,
    CURAND_STATUS_OUT_OF_RANGE = 104,
    CURAND_STATUS_LENGTH_NOT_MULTIPLE = 105,
    CURAND_STATUS_DOUBLE_PRECISION_REQUIRED = 106,
    CURAND_STATUS_LAUNCH_FAILURE = 201,
    CURAND_STATUS_PREEXISTING_FAILURE = 202,
    CURAND_STATUS_INITIALIZATION_FAILED = 203,
    CURAND_STATUS_ARCH_MISMATCH = 204,
    CURAND_STATUS_INTERNAL_ERROR = 999
};





typedef enum curandStatus curandStatus_t;





enum curandRngType {
    CURAND_RNG_TEST = 0,
    CURAND_RNG_PSEUDO_DEFAULT = 100,
    CURAND_RNG_PSEUDO_XORWOW = 101,
    CURAND_RNG_PSEUDO_MRG32K3A = 121,
    CURAND_RNG_PSEUDO_MTGP32 = 141,
    CURAND_RNG_PSEUDO_MT19937 = 142,
    CURAND_RNG_PSEUDO_PHILOX4_32_10 = 161,
    CURAND_RNG_QUASI_DEFAULT = 200,
    CURAND_RNG_QUASI_SOBOL32 = 201,
    CURAND_RNG_QUASI_SCRAMBLED_SOBOL32 = 202,
    CURAND_RNG_QUASI_SOBOL64 = 203,
    CURAND_RNG_QUASI_SCRAMBLED_SOBOL64 = 204
};





typedef enum curandRngType curandRngType_t;





enum curandOrdering {
    CURAND_ORDERING_PSEUDO_BEST = 100,
    CURAND_ORDERING_PSEUDO_DEFAULT = 101,
    CURAND_ORDERING_PSEUDO_SEEDED = 102,
    CURAND_ORDERING_QUASI_DEFAULT = 201
};





typedef enum curandOrdering curandOrdering_t;





enum curandDirectionVectorSet {
    CURAND_DIRECTION_VECTORS_32_JOEKUO6 = 101,
    CURAND_SCRAMBLED_DIRECTION_VECTORS_32_JOEKUO6 = 102,
    CURAND_DIRECTION_VECTORS_64_JOEKUO6 = 103,
    CURAND_SCRAMBLED_DIRECTION_VECTORS_64_JOEKUO6 = 104
};





typedef enum curandDirectionVectorSet curandDirectionVectorSet_t;






typedef unsigned int curandDirectionVectors32_t[32];






typedef unsigned long long curandDirectionVectors64_t[64];





struct curandGenerator_st;





typedef struct curandGenerator_st *curandGenerator_t;






typedef double curandDistribution_st;
typedef curandDistribution_st *curandDistribution_t;
typedef struct curandDistributionShift_st *curandDistributionShift_t;





typedef struct curandDistributionM2Shift_st *curandDistributionM2Shift_t;
typedef struct curandHistogramM2_st *curandHistogramM2_t;
typedef unsigned int curandHistogramM2K_st;
typedef curandHistogramM2K_st *curandHistogramM2K_t;
typedef curandDistribution_st curandHistogramM2V_st;
typedef curandHistogramM2V_st *curandHistogramM2V_t;

typedef struct curandDiscreteDistribution_st *curandDiscreteDistribution_t;






enum curandMethod {
    CURAND_CHOOSE_BEST = 0,
    CURAND_ITR = 1,
    CURAND_KNUTH = 2,
    CURAND_HITR = 3,
    CURAND_M1 = 4,
    CURAND_M2 = 5,
    CURAND_BINARY_SEARCH = 6,
    CURAND_DISCRETE_GAUSS = 7,
    CURAND_REJECTION = 8,
    CURAND_DEVICE_API = 9,
    CURAND_FAST_REJECTION = 10,
    CURAND_3RD = 11,
    CURAND_DEFINITION = 12,
    CURAND_POISSON = 13
};

typedef enum curandMethod curandMethod_t;
# 321 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandCreateGenerator(curandGenerator_t *generator, curandRngType_t rng_type);
# 401 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandCreateGeneratorHost(curandGenerator_t *generator, curandRngType_t rng_type);
# 415 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandDestroyGenerator(curandGenerator_t generator);
# 431 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGetVersion(int *version);
# 447 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGetProperty(libraryPropertyType type, int *value);
# 464 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandSetStream(curandGenerator_t generator, cudaStream_t stream);
# 483 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandSetPseudoRandomGeneratorSeed(curandGenerator_t generator, unsigned long long seed);
# 501 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandSetGeneratorOffset(curandGenerator_t generator, unsigned long long offset);
# 525 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandSetGeneratorOrdering(curandGenerator_t generator, curandOrdering_t order);
# 545 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandSetQuasiRandomGeneratorDimensions(curandGenerator_t generator, unsigned int num_dimensions);
# 574 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGenerate(curandGenerator_t generator, unsigned int *outputPtr, size_t num);
# 602 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGenerateLongLong(curandGenerator_t generator, unsigned long long *outputPtr, size_t num);
# 630 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGenerateUniform(curandGenerator_t generator, float *outputPtr, size_t num);
# 659 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGenerateUniformDouble(curandGenerator_t generator, double *outputPtr, size_t num);
# 704 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGenerateNormal(curandGenerator_t generator, float *outputPtr,
                     size_t n, float mean, float stddev);
# 751 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGenerateNormalDouble(curandGenerator_t generator, double *outputPtr,
                     size_t n, double mean, double stddev);
# 798 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGenerateLogNormal(curandGenerator_t generator, float *outputPtr,
                     size_t n, float mean, float stddev);
# 846 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGenerateLogNormalDouble(curandGenerator_t generator, double *outputPtr,
                     size_t n, double mean, double stddev);
# 872 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandCreatePoissonDistribution(double lambda, curandDiscreteDistribution_t *discrete_distribution);
# 888 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandDestroyDistribution(curandDiscreteDistribution_t discrete_distribution);
# 920 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGeneratePoisson(curandGenerator_t generator, unsigned int *outputPtr,
                     size_t n, double lambda);

curandStatus_t
curandGeneratePoissonMethod(curandGenerator_t generator, unsigned int *outputPtr,
                     size_t n, double lambda, curandMethod_t method);


curandStatus_t
curandGenerateBinomial(curandGenerator_t generator, unsigned int *outputPtr,
                       size_t num, unsigned int n, double p);

curandStatus_t
curandGenerateBinomialMethod(curandGenerator_t generator,
                             unsigned int *outputPtr,
                             size_t num, unsigned int n, double p,
                             curandMethod_t method);
# 958 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGenerateSeeds(curandGenerator_t generator);
# 982 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGetDirectionVectors32(curandDirectionVectors32_t *vectors[], curandDirectionVectorSet_t set);
# 1000 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGetScrambleConstants32(unsigned int * * constants);
# 1024 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGetDirectionVectors64(curandDirectionVectors64_t *vectors[], curandDirectionVectorSet_t set);
# 1042 "/usr/local/cuda-8.0/include/curand.h" 3
curandStatus_t
curandGetScrambleConstants64(unsigned long long * * constants);




}
# 111 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 2 3
# 1 "/usr/local/cuda-8.0/include/curand_mtgp32.h" 1 3
# 139 "/usr/local/cuda-8.0/include/curand_mtgp32.h" 3
struct mtgp32_params_fast;

struct mtgp32_params_fast {
    int mexp;
    int pos;
    int sh1;
    int sh2;
    unsigned int tbl[16];
    unsigned int tmp_tbl[16];
    unsigned int flt_tmp_tbl[16];

    unsigned int mask;
    unsigned char poly_sha1[21];
};


typedef struct mtgp32_params_fast mtgp32_params_fast_t;





struct mtgp32_kernel_params;
struct mtgp32_kernel_params {
    unsigned int pos_tbl[200];
    unsigned int param_tbl[200][16];
    unsigned int temper_tbl[200][16];
    unsigned int single_temper_tbl[200][16];
    unsigned int sh1_tbl[200];
    unsigned int sh2_tbl[200];
    unsigned int mask[1];
};


typedef struct mtgp32_kernel_params mtgp32_kernel_params_t;
# 192 "/usr/local/cuda-8.0/include/curand_mtgp32.h" 3
struct curandStateMtgp32;

struct curandStateMtgp32 {
    unsigned int s[1024];
    int offset;
    int pIdx;
    mtgp32_kernel_params_t * k;
    int precise_double_flag;
};





typedef struct curandStateMtgp32 curandStateMtgp32_t;
# 112 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 2 3
# 121 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 3
extern const __cuda_builtin_blockDim_t blockDim;
extern const __cuda_builtin_threadIdx_t threadIdx;
# 135 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 3
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) unsigned int para_rec(mtgp32_kernel_params_t * k,unsigned int X1, unsigned int X2, unsigned int Y, int bid) {
    unsigned int X = (X1 & k->mask[0]) ^ X2;
    unsigned int MAT;

    X ^= X << k->sh1_tbl[bid];
    Y = X ^ (Y >> k->sh2_tbl[bid]);
    MAT = k->param_tbl[bid][Y & 0x0f];
    return Y ^ MAT;
}
# 153 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 3
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) unsigned int temper(mtgp32_kernel_params_t * k,unsigned int V, unsigned int T, int bid) {
    unsigned int MAT;

    T ^= T >> 16;
    T ^= T >> 8;
    MAT = k->temper_tbl[bid][T & 0x0f];
    return V ^ MAT;
}
# 172 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 3
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) unsigned int temper_single(mtgp32_kernel_params_t * k,unsigned int V, unsigned int T, int bid) {
    unsigned int MAT;
    unsigned int r;

    T ^= T >> 16;
    T ^= T >> 8;
    MAT = k->single_temper_tbl[bid][T & 0x0f];
    r = (V >> 9) ^ MAT;
    return r;
}
# 194 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 3
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) unsigned int curand(curandStateMtgp32_t *state)
{
    unsigned int t;
    unsigned int d;
    int pos = state->k->pos_tbl[state->pIdx];
    unsigned int r;
    unsigned int o;

    d = blockDim.z * blockDim.y * blockDim.x;

    t = (blockDim.z * blockDim.y * threadIdx.z) + (blockDim.x * threadIdx.y) + threadIdx.x;
    r = para_rec(state->k, state->s[(t + state->offset) & 1023],
             state->s[(t + state->offset + 1) & 1023],
             state->s[(t + state->offset + pos) & 1023],
             state->pIdx);

    state->s[(t + state->offset + 351) & 1023] = r;
    o = temper(state->k, r,
           state->s[(t + state->offset + pos -1) & 1023],
           state->pIdx);



    if (t == 0)
    {
        state->offset = (state->offset + d) & 1023;
    }



    return o;

}
# 245 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 3
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) unsigned int curand_mtgp32_specific(curandStateMtgp32_t *state, unsigned char index, unsigned char n)
{
    unsigned int t;
    int pos = state->k->pos_tbl[state->pIdx];
    unsigned int r;
    unsigned int o;

    t = index;
    r = para_rec(state->k, state->s[(t + state->offset) & 1023],
             state->s[(t + state->offset + 1) & 1023],
             state->s[(t + state->offset + pos) & 1023],
             state->pIdx);

    state->s[(t + state->offset + 351) & 1023] = r;
    o = temper(state->k, r,
           state->s[(t + state->offset + pos -1) & 1023],
           state->pIdx);



    if (index == 0)
    {
        state->offset = (state->offset + n) & 1023;
    }



    return o;
}
# 289 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 3
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) float curand_mtgp32_single(curandStateMtgp32_t *state)
{
    unsigned int t;
    unsigned int d;
    int pos = state->k->pos_tbl[state->pIdx];
    unsigned int r;
    union mtgp32_u_to_f {
        unsigned int u;
        float f;
    }o;


    t = blockDim.z * blockDim.y;
    d = t * blockDim.x;

    t += threadIdx.x;
    r = para_rec(state->k, state->s[(t + state->offset) & 1023],
             state->s[(t + state->offset + 1) & 1023],
             state->s[(t + state->offset + pos) & 1023],
             state->pIdx);

    state->s[t] = r;
    o.u = temper_single(state->k, r,
                        state->s[(t + state->offset + pos -1) & 1023],
                        state->pIdx);



    if (threadIdx.x == 0)
    {
        state->offset = (state->offset + d) & 1023;
    }



    return o.f;
}
# 351 "/usr/local/cuda-8.0/include/curand_mtgp32_kernel.h" 3
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) float curand_mtgp32_single_specific(curandStateMtgp32_t *state, unsigned char index, unsigned char n)
{
    unsigned int t;
    int pos = state->k->pos_tbl[state->pIdx];
    unsigned int r;
    union mtgp32_u_to_f {
        unsigned int u;
        float f;
    }o;


    t = index;
    r = para_rec(state->k, state->s[(t + state->offset) & 1023],
             state->s[(t + state->offset + 1) & 1023],
             state->s[(t + state->offset + pos) & 1023],
             state->pIdx);

    state->s[t] = r;
    o.u = temper_single(state->k, r,
                        state->s[(t + state->offset + pos -1) & 1023],
                        state->pIdx);



    if (threadIdx.x == 0)
    {
        state->offset = (state->offset + n) & 1023;
    }



    return o.f;
}
# 413 "/usr/local/lib/clang/7.0.0/include/__clang_cuda_runtime_wrapper.h" 2 3
# 2 "<built-in>" 2
# 1 "nn_cuda.cu" 2






# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4
extern "C" {




# 1 "/usr/local/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;
# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/local/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/local/lib/clang/7.0.0/include/stdarg.h" 1 3 4
# 30 "/usr/local/lib/clang/7.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 48 "/usr/local/lib/clang/7.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 521 "/usr/include/libio.h" 3 4
}
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 110 "/usr/include/stdio.h" 3 4
typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 195 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) ;
# 205 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;
# 237 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 272 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 297 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();
# 356 "/usr/include/stdio.h" 3 4
extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
# 425 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 471 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 531 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 573 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);
# 622 "/usr/include/stdio.h" 3 4
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
          ;
# 638 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));
# 649 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;
# 689 "/usr/include/stdio.h" 3 4
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 726 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);
# 749 "/usr/include/stdio.h" 3 4
extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 798 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 818 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;
# 846 "/usr/include/stdio.h" 3 4
extern void perror (const char *__s);







# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 933 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}



extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
 feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
 ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 934 "/usr/include/stdio.h" 2 3 4








}
# 8 "nn_cuda.cu" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 55 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 71 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) throw () __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 189 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 9 "nn_cuda.cu" 2
# 1 "/usr/local/lib/clang/7.0.0/include/float.h" 1 3
# 10 "nn_cuda.cu" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 1 3
# 60 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/functexcept.h" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/functexcept.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/exception_defines.h" 1 3
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/numeric_traits.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 54 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/concept_check.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/concept_check.h" 3
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r)
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}
# 159 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 174 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)




    {



      _Tp __tmp = (__a);
      __a = (__b);
      __b = (__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])



    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 60 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 95 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





                         pair()
      : first(), second() { }


                         pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }



      template<class _U1, class _U2>
 pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }
# 209 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 3
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 284 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }





}
# 65 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 1 3
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 165 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };



  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };
# 236 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 3
}
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_funcs.h" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/debug/debug.h" 1 3
# 46 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 112 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


                                     ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 171 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }
# 203 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_funcs.h" 3
}
# 67 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 1 3
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ptr_traits.h" 1 3
# 67 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 96 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 160 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 290 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>







    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)

    { return __y.base() - __x.base(); }
# 414 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 441 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }
# 464 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 490 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 505 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 531 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }
# 554 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 580 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 599 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 642 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }
# 668 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 694 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 718 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

                         __normal_iterator()
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i)
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 818 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)

    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)

    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)

    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)

    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)

    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)

    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>







    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)

    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}
# 68 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/predefined_ops.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>

      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
    };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {
    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
    };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
    };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
    };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      _Iter_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator1, typename _Iterator2>

        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>

    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      _Iter_comp_val(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(__comp); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(__comp._M_comp); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      _Val_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(__comp._M_comp); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_equals_iter(_Iterator1 __it1)
 : _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == _M_ref; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      _Iter_pred(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(__pred); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(__comp), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    { return _Iter_comp_to_val<_Compare, _Value>(__comp, __val); }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(__comp), _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, _M_ref)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    { return _Iter_comp_to_iter<_Compare, _Iterator>(__comp._M_comp, __it); }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      _Iter_negate(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(__pred._M_pred); }

}
}
# 72 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = (*__a);
          *__a = (*__b);
          *__b = (__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 118 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {







      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;






      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);



    }
# 164 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 192 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _Tp>

    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _Tp>

    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 240 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>

    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 262 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>

    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };
# 330 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };
# 368 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {







   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 460 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 512 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };
# 540 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };
# 570 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {







   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 636 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 694 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 738 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 798 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 998 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {




                                                                  ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1055 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1087 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1215 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {
# 1229 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1251 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {



                                                       ;
                                                       ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1294 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1327 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 1428 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
}
# 61 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 1 3
# 46 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++allocator.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++allocator.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h" 3
# 1 "/usr/local/lib/clang/7.0.0/include/cuda_wrappers/new" 1 3
# 27 "/usr/local/lib/clang/7.0.0/include/cuda_wrappers/new" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/new" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/new" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 3

#pragma GCC visibility push(default)



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_lockfree_defines.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_lockfree_defines.h" 3
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 2 3

extern "C++" {

namespace std
{
# 60 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();
# 102 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 3
  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();
# 114 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 3
  void unexpected() __attribute__ ((__noreturn__));
# 127 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{
# 152 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };
# 82 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/new" 3
  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();





}
# 111 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/new" 3
void* operator new(std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void operator delete(void*) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*) throw()
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) throw()
{ return __p; }
inline void* operator new[](std::size_t, void* __p) throw()
{ return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 28 "/usr/local/lib/clang/7.0.0/include/cuda_wrappers/new" 2 3
# 37 "/usr/local/lib/clang/7.0.0/include/cuda_wrappers/new" 3
__attribute__((device)) inline void *operator new(long unsigned int size) {
  if (size == 0) {
    size = 1;
  }
  return ::malloc(size);
}
__attribute__((device)) inline void *operator new(long unsigned int size,
                                     const std::nothrow_t &) {
  return ::operator new(size);
}

__attribute__((device)) inline void *operator new[](long unsigned int size) {
  return ::operator new(size);
}
__attribute__((device)) inline void *operator new[](long unsigned int size,
                                       const std::nothrow_t &) {
  return ::operator new(size);
}

__attribute__((device)) inline void operator delete(void* ptr) {
  if (ptr) {
    ::free(ptr);
  }
}
__attribute__((device)) inline void operator delete(void *ptr,
                                       const std::nothrow_t &) {
  ::operator delete(ptr);
}

__attribute__((device)) inline void operator delete[](void* ptr) {
  ::operator delete(ptr);
}
__attribute__((device)) inline void operator delete[](void *ptr,
                                         const std::nothrow_t &) {
  ::operator delete(ptr);
}
# 85 "/usr/local/lib/clang/7.0.0/include/cuda_wrappers/new" 3
__attribute__((device)) inline void *operator new(long unsigned int, void *__ptr) {
  return __ptr;
}
__attribute__((device)) inline void *operator new[](long unsigned int, void *__ptr) {
  return __ptr;
}
__attribute__((device)) inline void operator delete(void *, void *) {}
__attribute__((device)) inline void operator delete[](void *, void *) {}
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };







      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }
# 128 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h" 3
      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }

      void
      destroy(pointer __p) { __p->~_Tp(); }

    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++allocator.h" 2 3
# 47 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/memoryfwd.h" 1 3
# 47 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 48 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 3
  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };






    };
# 91 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };







      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    throw()
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    throw()
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    throw()
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    throw()
    { return false; }






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 227 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 3
}
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_construct.h" 1 3
# 61 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_construct.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/alloc_traits.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/alloc_traits.h" 3








namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 94 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/alloc_traits.h" 3
template<typename _Alloc>
  struct __alloc_traits



  {
    typedef _Alloc allocator_type;
# 172 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/alloc_traits.h" 3
    typedef typename _Alloc::pointer pointer;
    typedef typename _Alloc::const_pointer const_pointer;
    typedef typename _Alloc::value_type value_type;
    typedef typename _Alloc::reference reference;
    typedef typename _Alloc::const_reference const_reference;
    typedef typename _Alloc::size_type size_type;
    typedef typename _Alloc::difference_type difference_type;

    static pointer
    allocate(_Alloc& __a, size_type __n)
    { return __a.allocate(__n); }

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
    { __a.deallocate(__p, __n); }

    template<typename _Tp>
      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
      { __a.construct(__p, __arg); }

    static void destroy(_Alloc& __a, pointer __p)
    { __a.destroy(__p); }

    static size_type max_size(const _Alloc& __a)
    { return __a.max_size(); }

    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    {


      std::__alloc_swap<_Alloc>::_S_do_it(__a, __b);
    }

    template<typename _Tp>
      struct rebind
      { typedef typename _Alloc::template rebind<_Tp>::other other; };

  };


}
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_construct.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 77 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_construct.h" 3
  template<typename _T1, typename _T2>
    inline void
    _Construct(_T1* __p, const _T2& __value)
    {


      ::new(static_cast<void*>(__p)) _T1(__value);
    }





  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 105 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;

      const bool __assignable = true;







      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 171 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = true;





      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { return std::fill_n(__first, __n, __x); }
    };
# 234 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = true;




      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a((__first),
      (__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 ((__first),
  (__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
# 370 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }
# 686 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
}
# 64 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 1 3
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }
# 101 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
 void _M_swap_data(_Vector_impl& __x)
 {
   std::swap(_M_start, __x._M_start);
   std::swap(_M_finish, __x._M_finish);
   std::swap(_M_end_of_storage, __x._M_end_of_storage);
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }
# 159 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };
# 213 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:






      vector()



      : _Base() { }





      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }
# 302 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 318 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 406 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }
# 423 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 435 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 487 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 510 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 538 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      using _Base::get_allocator;







      iterator
      begin()
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end()
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }
# 653 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      size_type
      size() const
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 712 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, value_type __x = value_type())
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 733 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      size_type
      capacity() const
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const
      { return begin() == end(); }
# 763 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 778 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      reference
      operator[](size_type __n)
      { return *(this->_M_impl._M_start + __n); }
# 793 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
      }

    public:
# 821 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 839 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 888 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      pointer

      data()
      { return _M_data_ptr(this->_M_impl._M_start); }




      const_pointer

      data() const
      { return _M_data_ptr(this->_M_impl._M_start); }
# 912 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
                              __x);
     ++this->_M_impl._M_finish;
   }
 else



   _M_insert_aux(end(), __x);

      }
# 948 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      pop_back()
      {
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      }
# 997 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 1071 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 1118 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 1144 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      iterator




      erase(iterator __position)
      { return _M_erase(__position); }
# 1171 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      iterator
# 1180 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      erase(iterator __first, iterator __last)
      { return _M_erase(__first, __last); }
# 1193 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      swap(vector& __x)



      {
 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
                           __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 1245 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)



     push_back(*__first);

 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
      }
# 1323 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1363 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
# 1408 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      _M_insert_aux(iterator __position, const value_type& __x);
# 1421 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos)
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __position);

      iterator
      _M_erase(iterator __first, iterator __last);
# 1491 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _Ptr>
 _Ptr
 _M_data_ptr(_Ptr __ptr) const
 { return __ptr; }

    };
# 1509 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1526 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 65 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 1 3
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };
# 136 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Bit_type>::other _Bit_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type>
 _Bit_alloc_traits;
      typedef typename _Bit_alloc_traits::pointer _Bit_pointer;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_pointer _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }
# 441 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
 _Bit_type*
 _M_end_addr() const
 {
   if (_M_end_of_storage)
     return std::__addressof(_M_end_of_storage[-1]) + 1;
   return 0;
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator()
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }
# 484 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_pointer
      _M_allocate(size_t __n)
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   {
     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
     _Bit_alloc_traits::deallocate(_M_impl,
       _M_impl._M_end_of_storage - __n,
       __n);
   }
      }

      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{
# 540 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;
    typedef typename _Base::_Bit_pointer _Bit_pointer;
    typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;





  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_S_nword;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()



    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }
# 600 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    explicit
    vector(size_type __n, const bool& __value = bool(),
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_addr(),
  __value ? ~0 : 0);
    }


    vector(const vector& __x)
    : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }
# 667 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }


    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
# 699 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }
# 752 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }
# 763 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }
# 778 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }
# 828 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize
 = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
         - begin()); }

    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
 __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


     __n, this->size());
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n)
    {
      if (__n > max_size())
 __throw_length_error(("vector::reserve"));
      if (capacity() < __n)
 _M_reallocate(__n);
    }

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)



    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);
      _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
        __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator



    insert(iterator __position, const bool& __x = bool())

    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr()
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position._M_const_cast(), __x);
      return begin() + __n;
    }
# 981 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }
# 1000 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    void
    insert(iterator __position, size_type __n, const bool& __x)
    { _M_fill_insert(__position, __n, __x); }
# 1011 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator



    erase(iterator __position)

    { return _M_erase(__position._M_const_cast()); }

    iterator



    erase(iterator __first, iterator __last)

    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }







    void
    flip()
    {
      _Bit_type * const __end = this->_M_impl._M_end_addr();
      for (_Bit_type * __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { _M_erase_at_end(begin()); }
# 1070 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
      this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }

    void
    _M_reallocate(size_type __n);
# 1102 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_addr(), __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }

    iterator
    _M_erase(iterator __pos);

    iterator
    _M_erase(iterator __first, iterator __last);
  };


}
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/range_access.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/range_access.h" 3
# 67 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 2 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
     (this->_M_impl._M_start),
     (this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }
# 105 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::



    insert(iterator __position, const value_type& __x)

    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {
# 133 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc" 3
     _M_insert_aux(__position, __x);

 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::copy(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
# 191 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc" 3
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   this->_M_impl._M_finish =
     std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
       __n - size(), __val,
       _M_get_Tp_allocator());
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }
# 324 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)

    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
              (*(this->_M_impl._M_finish - 1)));

   ++this->_M_impl._M_finish;

   _Tp __x_copy = __x;

   std::copy_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);



   *__position = __x_copy;



 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   try
     {




       _Alloc_traits::construct(this->_M_impl,
                         __new_start + __elems_before,



                                __x);

       __new_finish = pointer();

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (this->_M_impl._M_start, __position.base(),
   __new_start, _M_get_Tp_allocator());

       ++__new_finish;

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (__position.base(), this->_M_impl._M_finish,
   __new_finish, _M_get_Tp_allocator());
     }
          catch(...)
     {
       if (!__new_finish)
  _Alloc_traits::destroy(this->_M_impl,
                         __new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
       throw;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }
# 447 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::copy_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    this->_M_impl._M_finish =
      std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
        __n - __elems_after,
        __x_copy,
        _M_get_Tp_allocator());
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = pointer();

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }
# 599 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::copy_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }



  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      iterator __start(std::__addressof(*__q), 0);
      this->_M_impl._M_finish = _M_copy_aligned(begin(), end(), __start);
      this->_M_deallocate();
      this->_M_impl._M_start = __start;
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_pointer __q = this->_M_allocate(__len);
  iterator __start(std::__addressof(*__q), 0);
  iterator __i = _M_copy_aligned(begin(), __position, __start);
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = __start;
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
 }
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }
# 841 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc" 3
}
# 70 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 2 3
# 11 "nn_cuda.cu" 2
# 25 "nn_cuda.cu"
double get_time(){
    struct timeval time;
    if (gettimeofday(&time,__null)){

        return 0;
    }
    return (double)time.tv_sec + (double)time.tv_usec * .000001;
}


typedef struct latLong
{
  float lat;
  float lng;
} LatLong;

typedef struct record
{
  char recString[53];
  float distance;
} Record;

int loadData(char *filename,std::vector<Record> &records,std::vector<LatLong> &locations);
void findLowest(std::vector<Record> &records,float *distances,int numRecords,int topN);
void printUsage();
int parseCommandline(int argc, char *argv[], char* filename,int *r,float *lat,float *lng,
                     int *q, int *t, int *p, int *d);






__attribute__((global)) void euclid(LatLong *d_locations, float *d_distances, int numRecords,float lat, float lng)
{

 int globalId = blockDim.x * ( gridDim.x * blockIdx.y + blockIdx.x ) + threadIdx.x;
     LatLong *latLong = d_locations+globalId;
    if (globalId < numRecords) {
         float *dist=d_distances+globalId;
         *dist = (float)sqrt((lat-latLong->lat)*(lat-latLong->lat)+(lng-latLong->lng)*(lng-latLong->lng));
 }
}





int main(int argc, char* argv[])
{
 int i=0;
 float lat, lng;
 int quiet=0,timing=0,platform=0,device=0;

    std::vector<Record> records;
 std::vector<LatLong> locations;
 char filename[100];
 int resultsCount=10;


    if (parseCommandline(argc, argv, filename,&resultsCount,&lat,&lng,
                     &quiet, &timing, &platform, &device)) {
      printUsage();
      return 0;
    }

    int numRecords = loadData(filename,records,locations);
    if (resultsCount > numRecords) resultsCount = numRecords;






 float *distances;

 LatLong *d_locations;
 float *d_distances;



 cudaDeviceProp deviceProp;
 cudaGetDeviceProperties( &deviceProp, 0 );
 cudaThreadSynchronize();
 unsigned long maxGridX = deviceProp.maxGridSize[0];
 unsigned long threadsPerBlock = deviceProp.maxThreadsPerBlock > 256 ? 256 : deviceProp.maxThreadsPerBlock;
 size_t totalDeviceMemory;
 size_t freeDeviceMemory;
 cudaMemGetInfo( &freeDeviceMemory, &totalDeviceMemory );
 cudaThreadSynchronize();
 unsigned long usableDeviceMemory = freeDeviceMemory * 85 / 100;
 unsigned long maxThreads = usableDeviceMemory / 12;
 if ( numRecords > maxThreads )
 {
  fprintf( stderr, "Error: Input too large.\n" );
  exit( 1 );
 }
 unsigned long blocks = ( numRecords + threadsPerBlock - 1 ) / threadsPerBlock;
 unsigned long gridY = ( blocks + maxGridX - 1 ) / maxGridX;
 unsigned long gridX = ( blocks + gridY - 1 ) / gridY;

 dim3 gridDim( gridX, gridY );

 if ( false )
 {
  printf( "totalDeviceMemory" ": %lu\n", (unsigned long) totalDeviceMemory );
  printf( "freeDeviceMemory" ": %lu\n", (unsigned long) freeDeviceMemory );
  printf( "usableDeviceMemory" ": %lu\n", (unsigned long) usableDeviceMemory );
  printf( "maxGridX" ": %lu\n", (unsigned long) maxGridX );
  printf( "deviceProp.maxThreadsPerBlock" ": %lu\n", (unsigned long) deviceProp.maxThreadsPerBlock );
  printf( "threadsPerBlock" ": %lu\n", (unsigned long) threadsPerBlock );
  printf( "maxThreads" ": %lu\n", (unsigned long) maxThreads );
  printf( "blocks" ": %lu\n", (unsigned long) blocks );
  printf( "gridY" ": %lu\n", (unsigned long) gridY );
  printf( "gridX" ": %lu\n", (unsigned long) gridX );
 }




 distances = (float *)malloc(sizeof(float) * numRecords);
 cudaMalloc((void **) &d_locations,sizeof(LatLong) * numRecords);
 cudaMalloc((void **) &d_distances,sizeof(float) * numRecords);




    cudaMemcpy( d_locations, &locations[0], sizeof(LatLong) * numRecords, cudaMemcpyHostToDevice);





    cudaThreadSynchronize();
 double t0 = get_time();

    euclid<<< gridDim, threadsPerBlock >>>(d_locations,d_distances,numRecords,lat,lng);
    cudaThreadSynchronize();
 double t1 = get_time();
 fprintf(stderr, "%f\n", t1-t0);


    cudaMemcpy( distances, d_distances, sizeof(float)*numRecords, cudaMemcpyDeviceToHost );


    findLowest(records,distances,numRecords,resultsCount);


    if (!quiet)
    for(i=0;i<resultsCount;i++) {
      printf("%s --> Distance=%f\n",records[i].recString,records[i].distance);
    }
    free(distances);

 cudaFree(d_locations);
 cudaFree(d_distances);

}

int loadData(char *filename,std::vector<Record> &records,std::vector<LatLong> &locations){
    FILE *flist,*fp;
 int i=0;
 char dbname[64];
 int recNum=0;



    flist = fopen(filename, "r");
 while(!feof(flist)) {





  if(fscanf(flist, "%s\n", dbname) != 1) {
            fprintf(stderr, "error reading filelist\n");
            exit(0);
        }
        fp = fopen(dbname, "r");
        if(!fp) {
            printf("error opening a db\n");
            exit(1);
        }

        while(!feof(fp)){
            Record record;
            LatLong latLong;
            fgets(record.recString,49,fp);
            fgetc(fp);
            if (feof(fp)) break;


            char substr[6];

            for(i=0;i<5;i++) substr[i] = *(record.recString+i+28);
            substr[5] = '\0';
            latLong.lat = atof(substr);

            for(i=0;i<5;i++) substr[i] = *(record.recString+i+33);
            substr[5] = '\0';
            latLong.lng = atof(substr);

            locations.push_back(latLong);
            records.push_back(record);
            recNum++;
        }
        fclose(fp);
    }
    fclose(flist);

    return recNum;
}

void findLowest(std::vector<Record> &records,float *distances,int numRecords,int topN){
  int i,j;
  float val;
  int minLoc;
  Record *tempRec;
  float tempDist;

  for(i=0;i<topN;i++) {
    minLoc = i;
    for(j=i;j<numRecords;j++) {
      val = distances[j];
      if (val < distances[minLoc]) minLoc = j;
    }

    tempRec = &records[i];
    records[i] = records[minLoc];
    records[minLoc] = *tempRec;

    tempDist = distances[i];
    distances[i] = distances[minLoc];
    distances[minLoc] = tempDist;


    records[i].distance = distances[i];
  }
}

int parseCommandline(int argc, char *argv[], char* filename,int *r,float *lat,float *lng,
                     int *q, int *t, int *p, int *d){
    int i;
    if (argc < 2) return 1;
    strncpy(filename,argv[1],100);
    char flag;

    for(i=1;i<argc;i++) {
      if (argv[i][0]=='-') {
        flag = argv[i][1];
          switch (flag) {
            case 'r':
              i++;
              *r = atoi(argv[i]);
              break;
            case 'l':
              if (argv[i][2]=='a') {
                *lat = atof(argv[i+1]);
              }
              else {
                *lng = atof(argv[i+1]);
              }
              i++;
              break;
            case 'h':
              return 1;
            case 'q':
              *q = 1;
              break;
            case 't':
              *t = 1;
              break;
            case 'p':
              i++;
              *p = atoi(argv[i]);
              break;
            case 'd':
              i++;
              *d = atoi(argv[i]);
              break;
        }
      }
    }
    if ((*d >= 0 && *p<0) || (*p>=0 && *d<0))
      return 1;
    return 0;
}

void printUsage(){
  printf("Nearest Neighbor Usage\n");
  printf("\n");
  printf("nearestNeighbor [filename] -r [int] -lat [float] -lng [float] [-hqt] [-p [int] -d [int]]\n");
  printf("\n");
  printf("example:\n");
  printf("$ ./nearestNeighbor filelist.txt -r 5 -lat 30 -lng 90\n");
  printf("\n");
  printf("filename     the filename that lists the data input files\n");
  printf("-r [int]     the number of records to return (default: 10)\n");
  printf("-lat [float] the latitude for nearest neighbors (default: 0)\n");
  printf("-lng [float] the longitude for nearest neighbors (default: 0)\n");
  printf("\n");
  printf("-h, --help   Display the help file\n");
  printf("-q           Quiet mode. Suppress all text output.\n");
  printf("-t           Print timing information.\n");
  printf("\n");
  printf("-p [int]     Choose the platform (must choose both platform and device)\n");
  printf("-d [int]     Choose the device (must choose both platform and device)\n");
  printf("\n");
  printf("\n");
  printf("Notes: 1. The filename is required as the first parameter.\n");
  printf("       2. If you declare either the device or the platform,\n");
  printf("          you must declare both.\n\n");
}
