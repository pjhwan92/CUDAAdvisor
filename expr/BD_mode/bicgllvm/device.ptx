//
// Generated by LLVM NVPTX Back-End
//

.version 3.2
.target sm_20
.address_size 64

	// .globl	_Z8mystrcpyPcS_ // -- Begin function _Z8mystrcpyPcS_
.extern .func  (.param .b64 func_retval0) malloc
(
	.param .b64 malloc_param_0
)
;
.func _ZL13__assert_failPKcS0_jS0_
(
	.param .b64 _ZL13__assert_failPKcS0_jS0__param_0,
	.param .b32 _ZL13__assert_failPKcS0_jS0__param_1,
	.param .b64 _ZL13__assert_failPKcS0_jS0__param_2
)
;
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.extern .func free
(
	.param .b64 free_param_0
)
;
.visible .global .align 4 .u32 CTALB;
.visible .global .align 4 .u32 CTAUB = 99999;
.visible .global .align 4 .u32 CONSTANCE = 128;
.visible .global .align 4 .u32 aliveCTA;
.visible .global .align 1 .u8 VERBOSE;
.visible .global .align 1 .u8 CALLPATHVERBOSE;
.visible .global .align 8 .u64 ccnntt = 1;
.visible .global .align 8 .u64 bbccnntt = 1;
.visible .global .align 8 .u64 buffer_oN_DeViCe;
.visible .global .align 1 .b8 funcDic[465];
.visible .global .align 4 .u32 dicHeight;
.visible .global .align 4 .b8 contextDic[2400];
.visible .global .align 4 .u32 cHeight;
// _ZZ10InitKernelE7handler has been demoted
.global .align 1 .b8 _$_str[14] = {104, 97, 110, 100, 108, 101, 114, 33, 61, 78, 85, 76, 76, 0};
.global .align 1 .b8 __PRETTY_FUNCTION___$_InitKernel[25] = {118, 111, 105, 100, 32, 42, 73, 110, 105, 116, 75, 101, 114, 110, 101, 108, 40, 118, 111, 105, 100, 32, 42, 41, 0};
.global .align 1 .b8 _$_str2[32] = {32, 67, 84, 65, 9, 37, 100, 9, 111, 110, 108, 105, 110, 101, 44, 32, 116, 111, 116, 97, 108, 32, 97, 108, 105, 118, 101, 9, 37, 100, 10, 0};
.global .align 1 .b8 _$_str3[19] = {10, 100, 58, 32, 73, 110, 105, 116, 75, 101, 114, 110, 101, 108, 46, 46, 46, 10, 0};
.global .align 1 .b8 _$_str4[23] = {100, 58, 32, 98, 117, 102, 102, 101, 114, 32, 112, 111, 105, 110, 116, 101, 114, 58, 32, 37, 112, 10, 0};
.global .align 1 .b8 _$_str5[39] = {100, 58, 32, 115, 105, 122, 101, 32, 111, 102, 32, 107, 101, 114, 110, 101, 108, 32, 103, 114, 105, 100, 58, 32, 37, 100, 44, 32, 37, 100, 9, 37, 100, 44, 32, 37, 100, 10, 0};
.global .align 1 .b8 _$_str1[44] = {47, 104, 111, 109, 101, 47, 106, 104, 112, 97, 114, 107, 47, 108, 108, 118, 109, 47, 47, 67, 85, 68, 65, 65, 100, 118, 105, 115, 111, 114, 47, 115, 114, 99, 47, 47, 97, 110, 115, 102, 46, 99, 117, 0};
.global .align 1 .b8 _$_str6[41] = {100, 58, 58, 58, 32, 114, 101, 113, 117, 101, 115, 116, 101, 100, 32, 99, 111, 110, 116, 101, 120, 116, 32, 105, 100, 58, 32, 37, 100, 32, 111, 117, 116, 32, 111, 102, 32, 37, 100, 10, 0};
.global .align 1 .b8 _$_str7[47] = {100, 58, 58, 58, 58, 58, 58, 58, 32, 99, 117, 114, 114, 101, 110, 116, 32, 99, 111, 110, 116, 101, 120, 116, 32, 91, 37, 100, 93, 91, 37, 100, 93, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0};
.global .align 1 .b8 _$_str8[76] = {40, 99, 99, 110, 110, 116, 116, 32, 60, 32, 40, 105, 110, 116, 41, 40, 40, 40, 108, 111, 110, 103, 41, 66, 85, 70, 70, 69, 82, 83, 73, 90, 69, 47, 50, 52, 41, 32, 45, 32, 49, 50, 56, 42, 49, 48, 48, 41, 41, 32, 38, 38, 32, 34, 32, 99, 99, 110, 110, 116, 116, 32, 101, 114, 114, 111, 114, 32, 111, 99, 99, 117, 114, 115, 34, 0};
.global .align 1 .b8 __PRETTY_FUNCTION___$__Z10storeLinesPvssssS_[60] = {118, 111, 105, 100, 32, 115, 116, 111, 114, 101, 76, 105, 110, 101, 115, 40, 118, 111, 105, 100, 32, 42, 44, 32, 115, 104, 111, 114, 116, 44, 32, 115, 104, 111, 114, 116, 44, 32, 115, 104, 111, 114, 116, 44, 32, 115, 104, 111, 114, 116, 44, 32, 118, 111, 105, 100, 32, 42, 41, 0};
.global .align 1 .b8 _$_str10[15] = {100, 58, 32, 112, 114, 105, 110, 116, 49, 58, 32, 37, 100, 10, 0};
.global .align 1 .b8 _$_str11[15] = {100, 58, 32, 112, 114, 105, 110, 116, 52, 58, 32, 37, 112, 10, 0};
.global .align 1 .b8 _$_str12[5] = {119, 111, 119, 10, 0};
.global .align 1 .b8 _$_str13[32] = {67, 84, 65, 9, 37, 100, 9, 101, 120, 105, 116, 115, 44, 32, 116, 111, 116, 97, 108, 32, 114, 101, 109, 97, 105, 110, 115, 9, 37, 100, 10, 0};
.global .align 1 .b8 _$_str14[25] = {100, 58, 58, 32, 112, 95, 115, 116, 97, 99, 107, 32, 105, 115, 32, 104, 97, 99, 107, 101, 100, 33, 33, 10, 0};
.global .align 1 .b8 _$_str15[20] = {100, 58, 32, 105, 110, 32, 82, 101, 116, 75, 101, 114, 110, 101, 108, 46, 46, 46, 10, 0};
.global .align 1 .b8 _$_str16[56] = {100, 58, 32, 75, 101, 114, 110, 101, 108, 32, 82, 101, 116, 117, 114, 110, 115, 58, 32, 99, 111, 108, 108, 101, 99, 116, 101, 100, 32, 91, 32, 37, 108, 108, 117, 32, 93, 32, 109, 101, 109, 111, 114, 121, 32, 101, 110, 116, 114, 105, 101, 115, 46, 32, 10, 0};
.global .align 1 .b8 _$_str17[57] = {115, 105, 122, 101, 32, 111, 102, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 105, 99, 58, 32, 37, 100, 32, 37, 100, 32, 37, 108, 117, 32, 45, 62, 32, 37, 108, 117, 32, 44, 32, 114, 111, 117, 110, 100, 101, 100, 32, 116, 111, 32, 37, 108, 117, 10, 0};
.global .align 1 .b8 _$_str18[56] = {115, 105, 122, 101, 32, 111, 102, 32, 99, 111, 110, 116, 101, 120, 116, 32, 100, 105, 99, 58, 32, 37, 100, 32, 37, 100, 32, 37, 108, 117, 32, 45, 62, 32, 37, 108, 117, 32, 44, 32, 114, 111, 117, 110, 100, 101, 100, 32, 116, 111, 32, 37, 108, 117, 10, 0};
                                        // @_Z8mystrcpyPcS_
.visible .func _Z8mystrcpyPcS_(
	.param .b64 _Z8mystrcpyPcS__param_0,
	.param .b64 _Z8mystrcpyPcS__param_1
)
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<6>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<13>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd7, [_Z8mystrcpyPcS__param_1];
	ld.param.u64 	%rd12, [_Z8mystrcpyPcS__param_0];
	ld.u8 	%rs5, [%rd7];
	setp.eq.s16 	%p1, %rs5, 0;
	@%p1 bra 	LBB0_4;
// %bb.1:                               // %while.body.preheader
	add.s64 	%rd1, %rd7, 1;
	mov.u64 	%rd11, 0;
LBB0_2:                                 // %while.body
                                        // =>This Inner Loop Header: Depth=1
	add.s64 	%rd9, %rd12, %rd11;
	st.u8 	[%rd9], %rs5;
	add.s64 	%rd3, %rd11, 1;
	add.s64 	%rd10, %rd1, %rd11;
	ld.u8 	%rs5, [%rd10];
	setp.ne.s16 	%p2, %rs5, 0;
	cvt.u32.u64 	%r1, %rd3;
	setp.lt.u32 	%p3, %r1, 30;
	and.pred  	%p4, %p3, %p2;
	mov.u64 	%rd11, %rd3;
	@%p4 bra 	LBB0_2;
// %bb.3:                               // %while.end.loopexit
	add.s64 	%rd12, %rd12, %rd3;
LBB0_4:                                 // %while.end
	mov.u16 	%rs4, 0;
	st.u8 	[%rd12], %rs4;
	ret;
                                        // -- End function
}
	// .globl	_Z8mystrcmpPcS_ // -- Begin function _Z8mystrcmpPcS_
.visible .func  (.param .b32 func_retval0) _Z8mystrcmpPcS_(
	.param .b64 _Z8mystrcmpPcS__param_0,
	.param .b64 _Z8mystrcmpPcS__param_1
)                                       // @_Z8mystrcmpPcS_
{
	.reg .pred 	%p<17>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<10>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd6, [_Z8mystrcmpPcS__param_0];
	ld.param.u64 	%rd8, [_Z8mystrcmpPcS__param_1];
	add.s64 	%rd1, %rd8, 2;
	mov.u64 	%rd2, 0;
	mov.pred 	%p2, -1;
	mov.pred 	%p4, 0;
LBB1_1:                                 // %while.body
                                        // =>This Inner Loop Header: Depth=1
	add.s64 	%rd3, %rd6, %rd2;
	ld.u8 	%rs3, [%rd3];
	add.s64 	%rd4, %rd1, %rd2;
	ld.u8 	%rs4, [%rd4+-2];
	or.b16  	%rs7, %rs3, %rs4;
	and.b16  	%rs8, %rs7, 255;
	setp.eq.s16 	%p3, %rs8, 0;
	mov.pred 	%p16, %p2;
	@%p3 bra 	LBB1_3;
// %bb.2:                               // %if.end
                                        //   in Loop: Header=BB1_1 Depth=1
	and.b16  	%rs9, %rs4, 255;
	and.b16  	%rs10, %rs3, 255;
	setp.eq.s16 	%p5, %rs10, %rs9;
	mov.pred 	%p16, %p4;
	@%p5 bra 	LBB1_4;
	bra.uni 	LBB1_3;
LBB1_4:                                 // %while.cond
                                        //   in Loop: Header=BB1_1 Depth=1
	ld.u8 	%rs1, [%rd3+1];
	ld.u8 	%rs2, [%rd4+-1];
	or.b16  	%rs11, %rs1, %rs2;
	and.b16  	%rs12, %rs11, 255;
	setp.eq.s16 	%p7, %rs12, 0;
	mov.pred 	%p16, %p2;
	@%p7 bra 	LBB1_3;
// %bb.5:                               // %if.end.1
                                        //   in Loop: Header=BB1_1 Depth=1
	and.b16  	%rs13, %rs2, 255;
	and.b16  	%rs14, %rs1, 255;
	setp.ne.s16 	%p9, %rs14, %rs13;
	mov.pred 	%p16, %p4;
	@%p9 bra 	LBB1_3;
// %bb.6:                               // %while.cond.1
                                        //   in Loop: Header=BB1_1 Depth=1
	ld.u8 	%rs5, [%rd3+2];
	ld.u8 	%rs6, [%rd4];
	or.b16  	%rs15, %rs5, %rs6;
	and.b16  	%rs16, %rs15, 255;
	setp.eq.s16 	%p11, %rs16, 0;
	mov.pred 	%p16, %p2;
	@%p11 bra 	LBB1_3;
// %bb.7:                               // %if.end.2
                                        //   in Loop: Header=BB1_1 Depth=1
	and.b16  	%rs17, %rs6, 255;
	and.b16  	%rs18, %rs5, 255;
	setp.ne.s16 	%p13, %rs18, %rs17;
	mov.pred 	%p16, %p4;
	@%p13 bra 	LBB1_3;
// %bb.8:                               // %while.cond.2
                                        //   in Loop: Header=BB1_1 Depth=1
	add.s64 	%rd2, %rd2, 3;
	cvt.u32.u64 	%r1, %rd2;
	setp.lt.u32 	%p15, %r1, 30;
	mov.pred 	%p16, %p2;
	@%p15 bra 	LBB1_1;
LBB1_3:                                 // %cleanup
	selp.u32 	%r2, 1, 0, %p16;
	st.param.b32 	[func_retval0+0], %r2;
	ret;
                                        // -- End function
}
	// .globl	_Z9getFuncIDPc  // -- Begin function _Z9getFuncIDPc
.visible .func  (.param .b32 func_retval0) _Z9getFuncIDPc(
	.param .b64 _Z9getFuncIDPc_param_0
)                                       // @_Z9getFuncIDPc
{
	.reg .pred 	%p<17>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<39>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd19, [_Z9getFuncIDPc_param_0];
	ld.global.u32 	%r1, [dicHeight];
	setp.eq.s32 	%p1, %r1, 0;
	@%p1 bra 	LBB2_12;
// %bb.1:                               // %for.cond.preheader
	setp.lt.s32 	%p2, %r1, 1;
	@%p2 bra 	LBB2_7;
// %bb.2:                               // %for.body.preheader
	mov.u32 	%r13, 0;
	mov.u64 	%rd35, funcDic;
	mov.u64 	%rd21, 0;
LBB2_3:                                 // %for.body
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB2_4 Depth 2
	mov.u64 	%rd8, %rd21;
LBB2_4:                                 // %while.body.i35
                                        //   Parent Loop BB2_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd9, %rd35, %rd8;
	ld.global.u8 	%rs6, [%rd9];
	add.s64 	%rd10, %rd19, %rd8;
	ld.u8 	%rs7, [%rd10];
	or.b16  	%rs11, %rs7, %rs6;
	and.b16  	%rs12, %rs11, 255;
	setp.eq.s16 	%p3, %rs12, 0;
	@%p3 bra 	LBB2_17;
// %bb.5:                               // %if.end.i
                                        //   in Loop: Header=BB2_4 Depth=2
	and.b16  	%rs13, %rs7, 255;
	and.b16  	%rs14, %rs6, 255;
	setp.eq.s16 	%p4, %rs14, %rs13;
	@%p4 bra 	LBB2_18;
	bra.uni 	LBB2_6;
LBB2_18:                                // %while.cond.i
                                        //   in Loop: Header=BB2_4 Depth=2
	ld.global.u8 	%rs4, [%rd9+1];
	ld.u8 	%rs5, [%rd10+1];
	or.b16  	%rs15, %rs5, %rs4;
	and.b16  	%rs16, %rs15, 255;
	setp.eq.s16 	%p5, %rs16, 0;
	@%p5 bra 	LBB2_17;
// %bb.19:                              // %if.end.i.1
                                        //   in Loop: Header=BB2_4 Depth=2
	and.b16  	%rs17, %rs5, 255;
	and.b16  	%rs18, %rs4, 255;
	setp.ne.s16 	%p6, %rs18, %rs17;
	@%p6 bra 	LBB2_6;
// %bb.20:                              // %while.cond.i.1
                                        //   in Loop: Header=BB2_4 Depth=2
	add.s64 	%rd8, %rd8, 2;
	cvt.u32.u64 	%r8, %rd8;
	setp.lt.u32 	%p12, %r8, 30;
	@%p12 bra 	LBB2_4;
	bra.uni 	LBB2_17;
LBB2_6:                                 // %for.inc
                                        //   in Loop: Header=BB2_3 Depth=1
	add.s32 	%r13, %r13, 1;
	add.s64 	%rd35, %rd35, 31;
	setp.lt.s32 	%p7, %r13, %r1;
	@%p7 bra 	LBB2_3;
LBB2_7:                                 // %for.end
	cvt.s64.s32 	%rd1, %r1;
	mul.lo.s64 	%rd22, %rd1, 31;
	mov.u64 	%rd23, funcDic;
	add.s64 	%rd38, %rd23, %rd22;
	ld.u8 	%rs22, [%rd19];
	setp.eq.s16 	%p8, %rs22, 0;
	@%p8 bra 	LBB2_11;
// %bb.8:                               // %while.body.i30.preheader
	add.s64 	%rd13, %rd19, 1;
	mov.u64 	%rd37, 0;
LBB2_9:                                 // %while.body.i30
                                        // =>This Inner Loop Header: Depth=1
	add.s64 	%rd25, %rd38, %rd37;
	st.global.u8 	[%rd25], %rs22;
	add.s64 	%rd15, %rd37, 1;
	add.s64 	%rd26, %rd13, %rd37;
	ld.u8 	%rs22, [%rd26];
	setp.ne.s16 	%p9, %rs22, 0;
	cvt.u32.u64 	%r6, %rd15;
	setp.lt.u32 	%p10, %r6, 30;
	and.pred  	%p11, %p10, %p9;
	mov.u64 	%rd37, %rd15;
	@%p11 bra 	LBB2_9;
// %bb.10:                              // %_Z8mystrcpyPcS_.exit32.loopexit
	add.s64 	%rd38, %rd38, %rd15;
LBB2_11:                                // %_Z8mystrcpyPcS_.exit32
	mov.u16 	%rs19, 0;
	st.global.u8 	[%rd38], %rs19;
	add.s32 	%r7, %r1, 1;
	st.global.u32 	[dicHeight], %r7;
	mov.u32 	%r13, %r1;
	bra.uni 	LBB2_17;
LBB2_12:                                // %if.then
	ld.u8 	%rs21, [%rd19];
	setp.eq.s16 	%p13, %rs21, 0;
	mov.u64 	%rd34, funcDic;
	@%p13 bra 	LBB2_16;
// %bb.13:                              // %while.body.i.preheader
	add.s64 	%rd2, %rd19, 1;
	mov.u64 	%rd33, 0;
LBB2_14:                                // %while.body.i
                                        // =>This Inner Loop Header: Depth=1
	mov.u64 	%rd29, funcDic;
	add.s64 	%rd30, %rd29, %rd33;
	st.global.u8 	[%rd30], %rs21;
	add.s64 	%rd4, %rd33, 1;
	add.s64 	%rd31, %rd2, %rd33;
	ld.u8 	%rs21, [%rd31];
	setp.ne.s16 	%p14, %rs21, 0;
	cvt.u32.u64 	%r9, %rd4;
	setp.lt.u32 	%p15, %r9, 30;
	and.pred  	%p16, %p15, %p14;
	mov.u64 	%rd33, %rd4;
	@%p16 bra 	LBB2_14;
// %bb.15:                              // %_Z8mystrcpyPcS_.exit.loopexit
	add.s64 	%rd34, %rd29, %rd4;
LBB2_16:                                // %_Z8mystrcpyPcS_.exit
	mov.u16 	%rs20, 0;
	st.global.u8 	[%rd34], %rs20;
	mov.u32 	%r11, 1;
	st.global.u32 	[dicHeight], %r11;
	mov.u32 	%r13, 0;
LBB2_17:                                // %return
	st.param.b32 	[func_retval0+0], %r13;
	ret;
                                        // -- End function
}
	// .globl	_Z15updateCallStackiissiiPv // -- Begin function _Z15updateCallStackiissiiPv
.visible .func _Z15updateCallStackiissiiPv(
	.param .b32 _Z15updateCallStackiissiiPv_param_0,
	.param .b32 _Z15updateCallStackiissiiPv_param_1,
	.param .b32 _Z15updateCallStackiissiiPv_param_2,
	.param .b32 _Z15updateCallStackiissiiPv_param_3,
	.param .b32 _Z15updateCallStackiissiiPv_param_4,
	.param .b32 _Z15updateCallStackiissiiPv_param_5,
	.param .b64 _Z15updateCallStackiissiiPv_param_6
)                                       // @_Z15updateCallStackiissiiPv
{
	.reg .pred 	%p<11>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<19>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd6, [_Z15updateCallStackiissiiPv_param_6];
	ld.param.u16 	%rs2, [_Z15updateCallStackiissiiPv_param_3];
	ld.param.u16 	%rs1, [_Z15updateCallStackiissiiPv_param_2];
	ld.param.u32 	%r7, [_Z15updateCallStackiissiiPv_param_1];
	ld.param.u32 	%r6, [_Z15updateCallStackiissiiPv_param_0];
	ld.u32 	%r1, [%rd6+136];
	setp.ne.s32 	%p1, %r1, 0;
	@%p1 bra 	LBB3_2;
	bra.uni 	LBB3_1;
LBB3_2:                                 // %if.end
	cvt.s64.s32 	%rd1, %r1;
	shl.b64 	%rd7, %rd1, 3;
	add.s64 	%rd2, %rd6, %rd7;
	ld.u32 	%r2, [%rd2+-16];
	ld.u32 	%r3, [%rd2+-8];
	setp.ne.s32 	%p2, %r2, %r6;
	setp.ne.s32 	%p3, %r3, %r7;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	LBB3_4;
// %bb.3:                               // %if.then22
	st.v2.u16 	[%rd2+-12], {%rs1, %rs2};
	bra.uni 	LBB3_11;
LBB3_1:                                 // %if.then
	st.u32 	[%rd6], %r6;
	st.v2.u16 	[%rd6+4], {%rs1, %rs2};
	st.u32 	[%rd6+8], %r7;
	mov.u16 	%rs4, -1;
	st.v2.u16 	[%rd6+12], {%rs4, %rs4};
	mov.u32 	%r12, 2;
	st.u32 	[%rd6+136], %r12;
	bra.uni 	LBB3_11;
LBB3_4:                                 // %if.else
	setp.eq.s32 	%p5, %r3, %r7;
	or.pred  	%p7, %p5, %p2;
	@%p7 bra 	LBB3_6;
	bra.uni 	LBB3_5;
LBB3_6:                                 // %if.else47
	setp.eq.s32 	%p8, %r3, %r6;
	@%p8 bra 	LBB3_12;
	bra.uni 	LBB3_7;
LBB3_12:                                // %if.then49
	st.v2.u16 	[%rd2+-4], {%rs1, %rs2};
	st.u32 	[%rd2], %r7;
	ld.u32 	%r10, [%rd6+136];
	mul.wide.s32 	%rd14, %r10, 8;
	add.s64 	%rd15, %rd6, %rd14;
	mov.u16 	%rs3, -1;
	st.v2.u16 	[%rd15+4], {%rs3, %rs3};
	add.s32 	%r11, %r10, 1;
	st.u32 	[%rd6+136], %r11;
	bra.uni 	LBB3_11;
LBB3_5:                                 // %if.then34
	st.u32 	[%rd2+-8], %r7;
	ld.u32 	%r8, [%rd6+136];
	mul.wide.s32 	%rd8, %r8, 8;
	add.s64 	%rd9, %rd6, %rd8;
	st.v2.u16 	[%rd9+-12], {%rs1, %rs2};
	bra.uni 	LBB3_11;
LBB3_7:                                 // %for.cond.preheader
	add.s64 	%rd18, %rd2, 4;
LBB3_8:                                 // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	mov.u32 	%r4, %r1;
	setp.lt.s32 	%p9, %r4, 1;
	@%p9 bra 	LBB3_11;
// %bb.9:                               // %for.body
                                        //   in Loop: Header=BB3_8 Depth=1
	add.s32 	%r1, %r4, -1;
	ld.u32 	%r9, [%rd18+-12];
	setp.ne.s32 	%p10, %r9, %r6;
	add.s64 	%rd18, %rd18, -8;
	@%p10 bra 	LBB3_8;
// %bb.10:                              // %if.then76
	st.u32 	[%rd6+136], %r4;
	st.u32 	[%rd18+-4], %r7;
	st.v2.u16 	[%rd18], {%rs1, %rs2};
LBB3_11:                                // %cleanup96
	ret;
                                        // -- End function
}
	// .globl	InitKernel      // -- Begin function InitKernel
.visible .func  (.param .b64 func_retval0) InitKernel(
	.param .b64 InitKernel_param_0
)                                       // @InitKernel
{
	.local .align 8 .b8 	__local_depot4[32];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<7>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<35>;
	// demoted variable
	.shared .align 8 .u64 _ZZ10InitKernelE7handler;
// %bb.0:                               // %entry
	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ctaid.y;
	mov.u32 	%r1, %nctaid.x;
	mad.lo.s32 	%r2, %r1, %r7, %r6;
	ld.global.u32 	%r8, [CTALB];
	setp.lt.u32 	%p1, %r2, %r8;
	mov.u64 	%rd34, 0;
	@%p1 bra 	LBB4_10;
// %bb.1:                               // %lor.lhs.false
	ld.global.u32 	%r9, [CTAUB];
	setp.gt.u32 	%p2, %r2, %r9;
	@%p2 bra 	LBB4_10;
// %bb.2:                               // %if.end
	mov.u32 	%r10, %tid.x;
	mov.u32 	%r11, %tid.y;
	mov.u32 	%r3, %ntid.x;
	mad.lo.s32 	%r4, %r3, %r11, %r10;
	bar.sync 	0;
	setp.ne.s32 	%p3, %r4, 0;
	@%p3 bra 	LBB4_9;
	bra.uni 	LBB4_3;
LBB4_9:                                 // %if.end51
	bar.sync 	0;
	ld.shared.u64 	%rd28, [_ZZ10InitKernelE7handler];
	mul.lo.s32 	%r20, %r4, 152;
	cvt.u64.u32 	%rd29, %r20;
	add.s64 	%rd34, %rd28, %rd29;
LBB4_10:                                // %return
	st.param.b64 	[func_retval0+0], %rd34;
	ret;
LBB4_3:                                 // %if.then31
	mov.u32 	%r5, %ntid.y;
	mul.lo.s32 	%r12, %r3, %r5;
	mul.lo.s32 	%r13, %r12, 152;
	cvt.u64.u32 	%rd12, %r13;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd12;
	.param .b64 retval0;
	call.uni (retval0), 
	malloc, 
	(
	param0
	);
	ld.param.b64 	%rd13, [retval0+0];
	} // callseq 0
	st.shared.u64 	[_ZZ10InitKernelE7handler], %rd13;
	setp.ne.s64 	%p4, %rd13, 0;
	@%p4 bra 	LBB4_5;
	bra.uni 	LBB4_4;
LBB4_5:                                 // %cond.end
	add.u64 	%rd8, %SP, 0;
	add.u64 	%rd1, %SPL, 0;
	mov.u64 	%rd14, aliveCTA;
	atom.global.add.u32 	%r14, [%rd14], 1;
	st.local.v2.u32 	[%rd1], {%r2, %r14};
	mov.u64 	%rd15, _$_str2;
	cvta.global.u64 	%rd16, %rd15;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd8;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r15, [retval0+0];
	} // callseq 1
	setp.eq.s32 	%p5, %r14, 1;
	@%p5 bra 	LBB4_8;
// %bb.6:                               // %cond.end
	setp.ne.s32 	%p6, %r14, 0;
	@%p6 bra 	LBB4_9;
// %bb.7:                               // %if.then40
	add.u64 	%rd9, %SP, 8;
	add.u64 	%rd2, %SPL, 8;
	add.u64 	%rd10, %SP, 16;
	add.u64 	%rd3, %SPL, 16;
	mov.u64 	%rd18, _$_str3;
	cvta.global.u64 	%rd19, %rd18;
	mov.u64 	%rd20, 0;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd20;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r16, [retval0+0];
	} // callseq 2
	ld.global.u64 	%rd21, [buffer_oN_DeViCe];
	st.local.u64 	[%rd2], %rd21;
	mov.u64 	%rd22, _$_str4;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r17, [retval0+0];
	} // callseq 3
	mov.u32 	%r18, %nctaid.y;
	st.local.u32 	[%rd3], %r1;
	st.local.u32 	[%rd3+4], %r18;
	st.local.u32 	[%rd3+8], %r3;
	st.local.u32 	[%rd3+12], %r5;
	mov.u64 	%rd25, _$_str5;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd10;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r19, [retval0+0];
	} // callseq 4
	bra.uni 	LBB4_9;
LBB4_8:                                 // %if.then49
	ld.param.u64 	%rd6, [InitKernel_param_0];
	st.global.u64 	[buffer_oN_DeViCe], %rd6;
	bra.uni 	LBB4_9;
LBB4_4:                                 // %cond.false
	mov.u64 	%rd30, _$_str;
	cvta.global.u64 	%rd31, %rd30;
	mov.u64 	%rd32, __PRETTY_FUNCTION___$_InitKernel;
	cvta.global.u64 	%rd33, %rd32;
	mov.u32 	%r21, 300;
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd31;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r21;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd33;
	call.uni 
	_ZL13__assert_failPKcS0_jS0_, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 5
                                        // -- End function
}
.func _ZL13__assert_failPKcS0_jS0_(
	.param .b64 _ZL13__assert_failPKcS0_jS0__param_0,
	.param .b32 _ZL13__assert_failPKcS0_jS0__param_1,
	.param .b64 _ZL13__assert_failPKcS0_jS0__param_2
)                                       // -- Begin function _ZL13__assert_failPKcS0_jS0_
                                        // @_ZL13__assert_failPKcS0_jS0_
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<6>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd1, [_ZL13__assert_failPKcS0_jS0__param_0];
	mov.u64 	%rd2, _$_str1;
	cvta.global.u64 	%rd3, %rd2;
	ld.param.u32 	%r1, [_ZL13__assert_failPKcS0_jS0__param_1];
	ld.param.u64 	%rd4, [_ZL13__assert_failPKcS0_jS0__param_2];
	mov.u64 	%rd5, 1;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd1;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd3;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd4;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd5;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 6
                                        // -- End function
}
	// .globl	callFunc        // -- Begin function callFunc
.visible .func callFunc(
	.param .b64 callFunc_param_0,
	.param .b64 callFunc_param_1,
	.param .b32 callFunc_param_2,
	.param .b32 callFunc_param_3,
	.param .b64 callFunc_param_4
)                                       // @callFunc
{
	.reg .pred 	%p<43>;
	.reg .b16 	%rs<49>;
	.reg .b32 	%r<51>;
	.reg .b64 	%rd<94>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd43, [callFunc_param_4];
	ld.param.u32 	%r21, [callFunc_param_3];
	ld.param.u32 	%r20, [callFunc_param_2];
	ld.param.u64 	%rd42, [callFunc_param_1];
	ld.param.u64 	%rd41, [callFunc_param_0];
	ld.global.u32 	%r1, [dicHeight];
	setp.eq.s32 	%p1, %r1, 0;
	@%p1 bra 	LBB6_19;
// %bb.1:                               // %for.cond.preheader.i
	setp.lt.s32 	%p2, %r1, 1;
	@%p2 bra 	LBB6_7;
// %bb.2:                               // %for.body.i.preheader
	mov.u32 	%r48, 0;
	mov.u64 	%rd83, funcDic;
	mov.u64 	%rd45, 0;
LBB6_3:                                 // %for.body.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB6_4 Depth 2
	mov.u64 	%rd8, %rd45;
LBB6_4:                                 // %while.body.i35.i
                                        //   Parent Loop BB6_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd9, %rd83, %rd8;
	ld.global.u8 	%rs6, [%rd9];
	add.s64 	%rd10, %rd41, %rd8;
	ld.u8 	%rs7, [%rd10];
	or.b16  	%rs23, %rs7, %rs6;
	and.b16  	%rs24, %rs23, 255;
	setp.eq.s16 	%p3, %rs24, 0;
	mov.u32 	%r41, %r1;
	@%p3 bra 	LBB6_12;
// %bb.5:                               // %if.end.i.i
                                        //   in Loop: Header=BB6_4 Depth=2
	and.b16  	%rs25, %rs7, 255;
	and.b16  	%rs26, %rs6, 255;
	setp.eq.s16 	%p4, %rs26, %rs25;
	@%p4 bra 	LBB6_49;
	bra.uni 	LBB6_6;
LBB6_49:                                // %while.cond.i.i
                                        //   in Loop: Header=BB6_4 Depth=2
	ld.global.u8 	%rs4, [%rd9+1];
	ld.u8 	%rs5, [%rd10+1];
	or.b16  	%rs27, %rs5, %rs4;
	and.b16  	%rs28, %rs27, 255;
	setp.eq.s16 	%p5, %rs28, 0;
	mov.u32 	%r41, %r1;
	@%p5 bra 	LBB6_12;
// %bb.50:                              // %if.end.i.i.1
                                        //   in Loop: Header=BB6_4 Depth=2
	and.b16  	%rs29, %rs5, 255;
	and.b16  	%rs30, %rs4, 255;
	setp.ne.s16 	%p6, %rs30, %rs29;
	@%p6 bra 	LBB6_6;
// %bb.51:                              // %while.cond.i.i.1
                                        //   in Loop: Header=BB6_4 Depth=2
	add.s64 	%rd8, %rd8, 2;
	cvt.u32.u64 	%r24, %rd8;
	setp.lt.u32 	%p12, %r24, 30;
	mov.u32 	%r41, %r1;
	@%p12 bra 	LBB6_4;
	bra.uni 	LBB6_12;
LBB6_6:                                 // %for.inc.i
                                        //   in Loop: Header=BB6_3 Depth=1
	add.s32 	%r48, %r48, 1;
	add.s64 	%rd83, %rd83, 31;
	setp.lt.s32 	%p7, %r48, %r1;
	@%p7 bra 	LBB6_3;
LBB6_7:                                 // %for.end.i
	cvt.s64.s32 	%rd1, %r1;
	mul.lo.s64 	%rd46, %rd1, 31;
	mov.u64 	%rd47, funcDic;
	add.s64 	%rd86, %rd47, %rd46;
	ld.u8 	%rs46, [%rd41];
	setp.eq.s16 	%p8, %rs46, 0;
	@%p8 bra 	LBB6_11;
// %bb.8:                               // %while.body.i30.i.preheader
	add.s64 	%rd13, %rd41, 1;
	mov.u64 	%rd85, 0;
LBB6_9:                                 // %while.body.i30.i
                                        // =>This Inner Loop Header: Depth=1
	add.s64 	%rd49, %rd86, %rd85;
	st.global.u8 	[%rd49], %rs46;
	add.s64 	%rd15, %rd85, 1;
	add.s64 	%rd50, %rd13, %rd85;
	ld.u8 	%rs46, [%rd50];
	setp.ne.s16 	%p9, %rs46, 0;
	cvt.u32.u64 	%r23, %rd15;
	setp.lt.u32 	%p10, %r23, 30;
	and.pred  	%p11, %p10, %p9;
	mov.u64 	%rd85, %rd15;
	@%p11 bra 	LBB6_9;
// %bb.10:                              // %_Z8mystrcpyPcS_.exit32.i.loopexit
	add.s64 	%rd86, %rd86, %rd15;
LBB6_11:                                // %_Z8mystrcpyPcS_.exit32.i
	mov.u16 	%rs31, 0;
	st.global.u8 	[%rd86], %rs31;
	add.s32 	%r41, %r1, 1;
	st.global.u32 	[dicHeight], %r41;
	mov.u32 	%r48, %r1;
LBB6_12:                                // %_Z9getFuncIDPc.exit
	setp.eq.s32 	%p13, %r41, 0;
	@%p13 bra 	LBB6_29;
// %bb.13:                              // %for.cond.preheader.i28
	setp.lt.s32 	%p14, %r41, 1;
	@%p14 bra 	LBB6_14;
	bra.uni 	LBB6_24;
LBB6_14:                                // %for.end.i61
	mul.wide.s32 	%rd65, %r41, 31;
	mov.u64 	%rd66, funcDic;
	add.s64 	%rd92, %rd66, %rd65;
	ld.u8 	%rs48, [%rd42];
	setp.eq.s16 	%p28, %rs48, 0;
	@%p28 bra 	LBB6_18;
// %bb.15:                              // %while.body.i30.i70.preheader
	add.s64 	%rd29, %rd42, 1;
	mov.u64 	%rd91, 0;
LBB6_16:                                // %while.body.i30.i70
                                        // =>This Inner Loop Header: Depth=1
	add.s64 	%rd68, %rd92, %rd91;
	st.global.u8 	[%rd68], %rs48;
	add.s64 	%rd31, %rd91, 1;
	add.s64 	%rd69, %rd29, %rd91;
	ld.u8 	%rs48, [%rd69];
	setp.ne.s16 	%p29, %rs48, 0;
	cvt.u32.u64 	%r32, %rd31;
	setp.lt.u32 	%p30, %r32, 30;
	and.pred  	%p31, %p30, %p29;
	mov.u64 	%rd91, %rd31;
	@%p31 bra 	LBB6_16;
// %bb.17:                              // %_Z8mystrcpyPcS_.exit32.i73.loopexit
	add.s64 	%rd92, %rd92, %rd31;
LBB6_18:                                // %_Z8mystrcpyPcS_.exit32.i73
	mov.u16 	%rs42, 0;
	st.global.u8 	[%rd92], %rs42;
	add.s32 	%r33, %r41, 1;
	st.global.u32 	[dicHeight], %r33;
	mov.u32 	%r49, %r41;
	bra.uni 	LBB6_34;
LBB6_19:                                // %if.then.i
	ld.u8 	%rs45, [%rd41];
	setp.eq.s16 	%p19, %rs45, 0;
	mov.u64 	%rd82, funcDic;
	@%p19 bra 	LBB6_23;
// %bb.20:                              // %while.body.i.i.preheader
	add.s64 	%rd2, %rd41, 1;
	mov.u64 	%rd81, 0;
LBB6_21:                                // %while.body.i.i
                                        // =>This Inner Loop Header: Depth=1
	mov.u64 	%rd59, funcDic;
	add.s64 	%rd60, %rd59, %rd81;
	st.global.u8 	[%rd60], %rs45;
	add.s64 	%rd4, %rd81, 1;
	add.s64 	%rd61, %rd2, %rd81;
	ld.u8 	%rs45, [%rd61];
	setp.ne.s16 	%p20, %rs45, 0;
	cvt.u32.u64 	%r28, %rd4;
	setp.lt.u32 	%p21, %r28, 30;
	and.pred  	%p22, %p21, %p20;
	mov.u64 	%rd81, %rd4;
	@%p22 bra 	LBB6_21;
// %bb.22:                              // %for.cond.preheader.i28.thread.loopexit
	add.s64 	%rd82, %rd59, %rd4;
LBB6_23:                                // %for.cond.preheader.i28.thread
	mov.u16 	%rs33, 0;
	st.global.u8 	[%rd82], %rs33;
	mov.u32 	%r41, 1;
	st.global.u32 	[dicHeight], %r41;
	mov.u32 	%r48, 0;
LBB6_24:                                // %for.body.i43.preheader
	mov.u32 	%r49, 0;
	mov.u64 	%rd89, funcDic;
	mov.u64 	%rd64, 0;
LBB6_25:                                // %for.body.i43
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB6_26 Depth 2
	mov.u64 	%rd24, %rd64;
LBB6_26:                                // %while.body.i35.i50
                                        //   Parent Loop BB6_25 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd25, %rd89, %rd24;
	ld.global.u8 	%rs16, [%rd25];
	add.s64 	%rd26, %rd42, %rd24;
	ld.u8 	%rs17, [%rd26];
	or.b16  	%rs34, %rs17, %rs16;
	and.b16  	%rs35, %rs34, 255;
	setp.eq.s16 	%p23, %rs35, 0;
	@%p23 bra 	LBB6_34;
// %bb.27:                              // %if.end.i.i53
                                        //   in Loop: Header=BB6_26 Depth=2
	and.b16  	%rs36, %rs17, 255;
	and.b16  	%rs37, %rs16, 255;
	setp.eq.s16 	%p24, %rs37, %rs36;
	@%p24 bra 	LBB6_46;
	bra.uni 	LBB6_28;
LBB6_46:                                // %while.cond.i.i45
                                        //   in Loop: Header=BB6_26 Depth=2
	ld.global.u8 	%rs14, [%rd25+1];
	ld.u8 	%rs15, [%rd26+1];
	or.b16  	%rs38, %rs15, %rs14;
	and.b16  	%rs39, %rs38, 255;
	setp.eq.s16 	%p25, %rs39, 0;
	@%p25 bra 	LBB6_34;
// %bb.47:                              // %if.end.i.i53.1
                                        //   in Loop: Header=BB6_26 Depth=2
	and.b16  	%rs40, %rs15, 255;
	and.b16  	%rs41, %rs14, 255;
	setp.ne.s16 	%p26, %rs41, %rs40;
	@%p26 bra 	LBB6_28;
// %bb.48:                              // %while.cond.i.i45.1
                                        //   in Loop: Header=BB6_26 Depth=2
	add.s64 	%rd24, %rd24, 2;
	cvt.u32.u64 	%r34, %rd24;
	setp.lt.u32 	%p32, %r34, 30;
	@%p32 bra 	LBB6_26;
	bra.uni 	LBB6_34;
LBB6_28:                                // %for.inc.i56
                                        //   in Loop: Header=BB6_25 Depth=1
	add.s32 	%r49, %r49, 1;
	add.s64 	%rd89, %rd89, 31;
	setp.lt.s32 	%p27, %r49, %r41;
	@%p27 bra 	LBB6_25;
	bra.uni 	LBB6_14;
LBB6_29:                                // %if.then.i30
	ld.u8 	%rs47, [%rd42];
	setp.eq.s16 	%p15, %rs47, 0;
	mov.u64 	%rd88, funcDic;
	@%p15 bra 	LBB6_33;
// %bb.30:                              // %while.body.i.i39.preheader
	add.s64 	%rd18, %rd42, 1;
	mov.u64 	%rd87, 0;
LBB6_31:                                // %while.body.i.i39
                                        // =>This Inner Loop Header: Depth=1
	mov.u64 	%rd53, funcDic;
	add.s64 	%rd54, %rd53, %rd87;
	st.global.u8 	[%rd54], %rs47;
	add.s64 	%rd20, %rd87, 1;
	add.s64 	%rd55, %rd18, %rd87;
	ld.u8 	%rs47, [%rd55];
	setp.ne.s16 	%p16, %rs47, 0;
	cvt.u32.u64 	%r25, %rd20;
	setp.lt.u32 	%p17, %r25, 30;
	and.pred  	%p18, %p17, %p16;
	mov.u64 	%rd87, %rd20;
	@%p18 bra 	LBB6_31;
// %bb.32:                              // %_Z8mystrcpyPcS_.exit.i41.loopexit
	add.s64 	%rd88, %rd53, %rd20;
LBB6_33:                                // %_Z8mystrcpyPcS_.exit.i41
	mov.u16 	%rs32, 0;
	st.global.u8 	[%rd88], %rs32;
	mov.u32 	%r27, 1;
	st.global.u32 	[dicHeight], %r27;
	mov.u32 	%r49, 0;
LBB6_34:                                // %_Z9getFuncIDPc.exit75
	cvt.u16.u32 	%rs21, %r20;
	cvt.u16.u32 	%rs22, %r21;
	ld.u32 	%r15, [%rd43+136];
	setp.ne.s32 	%p33, %r15, 0;
	@%p33 bra 	LBB6_36;
	bra.uni 	LBB6_35;
LBB6_36:                                // %if.end.i
	cvt.s64.s32 	%rd34, %r15;
	shl.b64 	%rd70, %rd34, 3;
	add.s64 	%rd35, %rd43, %rd70;
	ld.u32 	%r16, [%rd35+-16];
	ld.u32 	%r17, [%rd35+-8];
	setp.ne.s32 	%p34, %r16, %r48;
	setp.ne.s32 	%p35, %r17, %r49;
	or.pred  	%p36, %p34, %p35;
	@%p36 bra 	LBB6_38;
// %bb.37:                              // %if.then22.i
	st.v2.u16 	[%rd35+-12], {%rs21, %rs22};
	bra.uni 	LBB6_45;
LBB6_35:                                // %if.then.i24
	st.u32 	[%rd43], %r48;
	st.v2.u16 	[%rd43+4], {%rs21, %rs22};
	st.u32 	[%rd43+8], %r49;
	mov.u16 	%rs44, -1;
	st.v2.u16 	[%rd43+12], {%rs44, %rs44};
	mov.u32 	%r39, 2;
	st.u32 	[%rd43+136], %r39;
	bra.uni 	LBB6_45;
LBB6_38:                                // %if.else.i
	setp.eq.s32 	%p37, %r17, %r49;
	or.pred  	%p39, %p37, %p34;
	@%p39 bra 	LBB6_40;
	bra.uni 	LBB6_39;
LBB6_40:                                // %if.else47.i
	setp.eq.s32 	%p40, %r17, %r48;
	@%p40 bra 	LBB6_52;
	bra.uni 	LBB6_41;
LBB6_52:                                // %if.then49.i
	st.v2.u16 	[%rd35+-4], {%rs21, %rs22};
	st.u32 	[%rd35], %r49;
	ld.u32 	%r37, [%rd43+136];
	mul.wide.s32 	%rd77, %r37, 8;
	add.s64 	%rd78, %rd43, %rd77;
	mov.u16 	%rs43, -1;
	st.v2.u16 	[%rd78+4], {%rs43, %rs43};
	add.s32 	%r38, %r37, 1;
	st.u32 	[%rd43+136], %r38;
	bra.uni 	LBB6_45;
LBB6_39:                                // %if.then34.i
	st.u32 	[%rd35+-8], %r49;
	ld.u32 	%r35, [%rd43+136];
	mul.wide.s32 	%rd71, %r35, 8;
	add.s64 	%rd72, %rd43, %rd71;
	st.v2.u16 	[%rd72+-12], {%rs21, %rs22};
	bra.uni 	LBB6_45;
LBB6_41:                                // %for.cond.i.preheader
	add.s64 	%rd93, %rd35, 4;
LBB6_42:                                // %for.cond.i
                                        // =>This Inner Loop Header: Depth=1
	mov.u32 	%r18, %r15;
	setp.lt.s32 	%p41, %r18, 1;
	@%p41 bra 	LBB6_45;
// %bb.43:                              // %for.body.i25
                                        //   in Loop: Header=BB6_42 Depth=1
	add.s32 	%r15, %r18, -1;
	ld.u32 	%r36, [%rd93+-12];
	setp.ne.s32 	%p42, %r36, %r48;
	add.s64 	%rd93, %rd93, -8;
	@%p42 bra 	LBB6_42;
// %bb.44:                              // %if.then76.i
	st.u32 	[%rd43+136], %r18;
	st.u32 	[%rd93+-4], %r49;
	st.v2.u16 	[%rd93], {%rs21, %rs22};
LBB6_45:                                // %_Z15updateCallStackiissiiPv.exit
	ret;
                                        // -- End function
}
	// .globl	_Z8cxtprinti    // -- Begin function _Z8cxtprinti
.visible .func _Z8cxtprinti(
	.param .b32 _Z8cxtprinti_param_0
)                                       // @_Z8cxtprinti
{
	.local .align 8 .b8 	__local_depot7[32];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<21>;

// %bb.0:                               // %entry
	mov.u64 	%SPL, __local_depot7;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r6, [_Z8cxtprinti_param_0];
	setp.lt.s32 	%p1, %r6, 0;
	@%p1 bra 	LBB7_4;
// %bb.1:                               // %if.end
	add.u64 	%rd6, %SP, 0;
	add.u64 	%rd1, %SPL, 0;
	add.u64 	%rd7, %SP, 8;
	add.u64 	%rd2, %SPL, 8;
	ld.global.u32 	%r8, [cHeight];
	st.local.v2.u32 	[%rd1], {%r6, %r8};
	mov.u64 	%rd8, _$_str6;
	cvta.global.u64 	%rd9, %rd8;
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd6;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r9, [retval0+0];
	} // callseq 7
	mul.wide.s32 	%rd11, %r6, 120;
	mov.u64 	%rd12, contextDic;
	add.s64 	%rd13, %rd12, %rd11;
	add.s64 	%rd20, %rd13, 8;
	mov.u32 	%r16, 0;
	mov.u64 	%rd14, _$_str7;
	cvta.global.u64 	%rd15, %rd14;
	bra.uni 	LBB7_2;
LBB7_6:                                 // %for.body.1
                                        //   in Loop: Header=BB7_2 Depth=1
	ld.global.v2.u16 	{%rs3, %rs4}, [%rd20+4];
	cvt.s32.s16 	%r13, %rs3;
	cvt.s32.s16 	%r14, %rs4;
	st.local.u32 	[%rd2], %r6;
	st.local.u32 	[%rd2+4], %r3;
	st.local.u32 	[%rd2+8], %r4;
	st.local.u32 	[%rd2+12], %r13;
	st.local.u32 	[%rd2+16], %r14;
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd7;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r15, [retval0+0];
	} // callseq 9
	add.s64 	%rd20, %rd20, 16;
	add.s32 	%r16, %r3, 1;
LBB7_2:                                 // %land.rhs
                                        // =>This Inner Loop Header: Depth=1
	ld.global.u32 	%r2, [%rd20+-8];
	setp.eq.s32 	%p2, %r2, -1;
	@%p2 bra 	LBB7_4;
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB7_2 Depth=1
	ld.global.v2.u16 	{%rs1, %rs2}, [%rd20+-4];
	cvt.s32.s16 	%r10, %rs1;
	cvt.s32.s16 	%r11, %rs2;
	st.local.u32 	[%rd2], %r6;
	st.local.u32 	[%rd2+4], %r16;
	st.local.u32 	[%rd2+8], %r2;
	st.local.u32 	[%rd2+12], %r10;
	st.local.u32 	[%rd2+16], %r11;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd7;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r12, [retval0+0];
	} // callseq 8
	add.s32 	%r3, %r16, 1;
	setp.lt.u32 	%p3, %r3, 15;
	@%p3 bra 	LBB7_5;
	bra.uni 	LBB7_4;
LBB7_5:                                 // %land.rhs.1
                                        //   in Loop: Header=BB7_2 Depth=1
	ld.global.u32 	%r4, [%rd20];
	setp.eq.s32 	%p4, %r4, -1;
	@%p4 bra 	LBB7_4;
	bra.uni 	LBB7_6;
LBB7_4:                                 // %return
	ret;
                                        // -- End function
}
	// .globl	_Z6cxtcpyP10CallSite_tS0_i // -- Begin function _Z6cxtcpyP10CallSite_tS0_i
.visible .func _Z6cxtcpyP10CallSite_tS0_i(
	.param .b64 _Z6cxtcpyP10CallSite_tS0_i_param_0,
	.param .b64 _Z6cxtcpyP10CallSite_tS0_i_param_1,
	.param .b32 _Z6cxtcpyP10CallSite_tS0_i_param_2
)                                       // @_Z6cxtcpyP10CallSite_tS0_i
{
	.reg .pred 	%p<6>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<41>;

// %bb.0:                               // %entry
	ld.param.u32 	%r11, [_Z6cxtcpyP10CallSite_tS0_i_param_2];
	ld.param.u64 	%rd15, [_Z6cxtcpyP10CallSite_tS0_i_param_0];
	setp.lt.s32 	%p1, %r11, 1;
	mov.u64 	%rd40, 0;
	@%p1 bra 	LBB8_8;
// %bb.1:                               // %for.body.preheader
	ld.param.u64 	%rd16, [_Z6cxtcpyP10CallSite_tS0_i_param_1];
	add.s32 	%r13, %r11, -1;
	and.b32  	%r1, %r11, 3;
	setp.lt.u32 	%p2, %r13, 3;
	mov.u32 	%r15, 0;
	mov.u64 	%rd38, 0;
	@%p2 bra 	LBB8_4;
// %bb.2:                               // %for.body.preheader.new
	sub.s32 	%r2, %r11, %r1;
	add.s64 	%rd36, %rd15, 16;
	add.s64 	%rd35, %rd16, 16;
	mov.u64 	%rd38, 0;
LBB8_3:                                 // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%rd20, [%rd35+-16];
	ld.u32 	%rd21, [%rd35+-12];
	st.u32 	[%rd36+-12], %rd21;
	st.u32 	[%rd36+-16], %rd20;
	ld.u32 	%rd22, [%rd35+-8];
	ld.u32 	%rd23, [%rd35+-4];
	st.u32 	[%rd36+-4], %rd23;
	st.u32 	[%rd36+-8], %rd22;
	ld.u32 	%rd24, [%rd35];
	ld.u32 	%rd25, [%rd35+4];
	st.u32 	[%rd36+4], %rd25;
	st.u32 	[%rd36], %rd24;
	ld.u32 	%rd26, [%rd35+8];
	ld.u32 	%rd27, [%rd35+12];
	st.u32 	[%rd36+12], %rd27;
	st.u32 	[%rd36+8], %rd26;
	add.s64 	%rd38, %rd38, 4;
	cvt.u32.u64 	%r15, %rd38;
	add.s64 	%rd36, %rd36, 32;
	add.s64 	%rd35, %rd35, 32;
	setp.ne.s32 	%p3, %r2, %r15;
	@%p3 bra 	LBB8_3;
LBB8_4:                                 // %for.end.loopexit.unr-lcssa
	cvt.u64.u32 	%rd1, %r13;
	setp.eq.s32 	%p4, %r1, 0;
	@%p4 bra 	LBB8_7;
// %bb.5:                               // %for.body.epil.preheader
	add.s32 	%r17, %r15, 1;
	neg.s32 	%r16, %r1;
LBB8_6:                                 // %for.body.epil
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	shl.b64 	%rd28, %rd38, 3;
	add.s64 	%rd29, %rd16, %rd28;
	add.s64 	%rd30, %rd15, %rd28;
	ld.u32 	%rd31, [%rd29];
	ld.u32 	%rd32, [%rd29+4];
	st.u32 	[%rd30+4], %rd32;
	st.u32 	[%rd30], %rd31;
	cvt.u64.u32 	%rd38, %r17;
	add.s32 	%r17, %r17, 1;
	add.s32 	%r16, %r16, 1;
	setp.ne.s32 	%p5, %r16, 0;
	@%p5 bra 	LBB8_6;
LBB8_7:                                 // %for.end.loopexit
	add.s64 	%rd40, %rd1, 1;
LBB8_8:                                 // %for.end
	shl.b64 	%rd33, %rd40, 3;
	add.s64 	%rd34, %rd15, %rd33;
	mov.u32 	%r14, -1;
	st.u32 	[%rd34], %r14;
	ret;
                                        // -- End function
}
	// .globl	_Z6cxtcmpP10CallSite_tS0_i // -- Begin function _Z6cxtcmpP10CallSite_tS0_i
.visible .func  (.param .b32 func_retval0) _Z6cxtcmpP10CallSite_tS0_i(
	.param .b64 _Z6cxtcmpP10CallSite_tS0_i_param_0,
	.param .b64 _Z6cxtcmpP10CallSite_tS0_i_param_1,
	.param .b32 _Z6cxtcmpP10CallSite_tS0_i_param_2
)                                       // @_Z6cxtcmpP10CallSite_tS0_i
{
	.reg .pred 	%p<9>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<9>;

// %bb.0:                               // %entry
	ld.param.u32 	%r3, [_Z6cxtcmpP10CallSite_tS0_i_param_2];
	setp.lt.s32 	%p3, %r3, 1;
	mov.pred 	%p2, -1;
	mov.pred 	%p8, %p2;
	@%p3 bra 	LBB9_4;
// %bb.1:                               // %for.body.preheader
	ld.param.u64 	%rd8, [_Z6cxtcmpP10CallSite_tS0_i_param_1];
	ld.param.u64 	%rd7, [_Z6cxtcmpP10CallSite_tS0_i_param_0];
	mov.u32 	%r8, 0;
	mov.pred 	%p4, 0;
LBB9_3:                                 // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%r5, [%rd7];
	ld.u32 	%r6, [%rd8];
	setp.eq.s32 	%p5, %r5, %r6;
	mov.pred 	%p8, %p4;
	@%p5 bra 	LBB9_2;
	bra.uni 	LBB9_4;
LBB9_2:                                 // %for.cond
                                        //   in Loop: Header=BB9_3 Depth=1
	add.s32 	%r8, %r8, 1;
	add.s64 	%rd8, %rd8, 8;
	add.s64 	%rd7, %rd7, 8;
	setp.ge.s32 	%p7, %r8, %r3;
	mov.pred 	%p8, %p2;
	@%p7 bra 	LBB9_4;
	bra.uni 	LBB9_3;
LBB9_4:                                 // %cleanup
	selp.u32 	%r7, 1, 0, %p8;
	st.param.b32 	[func_retval0+0], %r7;
	ret;
                                        // -- End function
}
	// .globl	getContextID    // -- Begin function getContextID
.visible .func  (.param .b32 func_retval0) getContextID(
	.param .b64 getContextID_param_0
)                                       // @getContextID
{
	.reg .pred 	%p<18>;
	.reg .b32 	%r<55>;
	.reg .b64 	%rd<108>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd34, [getContextID_param_0];
	ld.u32 	%r1, [%rd34+136];
	setp.eq.s32 	%p1, %r1, 0;
	mov.u32 	%r54, -1;
	@%p1 bra 	LBB10_27;
// %bb.1:                               // %if.end
	ld.global.u32 	%r2, [cHeight];
	setp.eq.s32 	%p2, %r2, 0;
	@%p2 bra 	LBB10_6;
// %bb.2:                               // %for.cond.preheader
	setp.lt.s32 	%p3, %r2, 1;
	mov.u64 	%rd101, contextDic;
	mov.u64 	%rd107, 0;
	mov.u32 	%r54, 0;
	mov.u64 	%rd100, %rd107;
	@%p3 bra 	LBB10_18;
// %bb.3:                               // %for.body.preheader
	mov.u32 	%r33, 0;
	mov.u64 	%rd98, contextDic;
	setp.lt.s32 	%p4, %r1, 1;
	mov.u32 	%r48, %r33;
LBB10_4:                                // %for.body
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB10_16 Depth 2
	mov.u32 	%r54, %r33;
	@%p4 bra 	LBB10_27;
// %bb.5:                               // %for.body.i45.preheader
                                        //   in Loop: Header=BB10_4 Depth=1
	mov.u32 	%r49, 0;
	mov.u64 	%rd99, 0;
LBB10_16:                               // %for.body.i45
                                        //   Parent Loop BB10_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd39, %rd98, %rd99;
	ld.global.u32 	%r36, [%rd39];
	add.s64 	%rd40, %rd34, %rd99;
	ld.u32 	%r37, [%rd40];
	setp.eq.s32 	%p5, %r36, %r37;
	@%p5 bra 	LBB10_15;
	bra.uni 	LBB10_17;
LBB10_15:                               // %for.cond.i
                                        //   in Loop: Header=BB10_16 Depth=2
	add.s32 	%r49, %r49, 1;
	add.s64 	%rd99, %rd99, 8;
	setp.ge.s32 	%p12, %r49, %r1;
	mov.u32 	%r54, %r48;
	@%p12 bra 	LBB10_27;
	bra.uni 	LBB10_16;
LBB10_17:                               // %for.inc
                                        //   in Loop: Header=BB10_4 Depth=1
	add.s32 	%r54, %r48, 1;
	cvt.u64.u32 	%rd100, %r54;
	mul.wide.u32 	%rd41, %r48, 120;
	mov.u64 	%rd42, contextDic;
	add.s64 	%rd43, %rd42, %rd41;
	add.s64 	%rd101, %rd43, 120;
	add.s64 	%rd98, %rd98, 120;
	setp.lt.s32 	%p6, %r54, %r2;
	mov.u32 	%r48, %r54;
	@%p6 bra 	LBB10_4;
LBB10_18:                               // %for.end
	setp.lt.s32 	%p7, %r1, 1;
	@%p7 bra 	LBB10_26;
// %bb.19:                              // %for.body.preheader.i
	add.s32 	%r19, %r1, -1;
	and.b32  	%r20, %r1, 3;
	setp.lt.u32 	%p8, %r19, 3;
	mov.u32 	%r51, 0;
	mov.u64 	%rd105, 0;
	@%p8 bra 	LBB10_22;
// %bb.20:                              // %for.body.preheader.i.new
	sub.s32 	%r21, %r1, %r20;
	mul.lo.s64 	%rd47, %rd100, 120;
	mov.u64 	%rd48, contextDic;
	add.s64 	%rd49, %rd48, %rd47;
	add.s64 	%rd103, %rd49, 16;
	add.s64 	%rd102, %rd34, 16;
	mov.u64 	%rd105, 0;
LBB10_21:                               // %for.body.i
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%rd50, [%rd102+-16];
	ld.u32 	%rd51, [%rd102+-12];
	st.global.u32 	[%rd103+-12], %rd51;
	st.global.u32 	[%rd103+-16], %rd50;
	ld.u32 	%rd52, [%rd102+-8];
	ld.u32 	%rd53, [%rd102+-4];
	st.global.u32 	[%rd103+-4], %rd53;
	st.global.u32 	[%rd103+-8], %rd52;
	ld.u32 	%rd54, [%rd102];
	ld.u32 	%rd55, [%rd102+4];
	st.global.u32 	[%rd103+4], %rd55;
	st.global.u32 	[%rd103], %rd54;
	ld.u32 	%rd56, [%rd102+8];
	ld.u32 	%rd57, [%rd102+12];
	st.global.u32 	[%rd103+12], %rd57;
	st.global.u32 	[%rd103+8], %rd56;
	add.s64 	%rd105, %rd105, 4;
	cvt.u32.u64 	%r51, %rd105;
	add.s64 	%rd103, %rd103, 32;
	add.s64 	%rd102, %rd102, 32;
	setp.ne.s32 	%p9, %r21, %r51;
	@%p9 bra 	LBB10_21;
LBB10_22:                               // %for.end.loopexit.i.unr-lcssa
	setp.eq.s32 	%p10, %r20, 0;
	@%p10 bra 	LBB10_25;
// %bb.23:                              // %for.body.i.epil.preheader
	add.s32 	%r53, %r51, 1;
	neg.s32 	%r52, %r20;
	mul.lo.s64 	%rd60, %rd100, 120;
	mov.u64 	%rd61, contextDic;
	add.s64 	%rd62, %rd61, %rd60;
LBB10_24:                               // %for.body.i.epil
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	shl.b64 	%rd58, %rd105, 3;
	add.s64 	%rd59, %rd34, %rd58;
	add.s64 	%rd63, %rd62, %rd58;
	ld.u32 	%rd64, [%rd59];
	ld.u32 	%rd65, [%rd59+4];
	st.global.u32 	[%rd63+4], %rd65;
	st.global.u32 	[%rd63], %rd64;
	cvt.u64.u32 	%rd105, %r53;
	add.s32 	%r53, %r53, 1;
	add.s32 	%r52, %r52, 1;
	setp.ne.s32 	%p11, %r52, 0;
	@%p11 bra 	LBB10_24;
LBB10_25:                               // %for.end.loopexit.i
	cvt.u64.u32 	%rd66, %r19;
	add.s64 	%rd107, %rd66, 1;
LBB10_26:                               // %_Z6cxtcpyP10CallSite_tS0_i.exit
	shl.b64 	%rd67, %rd107, 3;
	add.s64 	%rd68, %rd101, %rd67;
	mov.u32 	%r39, -1;
	st.global.u32 	[%rd68], %r39;
	add.s32 	%r40, %r54, 1;
	st.global.u32 	[cHeight], %r40;
	bra.uni 	LBB10_27;
LBB10_6:                                // %if.then10
	setp.lt.s32 	%p13, %r1, 1;
	mov.u64 	%rd97, 0;
	@%p13 bra 	LBB10_14;
// %bb.7:                               // %for.body.preheader.i47
	add.s32 	%r3, %r1, -1;
	and.b32  	%r4, %r1, 3;
	setp.lt.u32 	%p14, %r3, 3;
	mov.u32 	%r45, 0;
	mov.u64 	%rd95, 0;
	@%p14 bra 	LBB10_10;
// %bb.8:                               // %for.body.preheader.i47.new
	sub.s32 	%r5, %r1, %r4;
	mov.u64 	%rd73, contextDic;
	add.s64 	%rd93, %rd73, 16;
	add.s64 	%rd92, %rd34, 16;
	mov.u64 	%rd95, 0;
LBB10_9:                                // %for.body.i53
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%rd74, [%rd92+-16];
	ld.u32 	%rd75, [%rd92+-12];
	st.global.u32 	[%rd93+-12], %rd75;
	st.global.u32 	[%rd93+-16], %rd74;
	ld.u32 	%rd76, [%rd92+-8];
	ld.u32 	%rd77, [%rd92+-4];
	st.global.u32 	[%rd93+-4], %rd77;
	st.global.u32 	[%rd93+-8], %rd76;
	ld.u32 	%rd78, [%rd92];
	ld.u32 	%rd79, [%rd92+4];
	st.global.u32 	[%rd93+4], %rd79;
	st.global.u32 	[%rd93], %rd78;
	ld.u32 	%rd80, [%rd92+8];
	ld.u32 	%rd81, [%rd92+12];
	st.global.u32 	[%rd93+12], %rd81;
	st.global.u32 	[%rd93+8], %rd80;
	add.s64 	%rd95, %rd95, 4;
	cvt.u32.u64 	%r45, %rd95;
	add.s64 	%rd93, %rd93, 32;
	add.s64 	%rd92, %rd92, 32;
	setp.ne.s32 	%p15, %r5, %r45;
	@%p15 bra 	LBB10_9;
LBB10_10:                               // %for.end.loopexit.i54.unr-lcssa
	setp.eq.s32 	%p16, %r4, 0;
	@%p16 bra 	LBB10_13;
// %bb.11:                              // %for.body.i53.epil.preheader
	add.s32 	%r47, %r45, 1;
	neg.s32 	%r46, %r4;
	mov.u64 	%rd84, contextDic;
LBB10_12:                               // %for.body.i53.epil
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	shl.b64 	%rd82, %rd95, 3;
	add.s64 	%rd83, %rd34, %rd82;
	add.s64 	%rd85, %rd84, %rd82;
	ld.u32 	%rd86, [%rd83];
	ld.u32 	%rd87, [%rd83+4];
	st.global.u32 	[%rd85+4], %rd87;
	st.global.u32 	[%rd85], %rd86;
	cvt.u64.u32 	%rd95, %r47;
	add.s32 	%r47, %r47, 1;
	add.s32 	%r46, %r46, 1;
	setp.ne.s32 	%p17, %r46, 0;
	@%p17 bra 	LBB10_12;
LBB10_13:                               // %for.end.loopexit.i54
	cvt.u64.u32 	%rd88, %r3;
	add.s64 	%rd97, %rd88, 1;
LBB10_14:                               // %_Z6cxtcpyP10CallSite_tS0_i.exit57
	shl.b64 	%rd89, %rd97, 3;
	mov.u64 	%rd90, contextDic;
	add.s64 	%rd91, %rd90, %rd89;
	mov.u32 	%r43, -1;
	st.global.u32 	[%rd91], %r43;
	mov.u32 	%r44, 1;
	st.global.u32 	[cHeight], %r44;
	mov.u32 	%r54, 0;
LBB10_27:                               // %cleanup20
	st.param.b32 	[func_retval0+0], %r54;
	ret;
                                        // -- End function
}
	// .globl	passBasicBlock  // -- Begin function passBasicBlock
.visible .func passBasicBlock(
	.param .b32 passBasicBlock_param_0,
	.param .b32 passBasicBlock_param_1,
	.param .b32 passBasicBlock_param_2,
	.param .b32 passBasicBlock_param_3,
	.param .b64 passBasicBlock_param_4
)                                       // @passBasicBlock
{
	.reg .pred 	%p<40>;
	.reg .b16 	%rs<9>;
	.reg .b32 	%r<127>;
	.reg .b64 	%rd<235>;

// %bb.0:                               // %entry
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r69, %nctaid.x;
	mad.lo.s32 	%r3, %r69, %r2, %r1;
	ld.global.u32 	%r70, [CTALB];
	setp.lt.u32 	%p1, %r3, %r70;
	@%p1 bra 	LBB11_61;
// %bb.1:                               // %lor.lhs.false
	ld.global.u32 	%r71, [CTAUB];
	setp.gt.u32 	%p2, %r3, %r71;
	@%p2 bra 	LBB11_61;
// %bb.2:                               // %if.end
	mov.u32 	%r73, 1;
	// begin inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r73, 0; 
	vote.ballot.b32 	%r72, %p1; 
	}
	// end inline asm
	ld.global.u64 	%rd72, [buffer_oN_DeViCe];
	setp.eq.s64 	%p3, %rd72, 0;
	@%p3 bra 	LBB11_61;
// %bb.3:                               // %if.end13
	ld.param.u64 	%rd71, [passBasicBlock_param_4];
	ld.param.u32 	%r68, [passBasicBlock_param_3];
	ld.param.u32 	%r67, [passBasicBlock_param_2];
	setp.ne.s32 	%p4, %r72, -1;
	@%p4 bra 	LBB11_33;
	bra.uni 	LBB11_4;
LBB11_33:                               // %if.else
	mov.u64 	%rd73, bbccnntt;
	atom.global.add.u64 	%rd74, [%rd73], 1;
	ld.global.u64 	%rd36, [buffer_oN_DeViCe];
	shl.b64 	%rd75, %rd74, 32;
	cvt.s64.s32 	%rd37, %rd74;
	shr.s64 	%rd76, %rd75, 27;
	add.s64 	%rd77, %rd36, %rd76;
	mov.u64 	%rd234, 0;
	st.u64 	[%rd77+8], %rd234;
	mov.u32 	%r75, %tid.x;
	cvt.u16.u32 	%rs1, %r75;
	mov.u32 	%r76, %tid.y;
	cvt.u16.u32 	%rs2, %r76;
	cvt.u16.u32 	%rs3, %r1;
	cvt.u16.u32 	%rs4, %r2;
	st.v4.u16 	[%rd77], {%rs3, %rs4, %rs1, %rs2};
	st.v2.u32 	[%rd77+16], {%r67, %r68};
	ld.u32 	%r37, [%rd71+136];
	setp.eq.s32 	%p5, %r37, 0;
	mov.u32 	%r126, -1;
	@%p5 bra 	LBB11_60;
// %bb.34:                              // %if.end.i
	ld.global.u32 	%r38, [cHeight];
	setp.eq.s32 	%p6, %r38, 0;
	@%p6 bra 	LBB11_39;
// %bb.35:                              // %for.cond.preheader.i
	setp.lt.s32 	%p7, %r38, 1;
	mov.u64 	%rd228, contextDic;
	mov.u32 	%r122, 0;
	mov.u64 	%rd227, %rd234;
	@%p7 bra 	LBB11_51;
// %bb.36:                              // %for.body.i.preheader
	setp.lt.s32 	%p8, %r37, 1;
	mov.u32 	%r126, 0;
	@%p8 bra 	LBB11_60;
// %bb.37:                              // %for.body.i.preheader54
	mov.u32 	%r79, 0;
	mov.u64 	%rd225, contextDic;
	mov.u64 	%rd82, 0;
	mov.u32 	%r126, %r79;
LBB11_38:                               // %for.body.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB11_49 Depth 2
	mov.u64 	%rd226, %rd82;
	mov.u32 	%r121, %r79;
LBB11_49:                               // %for.body.i45.i
                                        //   Parent Loop BB11_38 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd83, %rd225, %rd226;
	ld.global.u32 	%r81, [%rd83];
	add.s64 	%rd84, %rd71, %rd226;
	ld.u32 	%r82, [%rd84];
	setp.eq.s32 	%p9, %r81, %r82;
	@%p9 bra 	LBB11_48;
	bra.uni 	LBB11_50;
LBB11_48:                               // %for.cond.i.i
                                        //   in Loop: Header=BB11_49 Depth=2
	add.s32 	%r121, %r121, 1;
	add.s64 	%rd226, %rd226, 8;
	setp.ge.s32 	%p16, %r121, %r37;
	@%p16 bra 	LBB11_60;
	bra.uni 	LBB11_49;
LBB11_50:                               // %for.inc.i
                                        //   in Loop: Header=BB11_38 Depth=1
	add.s32 	%r122, %r126, 1;
	cvt.u64.u32 	%rd227, %r122;
	mul.wide.u32 	%rd85, %r126, 120;
	mov.u64 	%rd86, contextDic;
	add.s64 	%rd87, %rd86, %rd85;
	add.s64 	%rd228, %rd87, 120;
	add.s64 	%rd225, %rd225, 120;
	setp.lt.s32 	%p10, %r122, %r38;
	mov.u32 	%r126, %r122;
	@%p10 bra 	LBB11_38;
LBB11_51:                               // %for.end.i
	setp.lt.s32 	%p11, %r37, 1;
	@%p11 bra 	LBB11_59;
// %bb.52:                              // %for.body.i.i.preheader
	add.s32 	%r55, %r37, -1;
	and.b32  	%r56, %r37, 3;
	setp.lt.u32 	%p12, %r55, 3;
	mov.u32 	%r123, 0;
	mov.u64 	%rd232, 0;
	@%p12 bra 	LBB11_55;
// %bb.53:                              // %for.body.i.i.preheader.new
	sub.s32 	%r57, %r37, %r56;
	mul.lo.s64 	%rd91, %rd227, 120;
	mov.u64 	%rd92, contextDic;
	add.s64 	%rd93, %rd92, %rd91;
	add.s64 	%rd230, %rd93, 16;
	add.s64 	%rd229, %rd71, 16;
	mov.u64 	%rd232, 0;
LBB11_54:                               // %for.body.i.i
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%rd94, [%rd229+-16];
	ld.u32 	%rd95, [%rd229+-12];
	st.global.u32 	[%rd230+-12], %rd95;
	st.global.u32 	[%rd230+-16], %rd94;
	ld.u32 	%rd96, [%rd229+-8];
	ld.u32 	%rd97, [%rd229+-4];
	st.global.u32 	[%rd230+-4], %rd97;
	st.global.u32 	[%rd230+-8], %rd96;
	ld.u32 	%rd98, [%rd229];
	ld.u32 	%rd99, [%rd229+4];
	st.global.u32 	[%rd230+4], %rd99;
	st.global.u32 	[%rd230], %rd98;
	ld.u32 	%rd100, [%rd229+8];
	ld.u32 	%rd101, [%rd229+12];
	st.global.u32 	[%rd230+12], %rd101;
	st.global.u32 	[%rd230+8], %rd100;
	add.s64 	%rd232, %rd232, 4;
	cvt.u32.u64 	%r123, %rd232;
	add.s64 	%rd230, %rd230, 32;
	add.s64 	%rd229, %rd229, 32;
	setp.ne.s32 	%p13, %r57, %r123;
	@%p13 bra 	LBB11_54;
LBB11_55:                               // %for.end.loopexit.i.i.unr-lcssa
	setp.eq.s32 	%p14, %r56, 0;
	@%p14 bra 	LBB11_58;
// %bb.56:                              // %for.body.i.i.epil.preheader
	add.s32 	%r125, %r123, 1;
	neg.s32 	%r124, %r56;
	mul.lo.s64 	%rd104, %rd227, 120;
	mov.u64 	%rd105, contextDic;
	add.s64 	%rd106, %rd105, %rd104;
LBB11_57:                               // %for.body.i.i.epil
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	shl.b64 	%rd102, %rd232, 3;
	add.s64 	%rd103, %rd71, %rd102;
	add.s64 	%rd107, %rd106, %rd102;
	ld.u32 	%rd108, [%rd103];
	ld.u32 	%rd109, [%rd103+4];
	st.global.u32 	[%rd107+4], %rd109;
	st.global.u32 	[%rd107], %rd108;
	cvt.u64.u32 	%rd232, %r125;
	add.s32 	%r125, %r125, 1;
	add.s32 	%r124, %r124, 1;
	setp.ne.s32 	%p15, %r124, 0;
	@%p15 bra 	LBB11_57;
LBB11_58:                               // %for.end.loopexit.i.i
	cvt.u64.u32 	%rd110, %r55;
	add.s64 	%rd234, %rd110, 1;
LBB11_59:                               // %_Z6cxtcpyP10CallSite_tS0_i.exit.i
	shl.b64 	%rd111, %rd234, 3;
	add.s64 	%rd112, %rd228, %rd111;
	mov.u32 	%r84, -1;
	st.global.u32 	[%rd112], %r84;
	add.s32 	%r85, %r122, 1;
	st.global.u32 	[cHeight], %r85;
	mov.u32 	%r126, %r122;
	bra.uni 	LBB11_60;
LBB11_4:                                // %if.then15
	mov.u32 	%r5, %tid.x;
	mov.u32 	%r6, %tid.y;
	mov.u32 	%r90, %ntid.x;
	mad.lo.s32 	%r91, %r90, %r6, %r5;
	and.b32  	%r92, %r91, 31;
	setp.ne.s32 	%p22, %r92, 0;
	@%p22 bra 	LBB11_61;
// %bb.5:                               // %if.then22
	mov.u64 	%rd138, bbccnntt;
	atom.global.add.u64 	%rd139, [%rd138], 1;
	ld.global.u64 	%rd1, [buffer_oN_DeViCe];
	shl.b64 	%rd140, %rd139, 32;
	cvt.s64.s32 	%rd2, %rd139;
	shr.s64 	%rd141, %rd140, 27;
	add.s64 	%rd142, %rd1, %rd141;
	mov.u64 	%rd218, 0;
	st.u64 	[%rd142+8], %rd218;
	cvt.u16.u32 	%rs5, %r5;
	cvt.u16.u32 	%rs6, %r6;
	cvt.u16.u32 	%rs7, %r1;
	cvt.u16.u32 	%rs8, %r2;
	st.v4.u16 	[%rd142], {%rs7, %rs8, %rs5, %rs6};
	st.v2.u32 	[%rd142+16], {%r67, %r68};
	ld.u32 	%r7, [%rd71+136];
	setp.eq.s32 	%p23, %r7, 0;
	mov.u32 	%r116, -1;
	@%p23 bra 	LBB11_32;
// %bb.6:                               // %if.end.i136
	ld.global.u32 	%r8, [cHeight];
	setp.eq.s32 	%p24, %r8, 0;
	@%p24 bra 	LBB11_11;
// %bb.7:                               // %for.cond.preheader.i139
	setp.lt.s32 	%p25, %r8, 1;
	mov.u64 	%rd212, contextDic;
	mov.u32 	%r112, 0;
	mov.u64 	%rd211, %rd218;
	@%p25 bra 	LBB11_23;
// %bb.8:                               // %for.body.i156.preheader
	setp.lt.s32 	%p26, %r7, 1;
	mov.u32 	%r116, 0;
	@%p26 bra 	LBB11_32;
// %bb.9:                               // %for.body.i156.preheader53
	mov.u32 	%r96, 0;
	mov.u64 	%rd209, contextDic;
	mov.u64 	%rd147, 0;
	mov.u32 	%r116, %r96;
LBB11_10:                               // %for.body.i156
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB11_21 Depth 2
	mov.u64 	%rd210, %rd147;
	mov.u32 	%r111, %r96;
LBB11_21:                               // %for.body.i45.i164
                                        //   Parent Loop BB11_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd148, %rd209, %rd210;
	ld.global.u32 	%r98, [%rd148];
	add.s64 	%rd149, %rd71, %rd210;
	ld.u32 	%r99, [%rd149];
	setp.eq.s32 	%p27, %r98, %r99;
	@%p27 bra 	LBB11_20;
	bra.uni 	LBB11_22;
LBB11_20:                               // %for.cond.i.i158
                                        //   in Loop: Header=BB11_21 Depth=2
	add.s32 	%r111, %r111, 1;
	add.s64 	%rd210, %rd210, 8;
	setp.ge.s32 	%p34, %r111, %r7;
	@%p34 bra 	LBB11_32;
	bra.uni 	LBB11_21;
LBB11_22:                               // %for.inc.i169
                                        //   in Loop: Header=BB11_10 Depth=1
	add.s32 	%r112, %r116, 1;
	cvt.u64.u32 	%rd211, %r112;
	mul.wide.u32 	%rd150, %r116, 120;
	mov.u64 	%rd151, contextDic;
	add.s64 	%rd152, %rd151, %rd150;
	add.s64 	%rd212, %rd152, 120;
	add.s64 	%rd209, %rd209, 120;
	setp.lt.s32 	%p28, %r112, %r8;
	mov.u32 	%r116, %r112;
	@%p28 bra 	LBB11_10;
LBB11_23:                               // %for.end.i173
	setp.lt.s32 	%p29, %r7, 1;
	@%p29 bra 	LBB11_31;
// %bb.24:                              // %for.body.i.i180.preheader
	add.s32 	%r25, %r7, -1;
	and.b32  	%r26, %r7, 3;
	setp.lt.u32 	%p30, %r25, 3;
	mov.u32 	%r113, 0;
	mov.u64 	%rd216, 0;
	@%p30 bra 	LBB11_27;
// %bb.25:                              // %for.body.i.i180.preheader.new
	sub.s32 	%r27, %r7, %r26;
	mul.lo.s64 	%rd156, %rd211, 120;
	mov.u64 	%rd157, contextDic;
	add.s64 	%rd158, %rd157, %rd156;
	add.s64 	%rd214, %rd158, 16;
	add.s64 	%rd213, %rd71, 16;
	mov.u64 	%rd216, 0;
LBB11_26:                               // %for.body.i.i180
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%rd159, [%rd213+-16];
	ld.u32 	%rd160, [%rd213+-12];
	st.global.u32 	[%rd214+-12], %rd160;
	st.global.u32 	[%rd214+-16], %rd159;
	ld.u32 	%rd161, [%rd213+-8];
	ld.u32 	%rd162, [%rd213+-4];
	st.global.u32 	[%rd214+-4], %rd162;
	st.global.u32 	[%rd214+-8], %rd161;
	ld.u32 	%rd163, [%rd213];
	ld.u32 	%rd164, [%rd213+4];
	st.global.u32 	[%rd214+4], %rd164;
	st.global.u32 	[%rd214], %rd163;
	ld.u32 	%rd165, [%rd213+8];
	ld.u32 	%rd166, [%rd213+12];
	st.global.u32 	[%rd214+12], %rd166;
	st.global.u32 	[%rd214+8], %rd165;
	add.s64 	%rd216, %rd216, 4;
	cvt.u32.u64 	%r113, %rd216;
	add.s64 	%rd214, %rd214, 32;
	add.s64 	%rd213, %rd213, 32;
	setp.ne.s32 	%p31, %r27, %r113;
	@%p31 bra 	LBB11_26;
LBB11_27:                               // %for.end.loopexit.i.i181.unr-lcssa
	setp.eq.s32 	%p32, %r26, 0;
	@%p32 bra 	LBB11_30;
// %bb.28:                              // %for.body.i.i180.epil.preheader
	add.s32 	%r115, %r113, 1;
	neg.s32 	%r114, %r26;
	mul.lo.s64 	%rd169, %rd211, 120;
	mov.u64 	%rd170, contextDic;
	add.s64 	%rd171, %rd170, %rd169;
LBB11_29:                               // %for.body.i.i180.epil
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	shl.b64 	%rd167, %rd216, 3;
	add.s64 	%rd168, %rd71, %rd167;
	add.s64 	%rd172, %rd171, %rd167;
	ld.u32 	%rd173, [%rd168];
	ld.u32 	%rd174, [%rd168+4];
	st.global.u32 	[%rd172+4], %rd174;
	st.global.u32 	[%rd172], %rd173;
	cvt.u64.u32 	%rd216, %r115;
	add.s32 	%r115, %r115, 1;
	add.s32 	%r114, %r114, 1;
	setp.ne.s32 	%p33, %r114, 0;
	@%p33 bra 	LBB11_29;
LBB11_30:                               // %for.end.loopexit.i.i181
	cvt.u64.u32 	%rd175, %r25;
	add.s64 	%rd218, %rd175, 1;
LBB11_31:                               // %_Z6cxtcpyP10CallSite_tS0_i.exit.i185
	shl.b64 	%rd176, %rd218, 3;
	add.s64 	%rd177, %rd212, %rd176;
	mov.u32 	%r101, -1;
	st.global.u32 	[%rd177], %r101;
	add.s32 	%r102, %r112, 1;
	st.global.u32 	[cHeight], %r102;
	mov.u32 	%r116, %r112;
	bra.uni 	LBB11_32;
LBB11_39:                               // %if.then10.i
	setp.lt.s32 	%p17, %r37, 1;
	mov.u64 	%rd224, 0;
	@%p17 bra 	LBB11_47;
// %bb.40:                              // %for.body.i53.i.preheader
	add.s32 	%r39, %r37, -1;
	and.b32  	%r40, %r37, 3;
	setp.lt.u32 	%p18, %r39, 3;
	mov.u32 	%r117, 0;
	mov.u64 	%rd222, 0;
	@%p18 bra 	LBB11_43;
// %bb.41:                              // %for.body.i53.i.preheader.new
	sub.s32 	%r41, %r37, %r40;
	mov.u64 	%rd117, contextDic;
	add.s64 	%rd220, %rd117, 16;
	add.s64 	%rd219, %rd71, 16;
	mov.u64 	%rd222, 0;
LBB11_42:                               // %for.body.i53.i
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%rd118, [%rd219+-16];
	ld.u32 	%rd119, [%rd219+-12];
	st.global.u32 	[%rd220+-12], %rd119;
	st.global.u32 	[%rd220+-16], %rd118;
	ld.u32 	%rd120, [%rd219+-8];
	ld.u32 	%rd121, [%rd219+-4];
	st.global.u32 	[%rd220+-4], %rd121;
	st.global.u32 	[%rd220+-8], %rd120;
	ld.u32 	%rd122, [%rd219];
	ld.u32 	%rd123, [%rd219+4];
	st.global.u32 	[%rd220+4], %rd123;
	st.global.u32 	[%rd220], %rd122;
	ld.u32 	%rd124, [%rd219+8];
	ld.u32 	%rd125, [%rd219+12];
	st.global.u32 	[%rd220+12], %rd125;
	st.global.u32 	[%rd220+8], %rd124;
	add.s64 	%rd222, %rd222, 4;
	cvt.u32.u64 	%r117, %rd222;
	add.s64 	%rd220, %rd220, 32;
	add.s64 	%rd219, %rd219, 32;
	setp.ne.s32 	%p19, %r41, %r117;
	@%p19 bra 	LBB11_42;
LBB11_43:                               // %for.end.loopexit.i54.i.unr-lcssa
	setp.eq.s32 	%p20, %r40, 0;
	@%p20 bra 	LBB11_46;
// %bb.44:                              // %for.body.i53.i.epil.preheader
	add.s32 	%r119, %r117, 1;
	neg.s32 	%r118, %r40;
	mov.u64 	%rd128, contextDic;
LBB11_45:                               // %for.body.i53.i.epil
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	shl.b64 	%rd126, %rd222, 3;
	add.s64 	%rd127, %rd71, %rd126;
	add.s64 	%rd129, %rd128, %rd126;
	ld.u32 	%rd130, [%rd127];
	ld.u32 	%rd131, [%rd127+4];
	st.global.u32 	[%rd129+4], %rd131;
	st.global.u32 	[%rd129], %rd130;
	cvt.u64.u32 	%rd222, %r119;
	add.s32 	%r119, %r119, 1;
	add.s32 	%r118, %r118, 1;
	setp.ne.s32 	%p21, %r118, 0;
	@%p21 bra 	LBB11_45;
LBB11_46:                               // %for.end.loopexit.i54.i
	cvt.u64.u32 	%rd132, %r39;
	add.s64 	%rd224, %rd132, 1;
LBB11_47:                               // %_Z6cxtcpyP10CallSite_tS0_i.exit57.i
	shl.b64 	%rd133, %rd224, 3;
	mov.u64 	%rd134, contextDic;
	add.s64 	%rd135, %rd134, %rd133;
	mov.u32 	%r88, -1;
	st.global.u32 	[%rd135], %r88;
	st.global.u32 	[cHeight], %r73;
	mov.u32 	%r126, 0;
LBB11_60:                               // %getContextID.exit
	shl.b64 	%rd136, %rd37, 5;
	add.s64 	%rd137, %rd36, %rd136;
	st.u32 	[%rd137+24], %r126;
LBB11_61:                               // %return
	ret;
LBB11_11:                               // %if.then10.i141
	setp.lt.s32 	%p35, %r7, 1;
	mov.u64 	%rd208, 0;
	@%p35 bra 	LBB11_19;
// %bb.12:                              // %for.body.i53.i148.preheader
	add.s32 	%r9, %r7, -1;
	and.b32  	%r10, %r7, 3;
	setp.lt.u32 	%p36, %r9, 3;
	mov.u32 	%r107, 0;
	mov.u64 	%rd206, 0;
	@%p36 bra 	LBB11_15;
// %bb.13:                              // %for.body.i53.i148.preheader.new
	sub.s32 	%r11, %r7, %r10;
	mov.u64 	%rd182, contextDic;
	add.s64 	%rd204, %rd182, 16;
	add.s64 	%rd203, %rd71, 16;
	mov.u64 	%rd206, 0;
LBB11_14:                               // %for.body.i53.i148
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%rd183, [%rd203+-16];
	ld.u32 	%rd184, [%rd203+-12];
	st.global.u32 	[%rd204+-12], %rd184;
	st.global.u32 	[%rd204+-16], %rd183;
	ld.u32 	%rd185, [%rd203+-8];
	ld.u32 	%rd186, [%rd203+-4];
	st.global.u32 	[%rd204+-4], %rd186;
	st.global.u32 	[%rd204+-8], %rd185;
	ld.u32 	%rd187, [%rd203];
	ld.u32 	%rd188, [%rd203+4];
	st.global.u32 	[%rd204+4], %rd188;
	st.global.u32 	[%rd204], %rd187;
	ld.u32 	%rd189, [%rd203+8];
	ld.u32 	%rd190, [%rd203+12];
	st.global.u32 	[%rd204+12], %rd190;
	st.global.u32 	[%rd204+8], %rd189;
	add.s64 	%rd206, %rd206, 4;
	cvt.u32.u64 	%r107, %rd206;
	add.s64 	%rd204, %rd204, 32;
	add.s64 	%rd203, %rd203, 32;
	setp.ne.s32 	%p37, %r11, %r107;
	@%p37 bra 	LBB11_14;
LBB11_15:                               // %for.end.loopexit.i54.i149.unr-lcssa
	setp.eq.s32 	%p38, %r10, 0;
	@%p38 bra 	LBB11_18;
// %bb.16:                              // %for.body.i53.i148.epil.preheader
	add.s32 	%r109, %r107, 1;
	neg.s32 	%r108, %r10;
	mov.u64 	%rd193, contextDic;
LBB11_17:                               // %for.body.i53.i148.epil
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	shl.b64 	%rd191, %rd206, 3;
	add.s64 	%rd192, %rd71, %rd191;
	add.s64 	%rd194, %rd193, %rd191;
	ld.u32 	%rd195, [%rd192];
	ld.u32 	%rd196, [%rd192+4];
	st.global.u32 	[%rd194+4], %rd196;
	st.global.u32 	[%rd194], %rd195;
	cvt.u64.u32 	%rd206, %r109;
	add.s32 	%r109, %r109, 1;
	add.s32 	%r108, %r108, 1;
	setp.ne.s32 	%p39, %r108, 0;
	@%p39 bra 	LBB11_17;
LBB11_18:                               // %for.end.loopexit.i54.i149
	cvt.u64.u32 	%rd197, %r9;
	add.s64 	%rd208, %rd197, 1;
LBB11_19:                               // %_Z6cxtcpyP10CallSite_tS0_i.exit57.i153
	shl.b64 	%rd198, %rd208, 3;
	mov.u64 	%rd199, contextDic;
	add.s64 	%rd200, %rd199, %rd198;
	mov.u32 	%r105, -1;
	st.global.u32 	[%rd200], %r105;
	st.global.u32 	[cHeight], %r73;
	mov.u32 	%r116, 0;
LBB11_32:                               // %getContextID.exit187
	shl.b64 	%rd201, %rd2, 5;
	add.s64 	%rd202, %rd1, %rd201;
	st.u32 	[%rd202+24], %r116;
	bra.uni 	LBB11_61;
                                        // -- End function
}
	// .globl	_Z10storeLinesPvssssS_ // -- Begin function _Z10storeLinesPvssssS_
.visible .func _Z10storeLinesPvssssS_(
	.param .b64 _Z10storeLinesPvssssS__param_0,
	.param .b32 _Z10storeLinesPvssssS__param_1,
	.param .b32 _Z10storeLinesPvssssS__param_2,
	.param .b32 _Z10storeLinesPvssssS__param_3,
	.param .b32 _Z10storeLinesPvssssS__param_4,
	.param .b64 _Z10storeLinesPvssssS__param_5
)                                       // @_Z10storeLinesPvssssS_
{
	.reg .pred 	%p<22>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<63>;
	.reg .b64 	%rd<123>;

// %bb.0:                               // %entry
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r34, %nctaid.x;
	mad.lo.s32 	%r3, %r34, %r2, %r1;
	ld.global.u32 	%r35, [CTALB];
	setp.lt.u32 	%p1, %r3, %r35;
	@%p1 bra 	LBB12_33;
// %bb.1:                               // %lor.lhs.false
	ld.global.u32 	%r36, [CTAUB];
	setp.gt.u32 	%p2, %r3, %r36;
	@%p2 bra 	LBB12_33;
// %bb.2:                               // %if.end
	mov.u32 	%r59, 1;
	// begin inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r59, 0; 
	vote.ballot.b32 	%r37, %p1; 
	}
	// end inline asm
	ld.global.u64 	%rd38, [ccnntt];
	setp.lt.u64 	%p3, %rd38, 83873280;
	@%p3 bra 	LBB12_4;
	bra.uni 	LBB12_3;
LBB12_4:                                // %cond.end18
	mov.u64 	%rd43, ccnntt;
	atom.global.add.u64 	%rd1, [%rd43], 1;
	ld.global.u64 	%rd2, [buffer_oN_DeViCe];
	setp.eq.s64 	%p4, %rd2, 0;
	@%p4 bra 	LBB12_33;
// %bb.5:                               // %if.end22
	ld.param.u64 	%rd37, [_Z10storeLinesPvssssS__param_5];
	ld.param.u16 	%rs4, [_Z10storeLinesPvssssS__param_4];
	ld.param.u16 	%rs3, [_Z10storeLinesPvssssS__param_3];
	ld.param.u16 	%rs2, [_Z10storeLinesPvssssS__param_2];
	ld.param.u16 	%rs1, [_Z10storeLinesPvssssS__param_1];
	ld.param.u64 	%rd36, [_Z10storeLinesPvssssS__param_0];
	cvt.u32.u64 	%r40, %rd1;
	mul.lo.s32 	%r41, %r40, 12;
	mul.wide.s32 	%rd44, %r41, 2;
	add.s64 	%rd45, %rd2, %rd44;
	st.u16 	[%rd45], %r1;
	st.u16 	[%rd45+2], %r2;
	mov.u32 	%r42, %tid.x;
	st.u16 	[%rd45+4], %r42;
	mov.u32 	%r43, %tid.y;
	st.u16 	[%rd45+6], %r43;
	mul.lo.s64 	%rd46, %rd1, 12884901888;
	add.s64 	%rd47, %rd46, 4294967296;
	shr.s64 	%rd48, %rd47, 29;
	add.s64 	%rd49, %rd2, %rd48;
	st.u64 	[%rd49], %rd36;
	st.u16 	[%rd45+16], %rs1;
	st.u16 	[%rd45+18], %rs2;
	st.u16 	[%rd45+20], %rs3;
	st.u16 	[%rd45+22], %rs4;
	ld.u32 	%r4, [%rd37+136];
	setp.eq.s32 	%p5, %r4, 0;
	@%p5 bra 	LBB12_33;
// %bb.6:                               // %if.end.i
	ld.global.u32 	%r5, [cHeight];
	setp.eq.s32 	%p6, %r5, 0;
	@%p6 bra 	LBB12_11;
// %bb.7:                               // %for.cond.preheader.i
	setp.lt.s32 	%p7, %r5, 1;
	mov.u64 	%rd116, contextDic;
	mov.u64 	%rd122, 0;
	mov.u64 	%rd115, %rd122;
	@%p7 bra 	LBB12_24;
// %bb.8:                               // %for.body.i.preheader
	setp.lt.s32 	%p8, %r4, 1;
	@%p8 bra 	LBB12_33;
// %bb.9:                               // %for.body.i.preheader41
	mov.u32 	%r45, 0;
	mov.u64 	%rd113, contextDic;
	mov.u64 	%rd53, 0;
	mov.u32 	%r57, %r45;
LBB12_10:                               // %for.body.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB12_21 Depth 2
	mov.u32 	%r17, %r57;
	mov.u64 	%rd114, %rd53;
	mov.u32 	%r58, %r45;
LBB12_21:                               // %for.body.i45.i
                                        //   Parent Loop BB12_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd54, %rd113, %rd114;
	ld.global.u32 	%r47, [%rd54];
	add.s64 	%rd55, %rd37, %rd114;
	ld.u32 	%r48, [%rd55];
	setp.eq.s32 	%p9, %r47, %r48;
	@%p9 bra 	LBB12_20;
	bra.uni 	LBB12_22;
LBB12_20:                               // %for.cond.i.i
                                        //   in Loop: Header=BB12_21 Depth=2
	add.s32 	%r58, %r58, 1;
	add.s64 	%rd114, %rd114, 8;
	setp.ge.s32 	%p16, %r58, %r4;
	@%p16 bra 	LBB12_33;
	bra.uni 	LBB12_21;
LBB12_22:                               // %for.inc.i
                                        //   in Loop: Header=BB12_10 Depth=1
	add.s32 	%r57, %r17, 1;
	add.s64 	%rd113, %rd113, 120;
	setp.lt.s32 	%p10, %r57, %r5;
	@%p10 bra 	LBB12_10;
// %bb.23:                              // %for.end.i.loopexit
	cvt.u64.u32 	%rd115, %r57;
	mul.wide.u32 	%rd56, %r17, 120;
	mov.u64 	%rd57, contextDic;
	add.s64 	%rd58, %rd57, %rd56;
	add.s64 	%rd116, %rd58, 120;
	add.s32 	%r59, %r17, 2;
LBB12_24:                               // %for.end.i
	setp.lt.s32 	%p11, %r4, 1;
	@%p11 bra 	LBB12_32;
// %bb.25:                              // %for.body.i.i.preheader
	add.s32 	%r23, %r4, -1;
	and.b32  	%r24, %r4, 3;
	setp.lt.u32 	%p12, %r23, 3;
	mov.u32 	%r60, 0;
	mov.u64 	%rd120, 0;
	@%p12 bra 	LBB12_28;
// %bb.26:                              // %for.body.i.i.preheader.new
	sub.s32 	%r25, %r4, %r24;
	mul.lo.s64 	%rd62, %rd115, 120;
	mov.u64 	%rd63, contextDic;
	add.s64 	%rd64, %rd63, %rd62;
	add.s64 	%rd118, %rd64, 16;
	add.s64 	%rd117, %rd37, 16;
	mov.u64 	%rd120, 0;
LBB12_27:                               // %for.body.i.i
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%rd65, [%rd117+-16];
	ld.u32 	%rd66, [%rd117+-12];
	st.global.u32 	[%rd118+-12], %rd66;
	st.global.u32 	[%rd118+-16], %rd65;
	ld.u32 	%rd67, [%rd117+-8];
	ld.u32 	%rd68, [%rd117+-4];
	st.global.u32 	[%rd118+-4], %rd68;
	st.global.u32 	[%rd118+-8], %rd67;
	ld.u32 	%rd69, [%rd117];
	ld.u32 	%rd70, [%rd117+4];
	st.global.u32 	[%rd118+4], %rd70;
	st.global.u32 	[%rd118], %rd69;
	ld.u32 	%rd71, [%rd117+8];
	ld.u32 	%rd72, [%rd117+12];
	st.global.u32 	[%rd118+12], %rd72;
	st.global.u32 	[%rd118+8], %rd71;
	add.s64 	%rd120, %rd120, 4;
	cvt.u32.u64 	%r60, %rd120;
	add.s64 	%rd118, %rd118, 32;
	add.s64 	%rd117, %rd117, 32;
	setp.ne.s32 	%p13, %r25, %r60;
	@%p13 bra 	LBB12_27;
LBB12_28:                               // %for.end.loopexit.i.i.unr-lcssa
	setp.eq.s32 	%p14, %r24, 0;
	@%p14 bra 	LBB12_31;
// %bb.29:                              // %for.body.i.i.epil.preheader
	add.s32 	%r62, %r60, 1;
	neg.s32 	%r61, %r24;
	mul.lo.s64 	%rd75, %rd115, 120;
	mov.u64 	%rd76, contextDic;
	add.s64 	%rd77, %rd76, %rd75;
LBB12_30:                               // %for.body.i.i.epil
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	shl.b64 	%rd73, %rd120, 3;
	add.s64 	%rd74, %rd37, %rd73;
	add.s64 	%rd78, %rd77, %rd73;
	ld.u32 	%rd79, [%rd74];
	ld.u32 	%rd80, [%rd74+4];
	st.global.u32 	[%rd78+4], %rd80;
	st.global.u32 	[%rd78], %rd79;
	cvt.u64.u32 	%rd120, %r62;
	add.s32 	%r62, %r62, 1;
	add.s32 	%r61, %r61, 1;
	setp.ne.s32 	%p15, %r61, 0;
	@%p15 bra 	LBB12_30;
LBB12_31:                               // %for.end.loopexit.i.i
	cvt.u64.u32 	%rd81, %r23;
	add.s64 	%rd122, %rd81, 1;
LBB12_32:                               // %_Z6cxtcpyP10CallSite_tS0_i.exit.i
	shl.b64 	%rd82, %rd122, 3;
	add.s64 	%rd83, %rd116, %rd82;
	mov.u32 	%r50, -1;
	st.global.u32 	[%rd83], %r50;
	st.global.u32 	[cHeight], %r59;
	bra.uni 	LBB12_33;
LBB12_11:                               // %if.then10.i
	setp.lt.s32 	%p17, %r4, 1;
	mov.u64 	%rd112, 0;
	@%p17 bra 	LBB12_19;
// %bb.12:                              // %for.body.i53.i.preheader
	add.s32 	%r6, %r4, -1;
	and.b32  	%r7, %r4, 3;
	setp.lt.u32 	%p18, %r6, 3;
	mov.u32 	%r54, 0;
	mov.u64 	%rd110, 0;
	@%p18 bra 	LBB12_15;
// %bb.13:                              // %for.body.i53.i.preheader.new
	sub.s32 	%r8, %r4, %r7;
	mov.u64 	%rd88, contextDic;
	add.s64 	%rd108, %rd88, 16;
	add.s64 	%rd107, %rd37, 16;
	mov.u64 	%rd110, 0;
LBB12_14:                               // %for.body.i53.i
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%rd89, [%rd107+-16];
	ld.u32 	%rd90, [%rd107+-12];
	st.global.u32 	[%rd108+-12], %rd90;
	st.global.u32 	[%rd108+-16], %rd89;
	ld.u32 	%rd91, [%rd107+-8];
	ld.u32 	%rd92, [%rd107+-4];
	st.global.u32 	[%rd108+-4], %rd92;
	st.global.u32 	[%rd108+-8], %rd91;
	ld.u32 	%rd93, [%rd107];
	ld.u32 	%rd94, [%rd107+4];
	st.global.u32 	[%rd108+4], %rd94;
	st.global.u32 	[%rd108], %rd93;
	ld.u32 	%rd95, [%rd107+8];
	ld.u32 	%rd96, [%rd107+12];
	st.global.u32 	[%rd108+12], %rd96;
	st.global.u32 	[%rd108+8], %rd95;
	add.s64 	%rd110, %rd110, 4;
	cvt.u32.u64 	%r54, %rd110;
	add.s64 	%rd108, %rd108, 32;
	add.s64 	%rd107, %rd107, 32;
	setp.ne.s32 	%p19, %r8, %r54;
	@%p19 bra 	LBB12_14;
LBB12_15:                               // %for.end.loopexit.i54.i.unr-lcssa
	setp.eq.s32 	%p20, %r7, 0;
	@%p20 bra 	LBB12_18;
// %bb.16:                              // %for.body.i53.i.epil.preheader
	add.s32 	%r56, %r54, 1;
	neg.s32 	%r55, %r7;
	mov.u64 	%rd99, contextDic;
LBB12_17:                               // %for.body.i53.i.epil
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	shl.b64 	%rd97, %rd110, 3;
	add.s64 	%rd98, %rd37, %rd97;
	add.s64 	%rd100, %rd99, %rd97;
	ld.u32 	%rd101, [%rd98];
	ld.u32 	%rd102, [%rd98+4];
	st.global.u32 	[%rd100+4], %rd102;
	st.global.u32 	[%rd100], %rd101;
	cvt.u64.u32 	%rd110, %r56;
	add.s32 	%r56, %r56, 1;
	add.s32 	%r55, %r55, 1;
	setp.ne.s32 	%p21, %r55, 0;
	@%p21 bra 	LBB12_17;
LBB12_18:                               // %for.end.loopexit.i54.i
	cvt.u64.u32 	%rd103, %r6;
	add.s64 	%rd112, %rd103, 1;
LBB12_19:                               // %_Z6cxtcpyP10CallSite_tS0_i.exit57.i
	shl.b64 	%rd104, %rd112, 3;
	mov.u64 	%rd105, contextDic;
	add.s64 	%rd106, %rd105, %rd104;
	mov.u32 	%r52, -1;
	st.global.u32 	[%rd106], %r52;
	mov.u32 	%r53, 1;
	st.global.u32 	[cHeight], %r53;
LBB12_33:                               // %cleanup.cont
	ret;
LBB12_3:                                // %cond.false
	mov.u64 	%rd39, _$_str8;
	cvta.global.u64 	%rd40, %rd39;
	mov.u64 	%rd41, __PRETTY_FUNCTION___$__Z10storeLinesPvssssS_;
	cvta.global.u64 	%rd42, %rd41;
	mov.u32 	%r39, 690;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r39;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd42;
	call.uni 
	_ZL13__assert_failPKcS0_jS0_, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 10
                                        // -- End function
}
	// .globl	print1          // -- Begin function print1
.visible .func print1(
	.param .b32 print1_param_0
)                                       // @print1
{
	.local .align 8 .b8 	__local_depot13[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<6>;

// %bb.0:                               // %entry
	mov.u64 	%SPL, __local_depot13;
	cvta.local.u64 	%SP, %SPL;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	add.s32 	%r4, %r3, %r2;
	mov.u32 	%r5, %ctaid.x;
	add.s32 	%r6, %r4, %r5;
	mov.u32 	%r7, %ctaid.y;
	neg.s32 	%r8, %r7;
	setp.ne.s32 	%p1, %r6, %r8;
	@%p1 bra 	LBB13_2;
// %bb.1:                               // %if.then
	ld.param.u32 	%r1, [print1_param_0];
	add.u64 	%rd2, %SP, 0;
	add.u64 	%rd1, %SPL, 0;
	st.local.u32 	[%rd1], %r1;
	mov.u64 	%rd3, _$_str10;
	cvta.global.u64 	%rd4, %rd3;
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd2;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r9, [retval0+0];
	} // callseq 11
LBB13_2:                                // %if.end
	ret;
                                        // -- End function
}
	// .globl	_Z6print3ii     // -- Begin function _Z6print3ii
.visible .func _Z6print3ii(
	.param .b32 _Z6print3ii_param_0,
	.param .b32 _Z6print3ii_param_1
)                                       // @_Z6print3ii
{


// %bb.0:                               // %entry
	ret;
                                        // -- End function
}
	// .globl	print4          // -- Begin function print4
.visible .func print4(
	.param .b64 print4_param_0
)                                       // @print4
{
	.local .align 8 .b8 	__local_depot15[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<6>;

// %bb.0:                               // %entry
	mov.u64 	%SPL, __local_depot15;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [print4_param_0];
	add.u64 	%rd2, %SP, 0;
	add.u64 	%rd3, %SPL, 0;
	st.local.u64 	[%rd3], %rd1;
	mov.u64 	%rd4, _$_str11;
	cvta.global.u64 	%rd5, %rd4;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd2;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r1, [retval0+0];
	} // callseq 12
	ret;
                                        // -- End function
}
	// .globl	print5          // -- Begin function print5
.visible .func print5(
	.param .b64 print5_param_0,
	.param .b32 print5_param_1,
	.param .b32 print5_param_2,
	.param .b32 print5_param_3,
	.param .b32 print5_param_4,
	.param .b64 print5_param_5
)                                       // @print5
{
	.reg .pred 	%p<22>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<72>;
	.reg .b64 	%rd<126>;

// %bb.0:                               // %entry
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r38, %nctaid.x;
	mad.lo.s32 	%r3, %r38, %r2, %r1;
	ld.global.u32 	%r39, [CTALB];
	setp.lt.u32 	%p1, %r3, %r39;
	@%p1 bra 	LBB16_2;
// %bb.1:                               // %lor.lhs.false
	ld.global.u32 	%r40, [CTAUB];
	setp.le.u32 	%p2, %r3, %r40;
	@%p2 bra 	LBB16_3;
LBB16_2:                                // %if.then
	mov.u64 	%rd107, _$_str12;
	cvta.global.u64 	%rd108, %rd107;
	mov.u64 	%rd109, 0;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd108;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd109;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r62, [retval0+0];
	} // callseq 14
LBB16_34:                               // %return
	ret;
LBB16_3:                                // %if.end.i
	mov.u32 	%r68, 1;
	// begin inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r68, 0; 
	vote.ballot.b32 	%r41, %p1; 
	}
	// end inline asm
	ld.global.u64 	%rd38, [ccnntt];
	setp.lt.u64 	%p3, %rd38, 83873280;
	@%p3 bra 	LBB16_5;
	bra.uni 	LBB16_4;
LBB16_5:                                // %cond.end18.i
	mov.u64 	%rd43, ccnntt;
	atom.global.add.u64 	%rd1, [%rd43], 1;
	ld.global.u64 	%rd2, [buffer_oN_DeViCe];
	setp.eq.s64 	%p4, %rd2, 0;
	@%p4 bra 	LBB16_34;
// %bb.6:                               // %if.end22.i
	ld.param.u64 	%rd37, [print5_param_5];
	ld.param.u32 	%r37, [print5_param_4];
	ld.param.u32 	%r36, [print5_param_3];
	ld.param.u32 	%r35, [print5_param_2];
	ld.param.u32 	%r34, [print5_param_1];
	ld.param.u64 	%rd36, [print5_param_0];
	shr.s32 	%r43, %r34, 31;
	shr.u32 	%r44, %r43, 29;
	add.s32 	%r45, %r34, %r44;
	shr.u32 	%r46, %r45, 3;
	cvt.u16.u32 	%rs1, %r46;
	cvt.u16.u32 	%rs2, %r35;
	cvt.u16.u32 	%rs3, %r36;
	cvt.u16.u32 	%rs4, %r37;
	cvt.u32.u64 	%r48, %rd1;
	mul.lo.s32 	%r49, %r48, 12;
	mul.wide.s32 	%rd44, %r49, 2;
	add.s64 	%rd45, %rd2, %rd44;
	st.u16 	[%rd45], %r1;
	st.u16 	[%rd45+2], %r2;
	mov.u32 	%r50, %tid.x;
	st.u16 	[%rd45+4], %r50;
	mov.u32 	%r51, %tid.y;
	st.u16 	[%rd45+6], %r51;
	mul.lo.s64 	%rd46, %rd1, 12884901888;
	add.s64 	%rd47, %rd46, 4294967296;
	shr.s64 	%rd48, %rd47, 29;
	add.s64 	%rd49, %rd2, %rd48;
	st.u64 	[%rd49], %rd36;
	st.u16 	[%rd45+16], %rs1;
	st.u16 	[%rd45+18], %rs2;
	st.u16 	[%rd45+20], %rs3;
	st.u16 	[%rd45+22], %rs4;
	ld.u32 	%r4, [%rd37+136];
	setp.eq.s32 	%p5, %r4, 0;
	@%p5 bra 	LBB16_34;
// %bb.7:                               // %if.end.i.i
	ld.global.u32 	%r5, [cHeight];
	setp.eq.s32 	%p6, %r5, 0;
	@%p6 bra 	LBB16_12;
// %bb.8:                               // %for.cond.preheader.i.i
	setp.lt.s32 	%p7, %r5, 1;
	mov.u64 	%rd119, contextDic;
	mov.u64 	%rd125, 0;
	mov.u64 	%rd118, %rd125;
	@%p7 bra 	LBB16_25;
// %bb.9:                               // %for.body.i.preheader.i
	setp.lt.s32 	%p8, %r4, 1;
	@%p8 bra 	LBB16_34;
// %bb.10:                              // %for.body.i.i.preheader
	mov.u32 	%r53, 0;
	mov.u64 	%rd116, contextDic;
	mov.u64 	%rd53, 0;
	mov.u32 	%r66, %r53;
LBB16_11:                               // %for.body.i.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB16_22 Depth 2
	mov.u32 	%r17, %r66;
	mov.u64 	%rd117, %rd53;
	mov.u32 	%r67, %r53;
LBB16_22:                               // %for.body.i45.i.i
                                        //   Parent Loop BB16_11 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd54, %rd116, %rd117;
	ld.global.u32 	%r55, [%rd54];
	add.s64 	%rd55, %rd37, %rd117;
	ld.u32 	%r56, [%rd55];
	setp.eq.s32 	%p9, %r55, %r56;
	@%p9 bra 	LBB16_21;
	bra.uni 	LBB16_23;
LBB16_21:                               // %for.cond.i.i.i
                                        //   in Loop: Header=BB16_22 Depth=2
	add.s32 	%r67, %r67, 1;
	add.s64 	%rd117, %rd117, 8;
	setp.ge.s32 	%p16, %r67, %r4;
	@%p16 bra 	LBB16_34;
	bra.uni 	LBB16_22;
LBB16_23:                               // %for.inc.i.i
                                        //   in Loop: Header=BB16_11 Depth=1
	add.s32 	%r66, %r17, 1;
	add.s64 	%rd116, %rd116, 120;
	setp.lt.s32 	%p10, %r66, %r5;
	@%p10 bra 	LBB16_11;
// %bb.24:                              // %for.end.i.loopexit.i
	cvt.u64.u32 	%rd118, %r66;
	mul.wide.u32 	%rd56, %r17, 120;
	mov.u64 	%rd57, contextDic;
	add.s64 	%rd58, %rd57, %rd56;
	add.s64 	%rd119, %rd58, 120;
	add.s32 	%r68, %r17, 2;
LBB16_25:                               // %for.end.i.i
	setp.lt.s32 	%p11, %r4, 1;
	@%p11 bra 	LBB16_33;
// %bb.26:                              // %for.body.i.i.i.preheader
	add.s32 	%r23, %r4, -1;
	and.b32  	%r24, %r4, 3;
	setp.lt.u32 	%p12, %r23, 3;
	mov.u32 	%r69, 0;
	mov.u64 	%rd123, 0;
	@%p12 bra 	LBB16_29;
// %bb.27:                              // %for.body.i.i.i.preheader.new
	sub.s32 	%r25, %r4, %r24;
	mul.lo.s64 	%rd62, %rd118, 120;
	mov.u64 	%rd63, contextDic;
	add.s64 	%rd64, %rd63, %rd62;
	add.s64 	%rd121, %rd64, 16;
	add.s64 	%rd120, %rd37, 16;
	mov.u64 	%rd123, 0;
LBB16_28:                               // %for.body.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%rd65, [%rd120+-16];
	ld.u32 	%rd66, [%rd120+-12];
	st.global.u32 	[%rd121+-12], %rd66;
	st.global.u32 	[%rd121+-16], %rd65;
	ld.u32 	%rd67, [%rd120+-8];
	ld.u32 	%rd68, [%rd120+-4];
	st.global.u32 	[%rd121+-4], %rd68;
	st.global.u32 	[%rd121+-8], %rd67;
	ld.u32 	%rd69, [%rd120];
	ld.u32 	%rd70, [%rd120+4];
	st.global.u32 	[%rd121+4], %rd70;
	st.global.u32 	[%rd121], %rd69;
	ld.u32 	%rd71, [%rd120+8];
	ld.u32 	%rd72, [%rd120+12];
	st.global.u32 	[%rd121+12], %rd72;
	st.global.u32 	[%rd121+8], %rd71;
	add.s64 	%rd123, %rd123, 4;
	cvt.u32.u64 	%r69, %rd123;
	add.s64 	%rd121, %rd121, 32;
	add.s64 	%rd120, %rd120, 32;
	setp.ne.s32 	%p13, %r25, %r69;
	@%p13 bra 	LBB16_28;
LBB16_29:                               // %for.end.loopexit.i.i.i.unr-lcssa
	setp.eq.s32 	%p14, %r24, 0;
	@%p14 bra 	LBB16_32;
// %bb.30:                              // %for.body.i.i.i.epil.preheader
	add.s32 	%r71, %r69, 1;
	neg.s32 	%r70, %r24;
	mul.lo.s64 	%rd75, %rd118, 120;
	mov.u64 	%rd76, contextDic;
	add.s64 	%rd77, %rd76, %rd75;
LBB16_31:                               // %for.body.i.i.i.epil
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	shl.b64 	%rd73, %rd123, 3;
	add.s64 	%rd74, %rd37, %rd73;
	add.s64 	%rd78, %rd77, %rd73;
	ld.u32 	%rd79, [%rd74];
	ld.u32 	%rd80, [%rd74+4];
	st.global.u32 	[%rd78+4], %rd80;
	st.global.u32 	[%rd78], %rd79;
	cvt.u64.u32 	%rd123, %r71;
	add.s32 	%r71, %r71, 1;
	add.s32 	%r70, %r70, 1;
	setp.ne.s32 	%p15, %r70, 0;
	@%p15 bra 	LBB16_31;
LBB16_32:                               // %for.end.loopexit.i.i.i
	cvt.u64.u32 	%rd81, %r23;
	add.s64 	%rd125, %rd81, 1;
LBB16_33:                               // %_Z6cxtcpyP10CallSite_tS0_i.exit.i.i
	shl.b64 	%rd82, %rd125, 3;
	add.s64 	%rd83, %rd119, %rd82;
	mov.u32 	%r58, -1;
	st.global.u32 	[%rd83], %r58;
	st.global.u32 	[cHeight], %r68;
	bra.uni 	LBB16_34;
LBB16_12:                               // %if.then10.i.i
	setp.lt.s32 	%p17, %r4, 1;
	mov.u64 	%rd115, 0;
	@%p17 bra 	LBB16_20;
// %bb.13:                              // %for.body.i53.i.i.preheader
	add.s32 	%r6, %r4, -1;
	and.b32  	%r7, %r4, 3;
	setp.lt.u32 	%p18, %r6, 3;
	mov.u32 	%r63, 0;
	mov.u64 	%rd113, 0;
	@%p18 bra 	LBB16_16;
// %bb.14:                              // %for.body.i53.i.i.preheader.new
	sub.s32 	%r8, %r4, %r7;
	mov.u64 	%rd88, contextDic;
	add.s64 	%rd111, %rd88, 16;
	add.s64 	%rd110, %rd37, 16;
	mov.u64 	%rd113, 0;
LBB16_15:                               // %for.body.i53.i.i
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%rd89, [%rd110+-16];
	ld.u32 	%rd90, [%rd110+-12];
	st.global.u32 	[%rd111+-12], %rd90;
	st.global.u32 	[%rd111+-16], %rd89;
	ld.u32 	%rd91, [%rd110+-8];
	ld.u32 	%rd92, [%rd110+-4];
	st.global.u32 	[%rd111+-4], %rd92;
	st.global.u32 	[%rd111+-8], %rd91;
	ld.u32 	%rd93, [%rd110];
	ld.u32 	%rd94, [%rd110+4];
	st.global.u32 	[%rd111+4], %rd94;
	st.global.u32 	[%rd111], %rd93;
	ld.u32 	%rd95, [%rd110+8];
	ld.u32 	%rd96, [%rd110+12];
	st.global.u32 	[%rd111+12], %rd96;
	st.global.u32 	[%rd111+8], %rd95;
	add.s64 	%rd113, %rd113, 4;
	cvt.u32.u64 	%r63, %rd113;
	add.s64 	%rd111, %rd111, 32;
	add.s64 	%rd110, %rd110, 32;
	setp.ne.s32 	%p19, %r8, %r63;
	@%p19 bra 	LBB16_15;
LBB16_16:                               // %for.end.loopexit.i54.i.i.unr-lcssa
	setp.eq.s32 	%p20, %r7, 0;
	@%p20 bra 	LBB16_19;
// %bb.17:                              // %for.body.i53.i.i.epil.preheader
	add.s32 	%r65, %r63, 1;
	neg.s32 	%r64, %r7;
	mov.u64 	%rd99, contextDic;
LBB16_18:                               // %for.body.i53.i.i.epil
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	shl.b64 	%rd97, %rd113, 3;
	add.s64 	%rd98, %rd37, %rd97;
	add.s64 	%rd100, %rd99, %rd97;
	ld.u32 	%rd101, [%rd98];
	ld.u32 	%rd102, [%rd98+4];
	st.global.u32 	[%rd100+4], %rd102;
	st.global.u32 	[%rd100], %rd101;
	cvt.u64.u32 	%rd113, %r65;
	add.s32 	%r65, %r65, 1;
	add.s32 	%r64, %r64, 1;
	setp.ne.s32 	%p21, %r64, 0;
	@%p21 bra 	LBB16_18;
LBB16_19:                               // %for.end.loopexit.i54.i.i
	cvt.u64.u32 	%rd103, %r6;
	add.s64 	%rd115, %rd103, 1;
LBB16_20:                               // %_Z6cxtcpyP10CallSite_tS0_i.exit57.i.i
	shl.b64 	%rd104, %rd115, 3;
	mov.u64 	%rd105, contextDic;
	add.s64 	%rd106, %rd105, %rd104;
	mov.u32 	%r60, -1;
	st.global.u32 	[%rd106], %r60;
	mov.u32 	%r61, 1;
	st.global.u32 	[cHeight], %r61;
	bra.uni 	LBB16_34;
LBB16_4:                                // %cond.false.i
	mov.u64 	%rd39, _$_str8;
	cvta.global.u64 	%rd40, %rd39;
	mov.u64 	%rd41, __PRETTY_FUNCTION___$__Z10storeLinesPvssssS_;
	cvta.global.u64 	%rd42, %rd41;
	mov.u32 	%r47, 690;
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r47;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd42;
	call.uni 
	_ZL13__assert_failPKcS0_jS0_, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 13
                                        // -- End function
}
	// .globl	RetKernel       // -- Begin function RetKernel
.visible .func RetKernel(
	.param .b64 RetKernel_param_0
)                                       // @RetKernel
{
	.local .align 8 .b8 	__local_depot17[88];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<15>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<25>;
	.reg .b64 	%rd<60>;

// %bb.0:                               // %entry
	mov.u64 	%SPL, __local_depot17;
	cvta.local.u64 	%SP, %SPL;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ctaid.y;
	mov.u32 	%r1, %nctaid.x;
	mad.lo.s32 	%r2, %r1, %r7, %r6;
	ld.global.u32 	%r8, [CTALB];
	setp.lt.u32 	%p3, %r2, %r8;
	@%p3 bra 	LBB17_12;
// %bb.1:                               // %lor.lhs.false
	ld.global.u32 	%r9, [CTAUB];
	setp.gt.u32 	%p4, %r2, %r9;
	@%p4 bra 	LBB17_12;
// %bb.2:                               // %if.end
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r10, %tid.y;
	mov.u32 	%r4, %ntid.x;
	bar.sync 	0;
	neg.s32 	%r5, %r10;
	mul.lo.s32 	%r11, %r4, %r5;
	setp.ne.s32 	%p6, %r3, %r11;
	mov.pred 	%p14, 0;
	@%p6 bra 	LBB17_6;
// %bb.3:                               // %if.then20
	ld.param.u64 	%rd13, [RetKernel_param_0];
	setp.eq.s64 	%p7, %rd13, 0;
	@%p7 bra 	LBB17_5;
// %bb.4:                               // %if.then22
	add.u64 	%rd14, %SP, 0;
	add.u64 	%rd1, %SPL, 0;
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	free, 
	(
	param0
	);
	} // callseq 15
	mov.u64 	%rd19, aliveCTA;
	atom.global.add.u32 	%r12, [%rd19], -1;
	st.local.v2.u32 	[%rd1], {%r2, %r12};
	mov.u64 	%rd20, _$_str13;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd14;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r13, [retval0+0];
	} // callseq 16
	setp.eq.s32 	%p14, %r12, 1;
	bra.uni 	LBB17_6;
LBB17_5:                                // %if.else
	mov.u64 	%rd23, _$_str14;
	cvta.global.u64 	%rd24, %rd23;
	mov.u64 	%rd25, 0;
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd25;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r14, [retval0+0];
	} // callseq 17
LBB17_6:                                // %if.end25
	bar.sync 	0;
	setp.ne.s32 	%p9, %r3, %r5;
	not.pred 	%p10, %p14;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	LBB17_12;
// %bb.7:                               // %if.then31
	add.u64 	%rd15, %SP, 8;
	add.u64 	%rd16, %SP, 16;
	add.u64 	%rd17, %SP, 24;
	add.u64 	%rd18, %SP, 56;
	add.u64 	%rd2, %SPL, 8;
	add.u64 	%rd3, %SPL, 16;
	add.u64 	%rd4, %SPL, 24;
	add.u64 	%rd5, %SPL, 56;
	mov.u64 	%rd27, _$_str15;
	cvta.global.u64 	%rd28, %rd27;
	mov.u64 	%rd58, 0;
	{ // callseq 18, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd28;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd58;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r15, [retval0+0];
	} // callseq 18
	ld.global.u64 	%rd29, [buffer_oN_DeViCe];
	st.u16 	[%rd29], %r4;
	mov.u32 	%r16, %ntid.y;
	st.u16 	[%rd29+2], %r16;
	st.u16 	[%rd29+4], %r1;
	mov.u32 	%r17, %nctaid.y;
	st.u16 	[%rd29+6], %r17;
	ld.global.u64 	%rd30, [ccnntt];
	st.local.u64 	[%rd2], %rd30;
	mov.u64 	%rd31, _$_str16;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 19, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd15;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r18, [retval0+0];
	} // callseq 19
	ld.global.u64 	%rd34, [bbccnntt];
	st.local.u64 	[%rd3], %rd34;
	{ // callseq 20, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd16;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r19, [retval0+0];
	} // callseq 20
	ld.global.u64 	%rd36, [buffer_oN_DeViCe];
	ld.global.u64 	%rd37, [ccnntt];
	st.u64 	[%rd36+8], %rd37;
	mov.u32 	%r20, 31;
	mov.u32 	%r21, 15;
	st.local.v2.u32 	[%rd4], {%r21, %r20};
	mov.u64 	%rd38, 1;
	st.local.u64 	[%rd4+8], %rd38;
	mov.u64 	%rd39, 465;
	st.local.u64 	[%rd4+16], %rd39;
	mov.u64 	%rd40, 1024;
	st.local.u64 	[%rd4+24], %rd40;
	mov.u64 	%rd41, _$_str17;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 21, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r22, [retval0+0];
	} // callseq 21
	mov.u32 	%r23, 20;
	st.local.v2.u32 	[%rd5], {%r23, %r21};
	mov.u64 	%rd44, 8;
	st.local.u64 	[%rd5+8], %rd44;
	mov.u64 	%rd45, 2400;
	st.local.u64 	[%rd5+16], %rd45;
	mov.u64 	%rd46, 4096;
	st.local.u64 	[%rd5+24], %rd46;
	mov.u64 	%rd47, _$_str18;
	cvta.global.u64 	%rd48, %rd47;
	{ // callseq 22, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd48;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd18;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r24, [retval0+0];
	} // callseq 22
	ld.global.u64 	%rd6, [buffer_oN_DeViCe];
	add.s64 	%rd7, %rd6, 2013264896;
LBB17_8:                                // %load-store-loop
                                        // =>This Inner Loop Header: Depth=1
	mov.u64 	%rd50, funcDic;
	add.s64 	%rd51, %rd50, %rd58;
	ld.global.u8 	%rs1, [%rd51];
	add.s64 	%rd52, %rd7, %rd58;
	st.u8 	[%rd52], %rs1;
	add.s64 	%rd58, %rd58, 1;
	setp.lt.u64 	%p12, %rd58, 465;
	@%p12 bra 	LBB17_8;
// %bb.9:                               // %memcpy-split
	add.s64 	%rd10, %rd6, 2013261824;
	mov.u64 	%rd59, 0;
LBB17_10:                               // %load-store-loop2
                                        // =>This Inner Loop Header: Depth=1
	mov.u64 	%rd54, contextDic;
	add.s64 	%rd55, %rd54, %rd59;
	ld.global.u8 	%rs2, [%rd55];
	add.s64 	%rd56, %rd10, %rd59;
	st.u8 	[%rd56], %rs2;
	add.s64 	%rd59, %rd59, 1;
	setp.lt.u64 	%p13, %rd59, 2400;
	@%p13 bra 	LBB17_10;
// %bb.11:                              // %memcpy-split1
	st.global.u64 	[ccnntt], %rd38;
	st.global.u64 	[bbccnntt], %rd38;
LBB17_12:                               // %return
	ret;
                                        // -- End function
}
	// .globl	_Z12bicg_kernel1PfS_S_ii // -- Begin function _Z12bicg_kernel1PfS_S_ii
.visible .entry _Z12bicg_kernel1PfS_S_ii(
	.param .u64 _Z12bicg_kernel1PfS_S_ii_param_0,
	.param .u64 _Z12bicg_kernel1PfS_S_ii_param_1,
	.param .u64 _Z12bicg_kernel1PfS_S_ii_param_2,
	.param .u32 _Z12bicg_kernel1PfS_S_ii_param_3,
	.param .u32 _Z12bicg_kernel1PfS_S_ii_param_4,
	.param .u64 _Z12bicg_kernel1PfS_S_ii_param_5
)                                       // @_Z12bicg_kernel1PfS_S_ii
{
	.local .align 8 .b8 	__local_depot18[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<20>;
	.reg .b64 	%rd<27>;

// %bb.0:                               // %entry
	mov.u64 	%SPL, __local_depot18;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd5, [_Z12bicg_kernel1PfS_S_ii_param_5];
	ld.param.u32 	%r2, [_Z12bicg_kernel1PfS_S_ii_param_4];
	ld.param.u32 	%r1, [_Z12bicg_kernel1PfS_S_ii_param_3];
	ld.param.u64 	%rd4, [_Z12bicg_kernel1PfS_S_ii_param_2];
	ld.param.u64 	%rd3, [_Z12bicg_kernel1PfS_S_ii_param_1];
	ld.param.u64 	%rd2, [_Z12bicg_kernel1PfS_S_ii_param_0];
	cvta.to.global.u64 	%rd6, %rd5;
	cvta.global.u64 	%rd7, %rd6;
	cvta.to.global.u64 	%rd8, %rd4;
	cvta.global.u64 	%rd9, %rd8;
	cvta.to.global.u64 	%rd10, %rd3;
	cvta.global.u64 	%rd11, %rd10;
	cvta.to.global.u64 	%rd12, %rd2;
	cvta.global.u64 	%rd13, %rd12;
	{ // callseq 23, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd7;
	.param .b64 retval0;
	call.uni (retval0), 
	InitKernel, 
	(
	param0
	);
	ld.param.b64 	%rd1, [retval0+0];
	} // callseq 23
	st.u64 	[%SP+0], %rd13;
	st.u64 	[%SP+8], %rd11;
	st.u64 	[%SP+16], %rd9;
	st.u32 	[%SP+24], %r1;
	st.u32 	[%SP+28], %r2;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r5, %r3, %r4;
	mov.u32 	%r6, %tid.x;
	add.s32 	%r7, %r5, %r6;
	st.u32 	[%SP+32], %r7;
	ld.u32 	%r8, [%SP+32];
	ld.u32 	%r9, [%SP+28];
	setp.ge.s32 	%p1, %r8, %r9;
	@%p1 bra 	LBB18_6;
	bra.uni 	LBB18_1;
LBB18_1:                                // %if.then
	ld.u64 	%rd14, [%SP+16];
	ld.s32 	%rd15, [%SP+32];
	shl.b64 	%rd16, %rd15, 2;
	add.s64 	%rd17, %rd14, %rd16;
	mov.u32 	%r10, 0;
	st.u32 	[%rd17], %r10;
	st.u32 	[%SP+36], %r10;
	bra.uni 	LBB18_2;
LBB18_2:                                // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%r11, [%SP+36];
	ld.u32 	%r12, [%SP+24];
	setp.ge.s32 	%p2, %r11, %r12;
	@%p2 bra 	LBB18_5;
	bra.uni 	LBB18_3;
LBB18_3:                                // %for.body
                                        //   in Loop: Header=BB18_2 Depth=1
	ld.u64 	%rd18, [%SP+0];
	ld.u32 	%r13, [%SP+36];
	ld.u32 	%r14, [%SP+28];
	mul.lo.s32 	%r15, %r13, %r14;
	ld.u32 	%r16, [%SP+32];
	add.s32 	%r17, %r15, %r16;
	mul.wide.s32 	%rd19, %r17, 4;
	add.s64 	%rd20, %rd18, %rd19;
	ld.f32 	%f1, [%rd20];
	ld.u64 	%rd21, [%SP+8];
	mul.wide.s32 	%rd22, %r13, 4;
	add.s64 	%rd23, %rd21, %rd22;
	ld.f32 	%f2, [%rd23];
	ld.u64 	%rd24, [%SP+16];
	mul.wide.s32 	%rd25, %r16, 4;
	add.s64 	%rd26, %rd24, %rd25;
	ld.f32 	%f3, [%rd26];
	fma.rn.f32 	%f4, %f1, %f2, %f3;
	st.f32 	[%rd26], %f4;
	bra.uni 	LBB18_4;
LBB18_4:                                // %for.inc
                                        //   in Loop: Header=BB18_2 Depth=1
	ld.u32 	%r18, [%SP+36];
	add.s32 	%r19, %r18, 1;
	st.u32 	[%SP+36], %r19;
	bra.uni 	LBB18_2;
LBB18_5:                                // %for.end
	bra.uni 	LBB18_6;
LBB18_6:                                // %if.end
	{ // callseq 24, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd1;
	call.uni 
	RetKernel, 
	(
	param0
	);
	} // callseq 24
	ret;
                                        // -- End function
}
	// .globl	_Z12bicg_kernel2PfS_S_ii // -- Begin function _Z12bicg_kernel2PfS_S_ii
.visible .entry _Z12bicg_kernel2PfS_S_ii(
	.param .u64 _Z12bicg_kernel2PfS_S_ii_param_0,
	.param .u64 _Z12bicg_kernel2PfS_S_ii_param_1,
	.param .u64 _Z12bicg_kernel2PfS_S_ii_param_2,
	.param .u32 _Z12bicg_kernel2PfS_S_ii_param_3,
	.param .u32 _Z12bicg_kernel2PfS_S_ii_param_4,
	.param .u64 _Z12bicg_kernel2PfS_S_ii_param_5
)                                       // @_Z12bicg_kernel2PfS_S_ii
{
	.local .align 8 .b8 	__local_depot19[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<20>;
	.reg .b64 	%rd<27>;

// %bb.0:                               // %entry
	mov.u64 	%SPL, __local_depot19;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd5, [_Z12bicg_kernel2PfS_S_ii_param_5];
	ld.param.u32 	%r2, [_Z12bicg_kernel2PfS_S_ii_param_4];
	ld.param.u32 	%r1, [_Z12bicg_kernel2PfS_S_ii_param_3];
	ld.param.u64 	%rd4, [_Z12bicg_kernel2PfS_S_ii_param_2];
	ld.param.u64 	%rd3, [_Z12bicg_kernel2PfS_S_ii_param_1];
	ld.param.u64 	%rd2, [_Z12bicg_kernel2PfS_S_ii_param_0];
	cvta.to.global.u64 	%rd6, %rd5;
	cvta.global.u64 	%rd7, %rd6;
	cvta.to.global.u64 	%rd8, %rd4;
	cvta.global.u64 	%rd9, %rd8;
	cvta.to.global.u64 	%rd10, %rd3;
	cvta.global.u64 	%rd11, %rd10;
	cvta.to.global.u64 	%rd12, %rd2;
	cvta.global.u64 	%rd13, %rd12;
	{ // callseq 25, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd7;
	.param .b64 retval0;
	call.uni (retval0), 
	InitKernel, 
	(
	param0
	);
	ld.param.b64 	%rd1, [retval0+0];
	} // callseq 25
	st.u64 	[%SP+0], %rd13;
	st.u64 	[%SP+8], %rd11;
	st.u64 	[%SP+16], %rd9;
	st.u32 	[%SP+24], %r1;
	st.u32 	[%SP+28], %r2;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r5, %r3, %r4;
	mov.u32 	%r6, %tid.x;
	add.s32 	%r7, %r5, %r6;
	st.u32 	[%SP+32], %r7;
	ld.u32 	%r8, [%SP+32];
	ld.u32 	%r9, [%SP+24];
	setp.ge.s32 	%p1, %r8, %r9;
	@%p1 bra 	LBB19_6;
	bra.uni 	LBB19_1;
LBB19_1:                                // %if.then
	ld.u64 	%rd14, [%SP+16];
	ld.s32 	%rd15, [%SP+32];
	shl.b64 	%rd16, %rd15, 2;
	add.s64 	%rd17, %rd14, %rd16;
	mov.u32 	%r10, 0;
	st.u32 	[%rd17], %r10;
	st.u32 	[%SP+36], %r10;
	bra.uni 	LBB19_2;
LBB19_2:                                // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ld.u32 	%r11, [%SP+36];
	ld.u32 	%r12, [%SP+28];
	setp.ge.s32 	%p2, %r11, %r12;
	@%p2 bra 	LBB19_5;
	bra.uni 	LBB19_3;
LBB19_3:                                // %for.body
                                        //   in Loop: Header=BB19_2 Depth=1
	ld.u64 	%rd18, [%SP+0];
	ld.u32 	%r13, [%SP+32];
	ld.u32 	%r14, [%SP+28];
	mul.lo.s32 	%r15, %r13, %r14;
	ld.u32 	%r16, [%SP+36];
	add.s32 	%r17, %r15, %r16;
	mul.wide.s32 	%rd19, %r17, 4;
	add.s64 	%rd20, %rd18, %rd19;
	ld.f32 	%f1, [%rd20];
	ld.u64 	%rd21, [%SP+8];
	mul.wide.s32 	%rd22, %r16, 4;
	add.s64 	%rd23, %rd21, %rd22;
	ld.f32 	%f2, [%rd23];
	ld.u64 	%rd24, [%SP+16];
	mul.wide.s32 	%rd25, %r13, 4;
	add.s64 	%rd26, %rd24, %rd25;
	ld.f32 	%f3, [%rd26];
	fma.rn.f32 	%f4, %f1, %f2, %f3;
	st.f32 	[%rd26], %f4;
	bra.uni 	LBB19_4;
LBB19_4:                                // %for.inc
                                        //   in Loop: Header=BB19_2 Depth=1
	ld.u32 	%r18, [%SP+36];
	add.s32 	%r19, %r18, 1;
	st.u32 	[%SP+36], %r19;
	bra.uni 	LBB19_2;
LBB19_5:                                // %for.end
	bra.uni 	LBB19_6;
LBB19_6:                                // %if.end
	{ // callseq 26, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd1;
	call.uni 
	RetKernel, 
	(
	param0
	);
	} // callseq 26
	ret;
                                        // -- End function
}

